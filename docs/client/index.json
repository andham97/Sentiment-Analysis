[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "client/.external-ecmascript.js",
    "static": true,
    "longname": "client/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "client/App.js",
    "content": "import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Alert from 'react-s-alert';\nimport Dashboard from './components/dashboard/Dashboard';\nimport AdminPanel from './components/admin/AdminPanel';\nimport AdminPanelStore from './components/admin/AdminPanelStore';\nimport SearchStore from './components/dashboard/SearchStore';\nimport LoadingPage from './components/LoadingPage';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/stackslide.css';\n\n/**\n * @class App\n * @extends Component\n */\nclass App extends Component {\n  render() {\n    return (\n      <ErrorBoundary>\n        <Alert stack={{ limit: 1 }} />\n        <BrowserRouter>\n          <SearchStore>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/result' component={LoadingPage} />\n          </SearchStore>\n          <AdminPanelStore>\n            <Route path='/admin' component={AdminPanel} />\n          </AdminPanelStore>\n        </BrowserRouter>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "App",
    "memberof": "client/App.js",
    "static": true,
    "longname": "client/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/App.js",
    "importStyle": "App",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "App"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "render",
    "memberof": "client/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/App.js~App#render",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "client/client.js",
    "content": "import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "client/components/Button.js",
    "content": "import React, { Component } from 'react';\nimport './style/SearchButton.css';\nimport PropTypes from 'prop-types';\n\n/**\n * @class Button\n * @extends Component\n *\n * @reactProps {Function} onClick\n * @reactProps {String} className\n * @reactProps {String} title\n */\nclass Button extends Component {\n  render() {\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={this.props.className}>\n      {this.props.title}</button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.any,\n  className: PropTypes.any,\n  title: PropTypes.any,\n};\n\nexport default Button;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "Button",
    "memberof": "client/components/Button.js",
    "static": true,
    "longname": "client/components/Button.js~Button",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/Button.js",
    "importStyle": "Button",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Button"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onClick"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} className"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} title"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Button.js~Button#render",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "client/components/Card.js",
    "content": "import React, { Component } from 'react';\nimport './style/Card.css';\nimport PropTypes from 'prop-types';\n\n/**\n * @class Card\n * @extends Component\n *\n * @reactProps {String} style\n * @reactProps {Object} children\n * @reactProps {String} cName\n * @reactProps {Function} onClick\n */\nclass Card extends Component {\n  render() {\n    return (\n      <div onClick={this.props.onClick} className={`card ${this.props.cName ? this.props.cName : ''}`} style={this.props.style}>{this.props.children}</div>\n    );\n  }\n}\n\nCard.propTypes = {\n  style: PropTypes.any,\n  children: PropTypes.any,\n  cName: PropTypes.any,\n  onClick: PropTypes.any,\n};\n\nexport default Card;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Card.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "Card",
    "memberof": "client/components/Card.js",
    "static": true,
    "longname": "client/components/Card.js~Card",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/Card.js",
    "importStyle": "Card",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Card"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} style"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} children"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} cName"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onClick"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Card.js~Card",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Card.js~Card#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "client/components/Checkbox.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './style/Checkbox.css';\n\n/**\n * @class Checkbox\n * @extends Component\n *\n * @reactProps {String} name\n * @reactProps {Number} id\n * @reactProps {String} value\n * @reactProps {String} className\n * @reactProps {Function} onChange\n * @reactProps {Boolean} checked\n */\nclass Checkbox extends Component {\n  render() {\n    const {\n      name, id, value, className, onChange, checked,\n    } = this.props;\n    return (\n      <div className='each_Checkbox'>\n        <ul style= {{ margin: '0rem', paddingLeft: '0.2rem' }}><input type='checkbox' key= { id } name= { name } value= { id } checked= {checked} className= { className } onChange= { onChange }/> { value }</ ul>\n      </div>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  name: PropTypes.any,\n  id: PropTypes.any,\n  value: PropTypes.any,\n  className: PropTypes.any,\n  onChange: PropTypes.any,\n  checked: PropTypes.any,\n};\n\nexport default Checkbox;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Checkbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "Checkbox",
    "memberof": "client/components/Checkbox.js",
    "static": true,
    "longname": "client/components/Checkbox.js~Checkbox",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/Checkbox.js",
    "importStyle": "Checkbox",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Checkbox"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} name"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} id"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} value"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} className"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onChange"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Boolean} checked"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Checkbox.js~Checkbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Checkbox.js~Checkbox#render",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "client/components/DatePickerInterval.js",
    "content": "import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport './style/DatePickerInterval.css';\nimport Proptypes from 'prop-types';\n\n/**\n * @class DatePickerInterval\n * @extends Component\n *\n * @reactProps {String} style\n * @reactProps {Function} change\n * @reactProps {Date} startDate\n * @reactProps {Date} endDate\n */\nclass DatePickerInterval extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: props.startDate,\n      endDate: props.endDate,\n    };\n    this.handleChangeEnd = this.handleChangeEnd.bind(this);\n    this.handleChangeStart = this.handleChangeStart.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      startDate: this.props.startDate ? this.props.startDate : undefined,\n      endDate: this.props.endDate ? this.props.endDate : undefined,\n    });\n  }\n\n  /**\n   * Start date change\n   *\n   * @function handleChangeStart\n   * @param  {Date}          start\n   */\n  handleChangeStart(start) {\n    if (start && start.getTime) {\n      start.setHours(0);\n      start.setMinutes(0);\n      start.setSeconds(0);\n    }\n    this.props.change({ startDate: start, endDate: this.state.endDate });\n    this.setState({\n      ...this.state,\n      startDate: start,\n    });\n  }\n\n  /**\n   * End date change\n   *\n   * @function handleChangeEnd\n   * @param  {Date}        end\n   */\n  handleChangeEnd(end) {\n    if (end && end.getTime) {\n      end.setHours(23);\n      end.setMinutes(59);\n      end.setSeconds(59);\n    }\n    this.props.change({ startDate: this.state.startDate, endDate: end });\n    this.setState({\n      ...this.state,\n      endDate: end,\n    });\n  }\n\n  render() {\n    return (\n      <div className='datepickerinterval'>\n        From: <br /><DatePicker\n           selected={this.state.startDate}\n           selectsStart\n           startDate={this.state.startDate}\n           endDate={this.state.endDate}\n           onChange={this.handleChangeStart}\n           className={'daterangestart'}\n           style={this.props.style}\n           isClearable={true}\n        />\n\n        <br />\n\n        To: <br /><DatePicker\n           selected={this.state.endDate}\n           selectsEnd\n           startDate={this.state.startDate}\n           endDate={this.state.endDate}\n           onChange={this.handleChangeEnd}\n           className={'daterangeend'}\n           style={this.props.style}\n           isClearable={true}\n        />\n      </div>\n    );\n  }\n}\n\nDatePickerInterval.propTypes = {\n  style: Proptypes.any,\n  change: Proptypes.any,\n  startDate: Proptypes.any,\n  endDate: Proptypes.any,\n};\n\nexport default DatePickerInterval;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/DatePickerInterval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "DatePickerInterval",
    "memberof": "client/components/DatePickerInterval.js",
    "static": true,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/DatePickerInterval.js",
    "importStyle": "DatePickerInterval",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DatePickerInterval"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} style"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} change"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Date} startDate"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Date} endDate"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#state",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"startDate\": *, \"endDate\": *}"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "handleChangeStart",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#handleChangeStart",
    "access": "public",
    "description": "Start date change",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChangeStart"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "handleChangeEnd",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#handleChangeEnd",
    "access": "public",
    "description": "End date change",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChangeEnd"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/DatePickerInterval.js~DatePickerInterval#render",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "client/components/Dropdown.js",
    "content": "import React, { Component } from 'react';\nimport { FaAngleDown, FaAngleUp } from 'react-icons/fa';\nimport onClickOutside from 'react-onclickoutside';\nimport PropTypes from 'prop-types';\nimport './style/Dropdown.css';\n\n/**\n * @class Dropdown\n * @extends Component\n *\n * @reactProps {String} titleList\n * @reactProps {Object} items\n * @reactProps {Function} onClose\n * @reactProps {String} className\n */\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownList: false,\n    };\n  }\n\n  droppedList() {\n    this.setState({\n      dropdownList: !this.state.dropdownList,\n    });\n  }\n\n  handleClickOutside() {\n    if (this.props.onClose)\n      this.props.onClose();\n    this.setState({\n      dropdownList: false,\n    });\n  }\n\n  render() {\n    const { titleList, items } = this.props;\n    const { dropdownList } = this.state;\n    return (\n        <div className={`dropdown ${this.props.className ? this.props.className : ''}`} onClick={(e) => {\n          if (e.target.className === `dropdown ${this.props.className ? this.props.className : ''}`)\n            this.droppedList();\n        }}>\n          <div className='dropdown_title' onClick={() => this.droppedList()}>{ titleList }\n            {dropdownList ? <span className='arrowDown'> <FaAngleUp /> </span> : <span className='arrowDown'> <FaAngleDown /> </span> }\n          </div>\n          <br />\n          <br />\n            {dropdownList ? (\n              <div className='dropdown dropdown-items'>{ items }</div>\n            )\n              : (\n                null\n              )\n        }\n        </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  titleList: PropTypes.any,\n  items: PropTypes.any,\n  onClose: PropTypes.any,\n  className: PropTypes.any,\n};\n\nexport default onClickOutside(Dropdown);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Dropdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Dropdown",
    "memberof": "client/components/Dropdown.js",
    "static": true,
    "longname": "client/components/Dropdown.js~Dropdown",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/Dropdown.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Dropdown"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} titleList"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} items"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onClose"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} className"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Dropdown.js~Dropdown#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/Dropdown.js~Dropdown",
    "static": false,
    "longname": "client/components/Dropdown.js~Dropdown#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"dropdownList\": *}"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "droppedList",
    "memberof": "client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Dropdown.js~Dropdown#droppedList",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "handleClickOutside",
    "memberof": "client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Dropdown.js~Dropdown#handleClickOutside",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Dropdown.js~Dropdown#render",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "client/components/ErrorBoundary.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * @class ErrorBoundary\n * @extends Component\n *\n * @reactProps {Object} children\n */\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  /**\n   * Derived state from error\n   *\n   * @function getDerivedStateFromError\n   * @param  {Error}                 error\n   * @returns {Object}\n   */\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error);\n    console.error(info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (<React.Fragment>\n        <h1>Something went wrong.</h1>\n        {JSON.stringify(this.state.error, null, 2)}\n      </React.Fragment>);\n    }\n\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default ErrorBoundary;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/ErrorBoundary.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "ErrorBoundary",
    "memberof": "client/components/ErrorBoundary.js",
    "static": true,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/ErrorBoundary.js",
    "importStyle": "ErrorBoundary",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ErrorBoundary"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} children"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/ErrorBoundary.js~ErrorBoundary",
    "static": false,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary#state",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "{\"hasError\": *}"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getDerivedStateFromError",
    "memberof": "client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary.getDerivedStateFromError",
    "access": "public",
    "description": "Derived state from error",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getDerivedStateFromError"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "componentDidCatch",
    "memberof": "client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary#componentDidCatch",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/ErrorBoundary.js~ErrorBoundary#render",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "client/components/Filter.js",
    "content": "import React, { Component } from 'react';\nimport './style/Filter.css';\nimport Proptypes from 'prop-types';\nimport { FaAngleDown } from 'react-icons/fa';\n\n/**\n * @class Filter\n * @extends Component\n *\n * @reactProps {String} name\n */\nclass Filter extends Component {\n  render() {\n    const { name } = this.props;\n    return (\n      <div className='filter'>\n        <div className='filter_name'> { name }</div>\n        <span className='arrowDown'> <FaAngleDown /> </span>\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  name: Proptypes.any,\n};\n\nexport default Filter;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "Filter",
    "memberof": "client/components/Filter.js",
    "static": true,
    "longname": "client/components/Filter.js~Filter",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/Filter.js",
    "importStyle": "Filter",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Filter"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} name"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Filter.js~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Filter.js~Filter#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "client/components/Header.js",
    "content": "import React, { Component } from 'react';\nimport './style/Header.css';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\n/**\n * @class Header\n * @extends Component\n *\n * @reactProps {String} name\n * @reactProps {Object} children\n * @reactProps {Object} history\n */\nclass Header extends Component {\n  render() {\n    const { name, children } = this.props;\n    return (\n      <div className=\"header\">\n        <div><span className=\"clickable\" onClick={() => this.props.history.push('/')}>{ name }</span> { children }<span className='clickable admin-button' onClick={() => this.props.history.push('/admin')}>Admin?</span></div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.any,\n  children: PropTypes.any,\n  history: PropTypes.any,\n};\n\nexport default withRouter(Header);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "Header",
    "memberof": "client/components/Header.js",
    "static": true,
    "longname": "client/components/Header.js~Header",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/Header.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Header"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} name"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} children"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} history"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/Header.js~Header",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/Header.js~Header#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "client/components/LoadingPage.js",
    "content": "import React, { Component } from 'react';\nimport './style/LoadingPage.css';\nimport loader from '../oda.gif';\nimport { SearchContext } from './dashboard/SearchStore';\nimport Result from './result/Result';\nimport ResultSentiment from './result/ResultSentiment';\nimport NoResult from './result/NoResult';\n\n/**\n * @class LoadingPage\n * @extends Component\n */\nclass LoadingPage extends Component {\n  componentDidMount() {\n    if (!this.context.search && localStorage.getItem('prev-search') && !this.context.searchOpts)\n      this.context.getSearch(JSON.parse(localStorage.getItem('prev-search')));\n  }\n\n  render() {\n    if (!this.context.search)\n      return (\n        <React.Fragment>\n          <img src={loader} />\n          <div>{ this.context.search }</div>\n        </React.Fragment>\n      );\n    if (this.context.search.docs.length === 0)\n      return <NoResult />;\n    if (this.context.searchType === 'emotion')\n      return <Result />;\n    if (this.context.searchType === 'sentiment')\n      return <ResultSentiment />;\n    return <NoResult />;\n  }\n}\n\nLoadingPage.contextType = SearchContext;\n\nexport default LoadingPage;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/LoadingPage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "LoadingPage",
    "memberof": "client/components/LoadingPage.js",
    "static": true,
    "longname": "client/components/LoadingPage.js~LoadingPage",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/LoadingPage.js",
    "importStyle": "LoadingPage",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "LoadingPage"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "client/components/LoadingPage.js~LoadingPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/LoadingPage.js~LoadingPage#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/LoadingPage.js~LoadingPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/LoadingPage.js~LoadingPage#render",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "client/components/TimeInterval.js",
    "content": "import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport './style/TimeInterval.css';\n\n/**\n * @class TimeInterval\n * @extends Component\n */\nclass TimeInterval extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date(),\n      endDate: new Date(),\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Handle date change\n   *\n   * @function handleChange\n   * @param  {Date}     startdate\n   * @param  {Date}     enddate\n   */\n  handleChange(startdate, enddate) {\n    this.setState({\n      startDate: startdate,\n      endDate: enddate,\n    });\n  }\n\n  render() {\n    return (\n      <div><br /> <span className='chooseDate'>Choose prefered date: </span>\n        From: <DatePicker todayButton={'Today'} selected={this.state.startDate} onChange={this.handleChange()}/>\n        To: <DatePicker todayButton={'Today'} selected={this.state.endDate} onChange={this.handleChange()}/>\n      </div>\n    );\n  }\n}\n\nexport default TimeInterval;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/TimeInterval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "TimeInterval",
    "memberof": "client/components/TimeInterval.js",
    "static": true,
    "longname": "client/components/TimeInterval.js~TimeInterval",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/TimeInterval.js",
    "importStyle": "TimeInterval",
    "description": "",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "TimeInterval"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/TimeInterval.js~TimeInterval#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/TimeInterval.js~TimeInterval",
    "static": false,
    "longname": "client/components/TimeInterval.js~TimeInterval#state",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"startDate\": *, \"endDate\": *}"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "handleChange",
    "memberof": "client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/TimeInterval.js~TimeInterval#handleChange",
    "access": "public",
    "description": "Handle date change",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "startdate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "enddate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/TimeInterval.js~TimeInterval#render",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "client/components/admin/AdminPanel.js",
    "content": "import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport brace from 'brace'; // eslint-disable-line no-unused-vars\nimport 'brace/mode/javascript';\nimport 'brace/theme/tomorrow';\nimport Alert from 'react-s-alert';\nimport '../style/AdminPanel.css';\nimport Header from '../Header';\nimport Card from '../Card';\nimport MultiListInput from './MultiListInput';\nimport { AdminPanelContext } from './AdminPanelStore';\nimport Scraper from './Scraper';\nimport Button from '../Button';\n\n/**\n * Job object boilerplate\n * @type {Object}\n */\nconst sItemBoilerplate = {\n  task: '',\n  recurring: false,\n  occurences: [],\n};\n\n/**\n * Clone object\n *\n * @function clone\n * @param  {Object} o\n * @returns {Object}\n */\nconst clone = o => JSON.parse(JSON.stringify(o));\n\n/**\n * @class AdminPanel\n * @extends Component\n */\nclass AdminPanel extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tempScrapeURL: '',\n      tempDateSel: '',\n      tempDateAttr: '',\n      tempSelection: [],\n      tempSItem: clone(sItemBoilerplate),\n      tempSItemShow: -1,\n    };\n\n    this.scrapeURLChange = this.scrapeURLChange.bind(this);\n    this.dateAttrChange = this.dateAttrChange.bind(this);\n    this.dateSelChange = this.dateSelChange.bind(this);\n  }\n\n  /**\n   * Update date selector input\n   *\n   * @function dateSelChange\n   * @param  {Object}      e\n   */\n  dateSelChange(e) {\n    this.setState({ ...this.state, tempDateSel: e.target.value });\n  }\n\n  /**\n   * Update date attribute input\n   *\n   * @function dateAttrChange\n   * @param  {Object}      e\n   */\n  dateAttrChange(e) {\n    this.setState({ ...this.state, tempDateAttr: e.target.value });\n  }\n\n  /**\n   * Update scrape URL input\n   *\n   * @function scrapeURLChange\n   * @param  {Object}      e\n   */\n  scrapeURLChange(e) {\n    this.setState({ ...this.state, tempScrapeURL: e.target.value });\n  }\n\n  componentWillMount() {\n    this.context.getHosts();\n    this.context.isWhitelisted();\n    this.context.getUrlCount();\n    this.context.getSchedule();\n  }\n\n  /**\n   * Select active host\n   *\n   * @function selectHost\n   * @param  {number}      i\n   */\n  selectHost(i) {\n    return () => {\n      this.context.setActiveHost(i);\n    };\n  }\n\n  render() {\n    const { hosts, activeHost } = this.context;\n    return <React.Fragment>\n      <Header name='Webscraper administration tool' />\n      <div className='wrapper admin'>\n        <Card cName='scroll'>\n          <ul>\n            {hosts.length === 0 ? 'Loading hosts...' : hosts.map((host, i) => <li key={i}>\n              <span onClick={this.selectHost(i).bind(this)}><strong>{host.sourceID}</strong>:{host.hostnames.map((name, j) => `${j > 0 ? ',' : ''} ${name}`)}</span>\n            </li>)}\n          </ul>\n        </Card>\n        <Card cName=\"admin-host-edit scroll\">\n          Name: <input placeholder='Source name' value={activeHost.name} onChange={e => this.context.updateActiveHost({ ...activeHost, name: e.target.value })} /><br />\n          <MultiListInput\n            title='Headline selectors'\n            addButton='Add selector'\n            emptyText='No selectors'\n            newText='New selector'\n            delButton='Delete'\n            placeholder='Headline selector'\n            propname='headlines'\n            activeHost={activeHost}\n            update={this.context.updateActiveHost} /><br />\n          <MultiListInput\n            title='Body selectors'\n            addButton='Add selector'\n            emptyText='No selectors'\n            newText='New selector'\n            delButton='Delete'\n            placeholder='Body selector'\n            propname='body'\n            activeHost={activeHost}\n            update={this.context.updateActiveHost} /><br />\n          <MultiListInput\n            title='Hostnames'\n            addButton='Add host'\n            emptyText='No hostnames'\n            newText='New host'\n            delButton='Delete'\n            placeholder='Hostname'\n            propname='hostnames'\n            propnameDel='hostDeletions'\n            activeHost={activeHost}\n            update={this.context.updateActiveHost} /><br />\n          <MultiListInput\n            title='Body exclude CSS-selector'\n            addButton='Add selector'\n            emptyText='No exclude selectors'\n            newText='New exclusion selector'\n            delButton='Delete'\n            placeholder='Exclude selector'\n            propname='exclude'\n            activeHost={activeHost}\n            update={this.context.updateActiveHost} /><br />\n          <strong>Date selectors</strong><br />\n          <ul>\n            {activeHost.date.sel.length === 0 ? <i>No selectors</i> : activeHost.date.sel\n              .map((val, i) => <li key={i}>{val.sel} : {val.attr === '' ? '<no attribute>' : val.attr}<button onClick={() => {\n                activeHost.date.sel.splice(i, 1);\n                this.context.updateActiveHost({ ...activeHost });\n              }}>Delete</button></li>)}\n          </ul>\n          New selector: <input\n            type='text'\n            placeholder='Date selector'\n            value={this.state.tempDateSel}\n            onChange={this.dateSelChange} /><br />\n          Attribute (optional)<input\n            type='text'\n            placeholder='Attribute name'\n            value={this.state.tempDateAttr}\n            onChange={this.dateAttrChange} />\n          <button onClick={() => {\n            activeHost.date.sel\n              .push({ sel: this.state.tempDateSel, attr: this.state.tempDateAttr });\n            this.setState({ ...this.state, tempDateSel: '', tempDateAttr: '' });\n            this.context.updateActiveHost({ ...activeHost });\n          }}>Add selector</button><br /><br />\n          Validation URL: <input\n            type='text'\n            placeholder='Validation URL'\n            value={activeHost.validationURL}\n            onChange={(e) => {\n              this.context.updateActiveHost({ ...activeHost, validationURL: e.target.value });\n            }} /><br />\n          <i>If using attribute, the value contained in the attribute will\n            be passed to the date function instead of the text in the selected element.\n            The element is selected with the CSS-selector above</i>\n          <button onClick={() => this.context.saveHost()}>Save host</button>\n          <button onClick={() => this.context.clearActiveHost()}>Clear fields</button>\n        </Card>\n        <Card cName='admin-editor-panel'>\n          <AceEditor\n            placeholder='Create function with signatur (date: string, months: array)'\n            mode='javascript'\n            theme='tomorrow'\n            name='editor'\n            onChange={code => this.context.updateActiveHost({\n              ...activeHost,\n              date: {\n                ...activeHost.date,\n                fn: code,\n              },\n            })}\n            fontSize={14}\n            showGutter\n            wrapEnabled\n            highlightActiveLine\n            width='100%'\n            height='100%'\n            value={activeHost.date.fn}\n            setOptions={{\n              showLineNumbers: true,\n              tabSize: 2,\n            }}\n            className='admin-editor'\n            editorProps={{ $blockScrolling: Infinity }}/>\n        </Card>\n        <Card>\n          Test website: <input placeholder='Test site URL' value={this.context.testURL} onChange={e => this.context.testURLChange(e.target.value)} />\n          <button onClick={() => this.context.loadTestURL()}>Load page</button><br />\n          <Scraper />\n        </Card>\n        {this.context.whitelist ? (\n          <React.Fragment>\n            <Card>\n              <h1>Management</h1><br/>\n              Scrape URL: <input type=\"text\" placeholder=\"URL\" onChange={this.scrapeURLChange} />\n              <button\n                onClick={() => this.context.scrapeURL(this.state.tempScrapeURL)}>\n                Scrape URL</button><br />\n              <div className='scroll'>\n                {hosts.map((val, i) => (<div key={i}>\n                  <input\n                    type='checkbox'\n                    value={val.sourceID}\n                    onClick={(e) => {\n                      const { tempSelection } = this.state;\n                      if (tempSelection.indexOf(e.target.value) > -1)\n                        tempSelection.splice(tempSelection.indexOf(e.target.value), 1);\n                      else\n                        tempSelection.push(e.target.value);\n                      this.setState({ ...this.state, tempSelection });\n                    }}\n                    defaultChecked={this.state.tempSelection.indexOf(val.sourceID) > -1} />\n                  {val.name}<br />\n                </div>))}\n              </div>\n              <Button\n                title='Scrape news sources'\n                onClick={() => this.context.fetchNews(this.state.tempSelection, hosts\n                  .filter(h => this.state.tempSelection.indexOf(h.sourceID) > -1)\n                  .reduce((acc, h) => {\n                    acc[h.sourceID] = h.name;\n                    return acc;\n                  }, {}))} />\n              <h1>Statistics</h1>\n              <p>{`Number of articles indexed: ${this.context.urlCount === -1 ? 'Loading...' : this.context.urlCount}`}</p>\n            </Card>\n            <Card cName='admin-schedule'>\n              <h1>Schedule</h1>\n              <div className='admin-add-sitem'>\n                <MultiListInput\n                  title='Occurences'\n                  addButton='Add occurence'\n                  emptyText='No occurences'\n                  newText='New occurence (UTC)'\n                  delButton='Delete'\n                  placeholder='Occurence (hh:mm:ss)'\n                  propname='occurences'\n                  activeHost={this.state.tempSItem}\n                  validate={(input) => {\n                    const nums = input.split(':');\n                    if (nums.length !== 3\n                      || nums.filter(n => n.length !== 2 && n.length !== 1).length > 0\n                      || nums.reduce((acc, val, i) => {\n                        if (acc)\n                          return acc;\n                        return isNaN(val)\n                          || Number(val) < 0\n                          || Number(val) > (i === 0 ? 23 : 59);\n                      }, false)) {\n                      Alert.error('Occurence is invalid, use (hh:mm:ss) in the range 00:00:00 to 23:59:59', { position: 'top' });\n                      return false;\n                    }\n                    return true;\n                  }} /><br />\n                  Time difference: {new Date().getHours() - new Date().getUTCHours()} hours<br />\n                <h3>Select news sources for new job</h3>\n                <div className='admin-add-sitem-list scroll'>\n                  <input\n                    type='checkbox'\n                    onClick={(e) => {\n                      this.setState({\n                        ...this.state,\n                        tempSItem: {\n                          ...this.state.tempSItem,\n                          task: e.target.checked ? 'all' : [...document.querySelectorAll('.admin-add-sitem input:checked')].map(item => item.value).join(','),\n                        },\n                      });\n                    }} />\n                    All sources<br />\n                  {hosts.map((val, i) => (<div key={i}>\n                    <input\n                      disabled={this.state.tempSItem.task === 'all'}\n                      type='checkbox'\n                      value={val.sourceID}\n                      onClick={(e) => {\n                        const { tempSItem } = this.state;\n                        const { checked, value } = e.target;\n                        const task = tempSItem.task.split(',').filter(t => t !== '');\n                        if (!checked && task.indexOf(value) > -1)\n                          task.splice(task.indexOf(value), 1);\n                        else if (checked && task.indexOf(value) === -1)\n                          task.push(value);\n                        this.setState({\n                          ...this.state,\n                          tempSItem: {\n                            ...tempSItem,\n                            task: task.join(','),\n                          },\n                        });\n                      }} />\n                    {val.name}\n                    </div>))}\n                  </div><br /><br />\n                <input\n                  type='checkbox'\n                  onClick={({ target }) => {\n                    this.setState({\n                      ...this.state,\n                      tempSItem: {\n                        ...this.state.tempSItem,\n                        recurring: target.checked,\n                      },\n                    });\n                  }} /> Recurring job\n                <Button\n                  title='Add job'\n                  onClick={() => {\n                    const { tempSItem } = this.state;\n                    tempSItem.occurences = tempSItem.occurences.map((occ) => {\n                      const nums = occ.split(':');\n                      return {\n                        hour: Number(nums[0]),\n                        minute: Number(nums[1]),\n                        second: Number(nums[2]),\n                      };\n                    });\n                    Alert.info('Adding job to schedule');\n                    this.context.addScheduleItem(tempSItem);\n                    this.setState({\n                      ...this.state,\n                      tempSItem: clone(sItemBoilerplate),\n                    });\n                  }} />\n              </div>\n              <div className='admin-show-sitem scroll'>\n                <ul>\n                  {this.context.scheduleItems.map((item, i) => <li key={i} onClick={() => {\n                    this.setState({\n                      ...this.state,\n                      tempSItemShow: this.state.tempSItemShow === i ? -1 : i,\n                    });\n                  }}>\n                    Sources to fetch: {item.task}, recurring: {item.recurring ? 'true' : 'false'}\n                    {this.state.tempSItemShow === i\n                      ? <React.Fragment>\n                        <ul>\n                          {item.occurences.map((occ, j) => <li key={j}>\n                            {occ.hour < 10 ? `0${occ.hour}` : occ.hour}:\n                            {occ.minute < 10 ? `0${occ.minute}` : occ.minute}:\n                            {occ.second < 10 ? `0${occ.second}` : occ.second}\n                          </li>)\n                          }\n                        </ul>\n                        <Button\n                          title='Remove job'\n                          onClick={() => {\n                            Alert.info('Removing job from schedule');\n                            this.context.deleteScheduleItem(item.id);\n                          }\n                        } />\n                      </React.Fragment>\n                      : ''\n                    }\n                  </li>)}\n                </ul>\n              </div>\n            </Card>\n          </React.Fragment>\n        ) : ''}\n      </div>\n    </React.Fragment>;\n  }\n}\n\nAdminPanel.contextType = AdminPanelContext;\n\nexport default AdminPanel;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/AdminPanel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "sItemBoilerplate",
    "memberof": "client/components/admin/AdminPanel.js",
    "static": true,
    "longname": "client/components/admin/AdminPanel.js~sItemBoilerplate",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanel.js",
    "importStyle": null,
    "description": "Job object boilerplate",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "clone",
    "memberof": "client/components/admin/AdminPanel.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/admin/AdminPanel.js~clone",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanel.js",
    "importStyle": null,
    "description": "Clone object",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "clone"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "class",
    "name": "AdminPanel",
    "memberof": "client/components/admin/AdminPanel.js",
    "static": true,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanel.js",
    "importStyle": "AdminPanel",
    "description": "",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AdminPanel"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#state",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "{\"tempScrapeURL\": *, \"tempDateSel\": *, \"tempDateAttr\": *, \"tempSelection\": *, \"tempSItem\": *, \"tempSItemShow\": *}"
      ]
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "dateSelChange",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#dateSelChange",
    "access": "public",
    "description": "Update date selector input",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "dateSelChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "dateAttrChange",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#dateAttrChange",
    "access": "public",
    "description": "Update date attribute input",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "dateAttrChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "scrapeURLChange",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#scrapeURLChange",
    "access": "public",
    "description": "Update scrape URL input",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "scrapeURLChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "selectHost",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#selectHost",
    "access": "public",
    "description": "Select active host",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "selectHost"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/admin/AdminPanel.js~AdminPanel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanel.js~AdminPanel#render",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "client/components/admin/AdminPanelStore.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport beautify from 'js-beautify';\nimport cheerio from 'cheerio';\nimport Alert from 'react-s-alert';\n\n/**\n * Admin Panel store context\n * @type {Context}\n */\nconst AdminPanelContext = React.createContext();\n\n/**\n * Host boilerplate\n * @type {Object}\n */\nconst hostBoilerplate = {\n  body: [],\n  date: {\n    sel: [],\n    fn: '(date, months) => {\\n  return new Date();\\n};',\n  },\n  exclude: [],\n  headlines: [],\n  name: '',\n  sourceID: '',\n  hostnames: [],\n  hostDeletions: [],\n  headlineDeletions: [],\n  bodyDeletions: [],\n  excludeDelections: [],\n  validationURL: '',\n};\n\n/**\n * Clone object\n *\n * @function clone\n * @param  {Object} object\n * @returns {Object}\n */\nconst clone = object => JSON.parse(JSON.stringify(object));\n\n/**\n * @class AdminPanelStore\n * @extends React\n *\n * @reactProps children {Array}\n */\nclass AdminPanelStore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hosts: [],\n      activeHost: clone(hostBoilerplate),\n      activeIndex: -1,\n      testURL: '',\n      whitelist: false,\n      urlCount: -1,\n      scheduleItems: [],\n    };\n    this.getHosts = this.getHosts.bind(this);\n    this.setActiveHost = this.setActiveHost.bind(this);\n    this.updateActiveHost = this.updateActiveHost.bind(this);\n    this.saveHost = this.saveHost.bind(this);\n    this.testURLChange = this.testURLChange.bind(this);\n    this.loadTestURL = this.loadTestURL.bind(this);\n    this.clearActiveHost = this.clearActiveHost.bind(this);\n    this.isWhitelisted = this.isWhitelisted.bind(this);\n    this.fetchNews = this.fetchNews.bind(this);\n    this.getUrlCount = this.getUrlCount.bind(this);\n    this.getSchedule = this.getSchedule.bind(this);\n    this.addScheduleItem = this.addScheduleItem.bind(this);\n    this.deleteScheduleItem = this.deleteScheduleItem.bind(this);\n  }\n\n  /**\n   * Add job to schedule\n   *\n   * @function addScheduleItem\n   * @param  {Object}        item\n   */\n  addScheduleItem(item) {\n    fetch('/api/ws/schedule', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(item),\n    }).then(res => res.json()).then((nItem) => {\n      const { scheduleItems } = this.state;\n      scheduleItems.push(nItem);\n      this.setState({\n        ...this.state,\n        scheduleItems,\n      });\n    }).catch(console.error);\n  }\n\n  /**\n   * Remove job from schedule\n   *\n   * @function deleteScheduleItem\n   * @param  {string}           id\n   */\n  deleteScheduleItem(id) {\n    fetch(`/api/ws/schedule/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()).then((did) => {\n      let { scheduleItems } = this.state;\n      scheduleItems = scheduleItems.filter(item => item.id !== did);\n      this.setState({\n        ...this.state,\n        scheduleItems,\n      });\n    }).catch(console.error);\n  }\n\n  /**\n   * Get central schedule\n   *\n   * @function getSchedule\n   */\n  getSchedule() {\n    fetch('/api/ws/schedule').then(res => res.json()).then((items) => {\n      this.setState({\n        ...this.state,\n        scheduleItems: items,\n      });\n    }).catch(console.error);\n  }\n\n  /**\n   * Get URL count\n   *\n   * @function getUrlCount\n   */\n  getUrlCount() {\n    fetch('/api/ws/urlCount', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(res => res.json())\n      .then(data => this.setState({ ...this.state, urlCount: data.count }))\n      .catch(console.error);\n  }\n\n  /**\n   * Fetch news articles\n   *\n   * @function fetchNews\n   * @param  {Array<string>}  sources\n   * @param  {Object}  hsts    - [description]\n   */\n  fetchNews(sources, hsts) {\n    Alert.info(`Fetching news from ${sources.reduce((acc, src) => `${acc} ${hsts[src]},`, '')}`.slice(0, -1), { position: 'top' });\n    fetch('/api/ws/fetchNews', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        sources,\n      }),\n    }).then(res => res.json()).then((data) => {\n      Alert.success(`${data} articles started to load`, { position: 'top' });\n    }).catch(console.error);\n  }\n\n  /**\n   * Scrape URL\n   *\n   * @function scrapeURL\n   * @param  {string}  url\n   */\n  scrapeURL(url) {\n    if (typeof url !== 'string')\n      return;\n    fetch('/api/ws', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        urls: [url],\n      }),\n    });\n  }\n\n  /**\n   * Is the user whitelisted\n   *\n   * @function isWhitelisted\n   * @returns {boolean}\n   */\n  isWhitelisted() {\n    fetch('/api/auth/whitelist').then(resp => resp.json()).then((wl) => {\n      this.setState({ ...this.state, whitelist: wl });\n    }).catch(console.error);\n  }\n\n  /**\n   * Clear the active host\n   *\n   * @function clearActiveHost\n   */\n  clearActiveHost() {\n    this.setState({ ...this.state, activeIndex: -1, activeHost: clone(hostBoilerplate) });\n  }\n\n  /**\n   * Load the content of the test URL\n   *\n   * @function loadTestURL\n   */\n  loadTestURL() {\n    this.setState({ ...this.state, testPage: 1 });\n    fetch(`/api/ws/load?url=${encodeURIComponent(this.state.testURL)}`).then(resp => resp.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        testPage: data.statusCode === 200 ? cheerio.load(data.data) : 'Unable to access news source',\n      });\n    });\n  }\n\n  /**\n   * Test URL state Change\n   *\n   * @function testURLChange\n   * @param  {string}      testURL\n   */\n  testURLChange(testURL) {\n    this.setState({ ...this.state, testURL });\n  }\n\n  /**\n   * Get hosts\n   *\n   * @function getHosts\n   */\n  getHosts() {\n    fetch('/api/ws/hosts').then(response => response.json()).then((data) => {\n      const hosts = Object.keys(data).filter(key => key.indexOf('_') !== 0 && key !== 'type').reduce((acc, key) => {\n        const selection = acc.filter(e => e.sourceID === data[key].sourceID);\n        if (selection.length === 0) {\n          const d = data[key];\n          d.hostnames = [key];\n          d.hostDeletions = [];\n          acc.push(d);\n        }\n        else\n          selection[0].hostnames.push(key);\n        return acc;\n      }, [])\n        .map(val => ({\n          ...val,\n          date: {\n            ...val.date,\n            fn: beautify.js(val.date.fn, {\n              indent_size: 2,\n              space_in_empty_parent: false,\n            }),\n          },\n        }))\n        .sort((a, b) => ([a.sourceID, b.sourceID].sort()[0] === a.sourceID ? -1 : 1));\n      this.setState({ ...this.state, hosts });\n    });\n  }\n\n  /**\n   * Set the active host\n   *\n   * @function setActiveHost\n   * @param  {number}      i\n   */\n  setActiveHost(i) {\n    this.setState({\n      ...this.state,\n      activeIndex: i,\n      activeHost: i === -1 ? clone(hostBoilerplate) : clone(this.state.hosts[i]),\n    });\n  }\n\n  /**\n   * Update the active host\n   *\n   * @function updateActiveHost\n   * @param  {Object}         host\n   */\n  updateActiveHost(host) {\n    host.sourceID = host.name.split(' ').join('-').toLowerCase();\n    this.setState({\n      ...this.state,\n      activeHost: host,\n    });\n  }\n\n  /**\n   * Save the active host\n   *\n   * @function saveHost\n   */\n  saveHost() {\n    if (!this.state.activeHost.validationURL || this.state.activeHost.validationURL === '')\n      return Alert.error('Please provide a validation URL');\n    const { hosts } = this.state;\n    if (this.state.activeIndex > -1)\n      hosts[this.state.activeIndex] = clone(this.state.activeHost);\n    else\n      hosts.push(clone(this.state.activeHost));\n    hosts.sort((a, b) => ([a.sourceID, b.sourceID].sort()[0] === a.sourceID ? -1 : 1));\n    Alert.info('Saving host...', { position: 'top' });\n    fetch('/api/ws/hosts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state.activeHost),\n    }).then((data) => {\n      if (data.status === 200) {\n        Alert.success('Host saved', { postiion: 'top' });\n        this.setState({\n          ...this.state,\n          activeIndex: -1,\n          activeHost: clone(hostBoilerplate),\n        });\n      }\n      else\n        Alert.error(`Host not saved, an error occured.${data.status > 400 && data.status < 410 ? 'host blocks scraping' : ''}`, { position: 'top' });\n    }).catch(console.error);\n    this.setState({\n      ...this.state,\n      hosts,\n    });\n  }\n\n  render() {\n    return (\n      <AdminPanelContext.Provider value={{\n        ...this.state,\n        getHosts: this.getHosts,\n        setActiveHost: this.setActiveHost,\n        updateActiveHost: this.updateActiveHost,\n        saveHost: this.saveHost,\n        testURLChange: this.testURLChange,\n        loadTestURL: this.loadTestURL,\n        clearActiveHost: this.clearActiveHost,\n        isWhitelisted: this.isWhitelisted,\n        scrapeURL: this.scrapeURL,\n        fetchNews: this.fetchNews,\n        getUrlCount: this.getUrlCount,\n        getSchedule: this.getSchedule,\n        addScheduleItem: this.addScheduleItem,\n        deleteScheduleItem: this.deleteScheduleItem,\n      }}>\n      {this.props.children}\n      </AdminPanelContext.Provider>\n    );\n  }\n}\n\nAdminPanelStore.propTypes = {\n  children: PropTypes.any,\n  hosts: PropTypes.any,\n};\n\nexport default AdminPanelStore;\n\nexport { AdminPanelContext };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/AdminPanelStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "variable",
    "name": "hostBoilerplate",
    "memberof": "client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "client/components/admin/AdminPanelStore.js~hostBoilerplate",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanelStore.js",
    "importStyle": null,
    "description": "Host boilerplate",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "clone",
    "memberof": "client/components/admin/AdminPanelStore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/admin/AdminPanelStore.js~clone",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanelStore.js",
    "importStyle": null,
    "description": "Clone object",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "clone"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "AdminPanelStore",
    "memberof": "client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanelStore.js",
    "importStyle": "AdminPanelStore",
    "description": "",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AdminPanelStore"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "children {Array}"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 121,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#state",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{\"hosts\": *, \"activeHost\": *, \"activeIndex\": *, \"testURL\": *, \"whitelist\": *, \"urlCount\": *, \"scheduleItems\": *}"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "method",
    "name": "addScheduleItem",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#addScheduleItem",
    "access": "public",
    "description": "Add job to schedule",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "addScheduleItem"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 137,
    "kind": "method",
    "name": "deleteScheduleItem",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#deleteScheduleItem",
    "access": "public",
    "description": "Remove job from schedule",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "deleteScheduleItem"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "getSchedule",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#getSchedule",
    "access": "public",
    "description": "Get central schedule",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getSchedule"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "getUrlCount",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#getUrlCount",
    "access": "public",
    "description": "Get URL count",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getUrlCount"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "fetchNews",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#fetchNews",
    "access": "public",
    "description": "Fetch news articles",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "fetchNews"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "sources",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "hsts",
        "description": "[description]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "scrapeURL",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#scrapeURL",
    "access": "public",
    "description": "Scrape URL",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "scrapeURL"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "isWhitelisted",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#isWhitelisted",
    "access": "public",
    "description": "Is the user whitelisted",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "isWhitelisted"
      },
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "clearActiveHost",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#clearActiveHost",
    "access": "public",
    "description": "Clear the active host",
    "lineNumber": 208,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "clearActiveHost"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "loadTestURL",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#loadTestURL",
    "access": "public",
    "description": "Load the content of the test URL",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "loadTestURL"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "testURLChange",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#testURLChange",
    "access": "public",
    "description": "Test URL state Change",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "testURLChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "testURL",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "getHosts",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#getHosts",
    "access": "public",
    "description": "Get hosts",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getHosts"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "setActiveHost",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#setActiveHost",
    "access": "public",
    "description": "Set the active host",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "setActiveHost"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "updateActiveHost",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#updateActiveHost",
    "access": "public",
    "description": "Update the active host",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "updateActiveHost"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "host",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "saveHost",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#saveHost",
    "access": "public",
    "description": "Save the active host",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "saveHost"
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelStore#render",
    "access": "public",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "variable",
    "name": "AdminPanelContext",
    "memberof": "client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "client/components/admin/AdminPanelStore.js~AdminPanelContext",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/admin/AdminPanelStore.js",
    "importStyle": "{AdminPanelContext}",
    "description": "Admin Panel store context",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Context"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 152,
    "kind": "file",
    "name": "client/components/admin/MultiListInput.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Component class\n * @class MultiListInput\n * @extends Component\n *\n * @reactProps {Object} activeHost\n * @reactProps {String} addButton\n * @reactProps {String} title\n * @reactProps {String} emptyText\n * @reactProps {String} propname\n * @reactProps {String} propnameDel\n * @reactProps {Function} update\n * @reactProps {String} newText\n * @reactProps {String} delButton\n * @reactProps {String} placeholder\n * @reactProps {Function} validate\n */\nclass MultiListInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempInput: '',\n    };\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  /**\n   * Update state when input onChange.\n   *\n   * @param  {Object} e - Event object.\n   */\n  inputChange(e) {\n    this.setState({ tempInput: e.target.value });\n  }\n\n  render() {\n    const {\n      activeHost,\n      title,\n      addButton,\n      emptyText,\n      propname,\n      propnameDel,\n      update,\n      newText,\n      delButton,\n      placeholder,\n      validate,\n    } = this.props;\n\n    if (!propname\n      || !activeHost\n      || !title\n      || !emptyText\n      || !addButton\n      || !newText\n      || !placeholder)\n      throw new Error('Error: MultiListInput not configured');\n\n    return (<React.Fragment>\n      <strong>{title}</strong><br />\n      <ul>\n        {activeHost[propname].length === 0 ? <i>{emptyText}</i> : activeHost[propname]\n          .map((val, i) => <li key={i}>{val}<button onClick={() => {\n            if (propnameDel)\n              activeHost[propnameDel].push(activeHost[propname][i]);\n            activeHost[propname].splice(i, 1);\n            if (update)\n              update({ ...activeHost });\n          }}>{delButton}</button></li>)}\n      </ul>\n      {newText}: <input\n        placeholder={placeholder}\n        value={this.state.tempInput}\n        onChange={this.inputChange} />\n      <button onClick={() => {\n        if (validate && !validate(this.state.tempInput))\n          return;\n        activeHost[propname].push(this.state.tempInput);\n        this.setState({ ...this.state, tempInput: '' });\n        if (update)\n          update({ ...activeHost });\n      }}>{addButton}</button><br />\n    </React.Fragment>);\n  }\n}\n\nMultiListInput.propTypes = {\n  activeHost: PropTypes.any,\n  addButton: PropTypes.any,\n  title: PropTypes.any,\n  emptyText: PropTypes.any,\n  propname: PropTypes.any,\n  propnameDel: PropTypes.any,\n  update: PropTypes.any,\n  newText: PropTypes.any,\n  delButton: PropTypes.any,\n  placeholder: PropTypes.any,\n  validate: PropTypes.any,\n};\n\nexport default MultiListInput;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/MultiListInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "MultiListInput",
    "memberof": "client/components/admin/MultiListInput.js",
    "static": true,
    "longname": "client/components/admin/MultiListInput.js~MultiListInput",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/admin/MultiListInput.js",
    "importStyle": "MultiListInput",
    "description": "Component class",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MultiListInput"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} activeHost"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} addButton"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} title"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} emptyText"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} propname"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} propnameDel"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} update"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} newText"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} delButton"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} placeholder"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} validate"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 154,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/MultiListInput.js~MultiListInput#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/admin/MultiListInput.js~MultiListInput",
    "static": false,
    "longname": "client/components/admin/MultiListInput.js~MultiListInput#state",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"tempInput\": *}"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "inputChange",
    "memberof": "client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/MultiListInput.js~MultiListInput#inputChange",
    "access": "public",
    "description": "Update state when input onChange.",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/MultiListInput.js~MultiListInput#render",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "client/components/admin/Scraper.js",
    "content": "import React, { Component } from 'react';\nimport { AdminPanelContext } from './AdminPanelStore';\n\n/**\n * Month array\n * @type {Array<String>}\n */\nconst months = ['January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'Desember'];\n\n/**\n * @class Scraper\n * @extends Component\n */\nclass Scraper extends Component {\n  render() {\n    const { testPage, activeHost } = this.context;\n    if (testPage === 1)\n      return 'Loading page...';\n    if (typeof testPage === 'string')\n      return testPage;\n    if (testPage) {\n      let headline = 'Error';\n      let body = 'Error';\n      let date = 'Error';\n      try {\n        let text = '';\n        if (activeHost.headlines.length > 0) {\n          for (let i = 0; i < activeHost.headlines.length; i++) {\n            text = testPage(activeHost.headlines[i]).text();\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            headline = text;\n        }\n        text = '';\n        if (activeHost.body.length) {\n          for (let i = 0; i < activeHost.body.length; i++) {\n            let sub = testPage(activeHost.body[i]);\n            activeHost.exclude.forEach((sel) => {\n              sub = sub.not(sel);\n            });\n            text = sub.text();\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            body = text;\n        }\n        text = '';\n        if (activeHost.date.fn !== '') {\n          for (let i = 0; i < activeHost.date.sel.length; i++) {\n            if (activeHost.date.sel[i].attr === '')\n              text = testPage(activeHost.date.sel[i].sel).text();\n            else\n              text = testPage(activeHost.date.sel[i].sel).attr(activeHost.date.sel[i].attr);\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            date = eval(activeHost.date.fn)(text, months);\n        }\n      }\n      catch (e) {\n        console.log(e);\n        if (!date)\n          date = 'Error';\n      }\n      if (headline !== 'Error' || date !== 'Error' || body !== 'Error')\n        return <React.Fragment>\n          Headline: {headline}<br/>\n          Date: {date ? date.toLocaleString() : date}<br />\n          Main text:<br /><div className='scroll admin-scraper-body'>{body}</div>\n        </React.Fragment>;\n    }\n    if (testPage && this.context.activeIndex === -1)\n      return 'Page loaded, select a host or start creating a new definition';\n    return '';\n  }\n}\n\nScraper.contextType = AdminPanelContext;\n\nexport default Scraper;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/Scraper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "months",
    "memberof": "client/components/admin/Scraper.js",
    "static": true,
    "longname": "client/components/admin/Scraper.js~months",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/admin/Scraper.js",
    "importStyle": null,
    "description": "Month array",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Array<String>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "class",
    "name": "Scraper",
    "memberof": "client/components/admin/Scraper.js",
    "static": true,
    "longname": "client/components/admin/Scraper.js~Scraper",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/admin/Scraper.js",
    "importStyle": "Scraper",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Scraper"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/admin/Scraper.js~Scraper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/admin/Scraper.js~Scraper#render",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "client/components/dashboard/Dashboard.js",
    "content": "import React, { Component } from 'react';\nimport Card from '../Card';\nimport '../style/Dashboard.css';\nimport NewSearch from './NewSearch';\nimport WordCloud from './WordCloud';\nimport Header from '../Header';\n\n/**\n * @class Dashboard\n * @extends Component\n */\nclass Dashboard extends Component {\n  render() {\n    return [\n      <Header key={1} class='dashboard_header' name = 'Dashboard'/>,\n      <div key={2} className='wrapper'>\n        <Card class='new_search' cName='new_search'>\n            <NewSearch />\n        </Card>\n        <Card class='wordcloud' cName='wordcloud'>\n            <WordCloud />\n        </Card>\n      </div>,\n    ];\n  }\n}\n\nexport default Dashboard;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/Dashboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "Dashboard",
    "memberof": "client/components/dashboard/Dashboard.js",
    "static": true,
    "longname": "client/components/dashboard/Dashboard.js~Dashboard",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/dashboard/Dashboard.js",
    "importStyle": "Dashboard",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Dashboard"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/dashboard/Dashboard.js~Dashboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/Dashboard.js~Dashboard#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "file",
    "name": "client/components/dashboard/NewSearch.js",
    "content": "import React, { Component } from 'react';\nimport '../style/NewSearch.css';\nimport { FaTimes } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport Alert from 'react-s-alert';\nimport DatePickerInterval from '../DatePickerInterval';\nimport Checkbox from '../Checkbox';\nimport SearchButton from '../Button';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport '../style/react_dates_overrides.css';\nimport { SearchContext } from './SearchStore';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n/**\n * Emotion checkbox\n * @type {Array<Object>}\n */\nconst checkboxesEmotions = [\n  {\n    name: 'analysis_filter_emotions',\n    key: 'joy',\n    value: 'Joy',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'anger',\n    value: 'Anger',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'disgust',\n    value: 'Disgust',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'sadness',\n    value: 'Sadness',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'fear',\n    value: 'Fear',\n  },\n];\n\n/**\n * @class\n * @extends Component\n *\n * @reactProps {Object} history\n */\nclass NewSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkedItemsNews: [],\n      checkedItemsEmotion: [],\n      show: false,\n      news_search: '',\n      search: '',\n      neutralThreshold: '0.2',\n    };\n    this.handleChangeCheckboxNews = this.handleChangeCheckboxNews.bind(this);\n    this.handleChangeCheckboxEmotion = this.handleChangeCheckboxEmotion.bind(this);\n    this.handleFilterClick = this.handleFilterClick.bind(this);\n    this.dateChange = this.dateChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  componentWillMount() {\n    this.context.getSources();\n  }\n\n  /**\n   * Update search text\n   *\n   * @function updateSearch\n   * @param  {Object}     event\n   */\n  updateSearch(event) {\n    this.setState({ news_search: event.target.value });\n  }\n\n  /**\n   * Advanced filter\n   *\n   * @function handleFilterClick\n   */\n  handleFilterClick() {\n    const { buttonclicked } = this.state;\n    this.setState({ buttonclicked: !buttonclicked });\n  }\n\n  /**\n   * Checkbox click\n   *\n   * @function handleChecked\n   */\n  handleChecked() {\n    this.setState({\n      show: !this.state.show,\n      checkedItemsEmotion: [],\n    });\n  }\n\n  /**\n   * News checkbox click\n   *\n   * @function handleChangeCheckboxNews\n   * @param  {Object}                 e\n   */\n  handleChangeCheckboxNews(e) {\n    const item = e.target.value;\n    const { checkedItemsNews } = this.state;\n    if (checkedItemsNews.indexOf(item) > -1)\n      checkedItemsNews.splice(checkedItemsNews.indexOf(item), 1);\n    else\n      checkedItemsNews.push(item);\n    this.setState({\n      ...this.state,\n      checkedItemsNews,\n    });\n  }\n\n  /**\n   * Emotion checkbox click handle\n   *\n   * @function handleChangeCheckboxEmotion\n   * @param  {Object}                    e\n   */\n  handleChangeCheckboxEmotion(e) {\n    const item = e.target.value;\n    const { checkedItemsEmotion } = this.state;\n    if (checkedItemsEmotion.indexOf(item) > -1)\n      checkedItemsEmotion.splice(checkedItemsEmotion.indexOf(item), 1);\n    else\n      checkedItemsEmotion.push(item);\n    this.setState({\n      ...this.state,\n      checkedItemsEmotion,\n    });\n  }\n\n  /**\n   * Date change handler\n   *\n   * @function dateChange\n   * @param  {Date}   startDate\n   * @param  {Date}   endDate\n   */\n  dateChange(startDate, endDate) {\n    this.setState({\n      ...this.state,\n      startDate,\n      endDate,\n    });\n  }\n\n  /**\n   * Performes the search\n   *\n   * @function handleSearch\n   * @param  {string}     searchdata\n   */\n  handleSearch(searchdata) {\n    if (!searchdata.search || searchdata.search === '' || searchdata.search.split(' ').filter(elem => elem !== '').length === 0)\n      return Alert.error('The provided search query is empty', {\n        position: 'top',\n        effect: 'stackslide',\n      });\n    searchdata.neutralThreshold = Number(searchdata.neutralThreshold);\n    this.context.getSearch(searchdata);\n    this.props.history.push('/result');\n  }\n\n  /**\n   * Handle search update\n   *\n   * @function handleInput\n   * @param  {Object}    event\n   */\n  handleInput(event) {\n    this.setState({\n      ...this.state,\n      search: event.target.value,\n    });\n  }\n\n  render() {\n    const filterNews = this.context.sources.filter(\n      item => item.value.toLowerCase().indexOf(this.state.news_search.toLowerCase()) !== -1,\n    );\n    const { buttonclicked } = this.state;\n    const searchdata = this.state;\n    return (\n      <div className='content' >\n        <div className='container_top'>\n          <div className='title'>New Search</div>\n        </div>\n        <hr style = {{ margin: '0px', opacity: '0.2' }} />\n        {!buttonclicked\n          ? (<div className='container_main'>\n          <div className='flexContainer input'>\n            <input className='searchfield' type='text' placeholder='  Search...' onChange={this.handleInput} onKeyDown={(e) => {\n              if (e.keyCode === 13)\n                this.handleSearch(searchdata);\n            }}></input>\n          </div>\n          <div className='flexContainer buttons'>\n            <button className='add_filter' onClick={this.handleFilterClick}>Add filters</button>\n            <SearchButton onClick={() => this.handleSearch(searchdata)} title='Search'/>\n          </div>\n        </div>)\n          : (\n            <div className='container_filter'>\n              <div className = 'flexContainer input_filter'>\n                <input className ='searchfield_filter' type='text' placeholder='  Search...' onChange={this.handleInput} onKeyDown={(e) => {\n                  if (e.keyCode === 13)\n                    this.handleSearch(searchdata);\n                }}></input>\n                <SearchButton onClick={() => this.handleSearch(searchdata)} title='Search' />\n              </div>\n                <hr style = {{ margin: '0px', opacity: '0.2' }} />\n                <div className = 'exit_filter' onClick={this.handleFilterClick}> <FaTimes /> </div>\n              <div id='filter' className='flexContainer apply_filter'>\n                <div className='filter_analysis'>\n                  <div className='title_Analysis'> Analysis </div>\n                  <form>\n                    <div className='analysis-check'>\n                      <label>\n                        <input\n                          type='radio'\n                          name='analysis_filter'\n                          value='sentiment'\n                          className='analysis-check-input'\n                          checked={this.state.show === false}\n                          onChange={() => this.handleChecked()}\n                        />\n                         Sentiment\n                      </label>\n                    </div>\n                    {!this.state.show ? <div>Neutral sentiment threshold: {`\\xB1 ${this.state.neutralThreshold}`}<br />\n                      <input\n                        type='range'\n                        min={0}\n                        max={20}\n                        value={this.state.neutralThreshold * 20}\n                        onChange={(e) => {\n                          this.setState({\n                            ...this.state,\n                            neutralThreshold: e.target.value / 20,\n                          });\n                        }} />\n                      </div> : null}\n                    <div className='analysis-check'>\n                    <div className='checkbox'>\n                      <label>\n                        <input\n                          type='radio'\n                          name='analysis_filter'\n                          value='emotion'\n                          className='analysis-check-input'\n                          checked={this.state.show === true}\n                          onChange={() => this.handleChecked()}\n                        />\n                         Emotion\n                      </label>\n                      <br />\n                      <div className='analysis-check-input-checkbox'>\n                        {\n                        this.state.show\n                          ? checkboxesEmotions.map(item => (\n                            <div key={item.key}>\n                              <Checkbox\n                                id={item.key}\n                                value={item.value}\n                                checked={this.state.checkedItemsEmotion.indexOf(item.key) > -1}\n                                onChange={e => this.handleChangeCheckboxEmotion(e)}\n                                className='checkbox_emotion'\n                                name='emotion'\n                              />\n                            </div>\n                          ))\n                          : null\n                        }\n                      </div>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n                <div className='filter_source'>\n                  <div className='title_Analysis'> News Source </div>\n                    <div>\n                      <input type='text'\n                        className='searchNews'\n                        value={this.state.news_search}\n                        onChange={this.updateSearch.bind(this)}\n                        placeholder=' News Source...'\n                      />\n                      {filterNews.map(item => <Checkbox\n                        key={item.key}\n                        id={item.key}\n                        value={item.value}\n                        checked={this.state.checkedItemsNews.indexOf(item.key) > -1}\n                        onChange={e => this.handleChangeCheckboxNews(e)}\n                      />)}\n                    </div>\n                  </div>\n                <div className='filter_time'>\n                  <div className='title_Analysis'> Date Interval </div>\n                  <DatePickerInterval change={dates => this.setState({\n                    ...this.state,\n                    ...dates,\n                  })} style={'../style/DatePickerInterval.css'} />\n                    <p>Choose from and to date</p>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      </div>);\n  }\n}\n\nNewSearch.propTypes = {\n  checkboxesNews: PropTypes.any,\n  searchdata: PropTypes.any,\n  history: PropTypes.any,\n};\n\nNewSearch.contextType = SearchContext;\n\nexport default withRouter(NewSearch);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/NewSearch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "checkboxesEmotions",
    "memberof": "client/components/dashboard/NewSearch.js",
    "static": true,
    "longname": "client/components/dashboard/NewSearch.js~checkboxesEmotions",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/dashboard/NewSearch.js",
    "importStyle": null,
    "description": "Emotion checkbox",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "class",
    "name": "NewSearch",
    "memberof": "client/components/dashboard/NewSearch.js",
    "static": true,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/dashboard/NewSearch.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} history"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 169,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#state",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "{\"checkedItemsNews\": *, \"checkedItemsEmotion\": *, \"show\": *, \"news_search\": *, \"search\": *, \"neutralThreshold\": string}"
      ]
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "updateSearch",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#updateSearch",
    "access": "public",
    "description": "Update search text",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "updateSearch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "handleFilterClick",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleFilterClick",
    "access": "public",
    "description": "Advanced filter",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleFilterClick"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "handleChecked",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleChecked",
    "access": "public",
    "description": "Checkbox click",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChecked"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "handleChangeCheckboxNews",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleChangeCheckboxNews",
    "access": "public",
    "description": "News checkbox click",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChangeCheckboxNews"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "handleChangeCheckboxEmotion",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleChangeCheckboxEmotion",
    "access": "public",
    "description": "Emotion checkbox click handle",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleChangeCheckboxEmotion"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "dateChange",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#dateChange",
    "access": "public",
    "description": "Date change handler",
    "lineNumber": 154,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "dateChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "startDate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "endDate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "handleSearch",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleSearch",
    "access": "public",
    "description": "Performes the search",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleSearch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchdata",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "handleInput",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#handleInput",
    "access": "public",
    "description": "Handle search update",
    "lineNumber": 185,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleInput"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/NewSearch.js~NewSearch#render",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "file",
    "name": "client/components/dashboard/SearchStore.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * SearchStore context\n * @type {Context}\n */\nconst SearchContext = React.createContext();\n\n/**\n * @class SearchStore\n * @extends React\n *\n * @reactProps {Array} children\n */\nclass SearchStore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      searchType: '',\n      sources: [],\n    };\n    this.getSearch = this.getSearch.bind(this);\n    this.getWords = this.getWords.bind(this);\n    this.getSources = this.getSources.bind(this);\n    this.getEmotionalTone = this.getEmotionalTone.bind(this);\n    this.getEmotionalToneSentiment = this.getEmotionalToneSentiment.bind(this);\n    this.computeSearch = this.computeSearch.bind(this);\n  }\n\n  /**\n   * Search the index\n   *\n   * @function getSearch\n   * @param  {Object}  opts\n   */\n  getSearch(opts) {\n    if (opts.startDate && opts.startDate.getTime)\n      opts.startDate = opts.startDate.getTime();\n    if (opts.endDate && opts.endDate.getTime)\n      opts.endDate = opts.endDate.getTime();\n    localStorage.setItem('prev-search', JSON.stringify(opts));\n    if (!opts.startDate)\n      opts.startDate = 0;\n    if (!opts.endDate)\n      opts.endDate = new Date().getTime();\n    this.setState({\n      ...this.state, search: undefined, searchOpts: opts, searchType: opts.show ? 'emotion' : 'sentiment',\n    });\n    const sources = opts.checkedItemsNews.join(',');\n    fetch(`/api/search?q=${opts.search}${sources.length > 0 ? `&sources=${sources}` : ''}${opts.startDate ? `&intervalStart=${opts.startDate}` : ''}${opts.endDate ? `&intervalEnd=${opts.endDate}` : ''}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(response => response.json()).then((data) => {\n      this.computeSearch(data, opts);\n    }).catch(console.error);\n  }\n\n  /**\n   * Compute the search data fetched\n   *\n   * @function computeSearch\n   * @param  {Object}      data\n   * @param  {Object}      opts\n   */\n  computeSearch(data, opts) {\n    const search = JSON.parse(JSON.stringify(data));\n    search.docs = search.docs\n      .filter(doc => (opts.startDate ? doc.date >= opts.startDate : true)\n          && (opts.endDate ? doc.date <= opts.endDate : true));\n    if (search.docs.length === 0) {\n      this.setState({\n        ...this.state,\n        search: data,\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n    else if (!opts.show) {\n      const colors = ['#5EA3DB', '#FF5C54', '#AFBE8F'];\n      const average = search.docs.reduce((acc, val) => {\n        let sentiment = val.analysis.sentiment;\n        if (!sentiment) {\n          sentiment = {\n            score: 0,\n            label: 'neutral',\n          };\n        }\n        let label = 'neutral';\n        if (sentiment.score > opts.neutralThreshold)\n          label = 'positive';\n        else if (sentiment.score < -opts.neutralThreshold)\n          label = 'negative';\n        acc.sentiment[label]++;\n        return acc;\n      }, {\n        sentiment: { positive: 0, negative: 0, neutral: 0 },\n      });\n\n      Object.keys(average).forEach((key) => {\n        if (typeof average[key] === 'number')\n          average[key] /= search.docs.length;\n        else\n          Object.keys(average[key]).forEach((key2) => {\n            average[key][key2] /= search.docs.length;\n          });\n      });\n      this.setState({\n        ...this.state,\n        graphData: Object.keys(average.sentiment ? average.sentiment : {}).map(\n          (key, i) => (\n            {\n              title: key,\n              value: Math.floor(average.sentiment[key] * 100),\n              color: colors[i],\n            }),\n        ),\n        search: data,\n        emotionalTone: this.getEmotionalToneSentiment(search, opts),\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n    else if (opts.show) {\n      const colors = ['#D3C0CD', '#9FAF90', '#3A405A', '#3D70B2', '#E26D5A'];\n      const average = search.docs.reduce((acc, val) => {\n        let emotion = val.analysis.emotion;\n        if (!emotion) {\n          emotion = {\n            anger: 0,\n            joy: 0,\n            disgust: 0,\n            fear: 0,\n            sadness: 0,\n          };\n        }\n        Object.keys(emotion).forEach((k) => {\n          acc[k] += emotion[k];\n        });\n        acc.sentiment[val.analysis.sentiment.label]++;\n        return acc;\n      }, {\n        sentiment: { positive: 0, negative: 0, neutral: 0 },\n        joy: 0,\n        disgust: 0,\n        fear: 0,\n        sadness: 0,\n        anger: 0,\n      });\n\n      Object.keys(average).forEach((key) => {\n        if (typeof average[key] === 'number')\n          average[key] /= search.docs.length;\n        else\n          Object.keys(average[key]).forEach((key2) => {\n            average[key][key2] /= search.docs.length;\n          });\n      });\n      this.setState({\n        ...this.state,\n        graphData: Object.keys(average).filter(e => e !== 'sentiment').map(\n          (key, i) => ({ title: key, value: Math.floor(average[key] * 100), color: colors[i] }),\n        ),\n        search: data,\n        emotionalTone: this.getEmotionalTone(search),\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n  }\n\n  /**\n   * Fetch the sources indexed\n   *\n   * @function getSources\n   */\n  getSources() {\n    fetch('/api/search/sources').then(res => res.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        sources: data,\n      });\n    });\n  }\n\n  /**\n   * Update the words for wordcloud\n   *\n   * @function getWords\n   * @param  {number} count\n   */\n  getWords(count) {\n    if (!count)\n      count = 30;\n    fetch(`/api/wordcloud?length=${count}`).then(res => res.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        words: data.map(elem => ({\n          value: elem.key,\n          count: elem.value,\n        })),\n      });\n    });\n  }\n\n  /**\n   * Get emotional tone for graph\n   *\n   * @function getEmotionalTone\n   * @param  {Object}         search\n   * @returns {Array<Object>}\n   */\n  getEmotionalTone(search) {\n    const sortArr = search.docs.sort(\n      (a, b) => a.date - b.date,\n    ).filter(a => a.date > 0).map((element) => {\n      const date = new Date(element.date);\n      date.setHours(12);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      element.date = date.getTime();\n      return element;\n    });\n    const days = {};\n    sortArr.forEach((element) => {\n      if (days[element.date])\n        days[element.date].push(element);\n      else\n        days[element.date] = [element];\n    });\n    const ret = [];\n    Object.keys(days).forEach((key, i) => {\n      const emotions = days[key].reduce((acc, val) => {\n        const emotion = val.analysis.emotion;\n        if (!emotion)\n          return acc;\n        Object.keys(acc).forEach((k) => {\n          acc[k].perc += emotion[k];\n        });\n        return acc;\n      }, {\n        anger: { perc: 0 },\n        joy: { perc: 0 },\n        disgust: { perc: 0 },\n        fear: { perc: 0 },\n        sadness: { perc: 0 },\n      });\n      Object.keys(emotions).forEach((k) => {\n        emotions[k].perc /= days[key].length;\n        emotions[k].perc *= 1000;\n        emotions[k].perc = Math.round(emotions[k].perc);\n        emotions[k].perc /= 10;\n      });\n      ret.push({\n        id: i,\n        date: new Date(Number(key)).toLocaleDateString(),\n        emotions,\n        time: new Date(Number(key)).getTime(),\n      });\n    });\n    return ret;\n  }\n\n  /**\n   * Get sentiment tone for graph\n   *\n   * @function getEmotionalToneSentiment\n   * @param  {Object}                  search\n   * @param  {Object}                  opts\n   * @returns {Array<Object>}\n   */\n  getEmotionalToneSentiment(search, opts) {\n    const sortArr = search.docs.sort(\n      (a, b) => a.date - b.date,\n    ).filter(a => a.date > 0).map((element) => {\n      const date = new Date(element.date);\n      date.setHours(12);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      element.date = date.getTime();\n      return element;\n    });\n    const days = {};\n    sortArr.forEach((element) => {\n      if (days[element.date])\n        days[element.date].push(element);\n      else\n        days[element.date] = [element];\n    });\n    const ret = Object.keys(days).map((key) => {\n      const sentiments = days[key].reduce((acc, val) => {\n        const sentiment = val.analysis.sentiment;\n        if (!sentiment)\n          return acc;\n        if (sentiment.score > opts.neutralThreshold)\n          acc.positive.score++;\n        if (sentiment.score > -opts.neutralThreshold)\n          acc.neutral.score++;\n        else\n          acc.negative.score++;\n        return acc;\n      }, {\n        negative: { score: 0 },\n        neutral: { score: 0 },\n        positive: { score: 0 },\n      });\n      return { sentiments, key };\n    });\n    return ret.map((val, i) => ({\n      id: i,\n      date: new Date(Number(val.key)).toLocaleDateString(),\n      sentiments: val.sentiments,\n      time: new Date(Number(val.key)).getTime(),\n    }));\n  }\n\n  render() {\n    return (\n      <SearchContext.Provider value={{\n        ...this.state,\n        getSearch: this.getSearch,\n        getWords: this.getWords,\n        getSources: this.getSources,\n        getEmotionalTone: this.getEmotionalTone,\n        getEmotionalToneSentiment: this.getEmotionalToneSentiment,\n        computeSearch: this.computeSearch,\n      }}>\n      {this.props.children}\n      </SearchContext.Provider>\n    );\n  }\n}\n\nSearchStore.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default SearchStore;\n\nexport { SearchContext };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/SearchStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 188,
    "kind": "class",
    "name": "SearchStore",
    "memberof": "client/components/dashboard/SearchStore.js",
    "static": true,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/dashboard/SearchStore.js",
    "importStyle": "SearchStore",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "SearchStore"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Array} children"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 189,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#state",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"words\": *, \"searchType\": *, \"sources\": *}"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "getSearch",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#getSearch",
    "access": "public",
    "description": "Search the index",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getSearch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "computeSearch",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#computeSearch",
    "access": "public",
    "description": "Compute the search data fetched",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "computeSearch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "getSources",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#getSources",
    "access": "public",
    "description": "Fetch the sources indexed",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getSources"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "getWords",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#getWords",
    "access": "public",
    "description": "Update the words for wordcloud",
    "lineNumber": 195,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getWords"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "getEmotionalTone",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#getEmotionalTone",
    "access": "public",
    "description": "Get emotional tone for graph",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getEmotionalTone"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "getEmotionalToneSentiment",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#getEmotionalToneSentiment",
    "access": "public",
    "description": "Get sentiment tone for graph",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "getEmotionalToneSentiment"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "search",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 203,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/SearchStore.js~SearchStore#render",
    "access": "public",
    "description": null,
    "lineNumber": 322,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "variable",
    "name": "SearchContext",
    "memberof": "client/components/dashboard/SearchStore.js",
    "static": true,
    "longname": "client/components/dashboard/SearchStore.js~SearchContext",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/dashboard/SearchStore.js",
    "importStyle": "{SearchContext}",
    "description": "SearchStore context",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "Context"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "file",
    "name": "client/components/dashboard/WordCloud.js",
    "content": "import React, { Component } from 'react';\nimport '../style/WordCloud.css';\nimport { TagCloud } from 'react-tagcloud';\nimport { withRouter } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { SearchContext } from './SearchStore';\n\n/**\n * @class WordCloud\n * @extends Component\n *\n * @reactProps {Object} history\n */\nclass WordCloud extends Component {\n  constructor(props) {\n    super(props);\n    this.performSearchOnClick = this.performSearchOnClick.bind(this);\n  }\n\n  componentWillMount() {\n    let count = 30;\n    if (window.screen.width >= 550)\n      count = 50;\n    if (window.screen.width >= 2000)\n      count = 70;\n    this.context.getWords(count);\n  }\n\n  /**\n   * Search on clicked word\n   *\n   * @function performSearchOnClick\n   * @param  {string}             searchword\n   */\n  performSearchOnClick(searchword) {\n    const opts = {\n      checkedItemsNews: [],\n      checkedItemsEmotion: [],\n      show: false,\n      startDate: 0,\n      endDate: new Date().getTime(),\n      news_search: '',\n      search: searchword,\n      neutralThreshold: 0.2,\n    };\n    this.context.getSearch(opts);\n    this.props.history.push('/result');\n  }\n\n  render() {\n    const colorOpinions = {\n      luminosity: 'light',\n      hue: 'blue',\n    };\n    return (\n      <SearchContext.Consumer>\n      {({ words }) => (\n        <TagCloud\n          minSize={18}\n          maxSize={45}\n          tags={words}\n          className='tag-cloud clickable'\n          colorOptions= {colorOpinions}\n          onClick={tag => this.performSearchOnClick(tag.value)}\n        />)\n      }\n      </SearchContext.Consumer>\n    );\n  }\n}\n\nWordCloud.propTypes = {\n  history: PropTypes.any,\n};\n\nWordCloud.contextType = SearchContext;\n\n\nexport default withRouter(WordCloud);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/WordCloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 206,
    "kind": "class",
    "name": "WordCloud",
    "memberof": "client/components/dashboard/WordCloud.js",
    "static": true,
    "longname": "client/components/dashboard/WordCloud.js~WordCloud",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/dashboard/WordCloud.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WordCloud"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} history"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ],
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/WordCloud.js~WordCloud#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/WordCloud.js~WordCloud#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "performSearchOnClick",
    "memberof": "client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/WordCloud.js~WordCloud#performSearchOnClick",
    "access": "public",
    "description": "Search on clicked word",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "performSearchOnClick"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "searchword",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/dashboard/WordCloud.js~WordCloud#render",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "file",
    "name": "client/components/result/NewsArticle.js",
    "content": "import React, { Component } from 'react';\nimport '../style/NewsArticle.css';\nimport Proptypes from 'prop-types';\nimport ProgressBar from './graph/ProgressbarGraph';\n\n/**\n * @class NewsArticle\n * @extends Component\n *\n * @reactProps {String} date\n * @reactProps {String} title\n * @reactProps {String} newssource\n * @reactProps {String} domFeeling\n * @reactProps {Object} emotions\n * @reactProps {Object} feelings\n * @reactProps {Number} persProgress\n * @reactProps {Function} onClick\n */\nclass NewsArticle extends Component {\n  render() {\n    const {\n      title, newssource, domFeeling, date, feelings, onClick,\n    } = this.props;\n\n    return (\n      <div className='newssource'>\n        <div className='newsarticle_date'>{ date }</div>\n        <div className='newsarticle_title'>{ title }</div>\n        <div className='newsarticle_newssource'><span>News Source: </span>{ newssource }</div>\n        <div className='newsarticle_highest_feeling'>Most prominent feeling:  <span className='newsarticle_highest_feeling_text'>{ domFeeling }</span></div>\n        <br />\n        <div className='newsarticle_emotions'>\n          <div className='row'>\n          Joy: <br /><ProgressBar\n            perc={ feelings.joy * 100 ? feelings.joy * 100 : 0 }\n            color={ feelings.joy * 100 ? 'D3C0CD' : 0 }\n          />\n          Anger: <br /><ProgressBar\n            perc={ feelings.anger * 100 ? feelings.anger * 100 : 0 }\n            color={ feelings.anger * 100 ? 'E26D5A' : 0 }\n          />\n          Disgust: <br /><ProgressBar\n            perc={ feelings.disgust * 100 ? feelings.disgust * 100 : 0 }\n            color={ feelings.disgust * 100 ? '9FAF90' : 0 }\n          />\n          Sad: <br /><ProgressBar\n            perc={ feelings.sadness * 100 ? feelings.sadness * 100 : 0 }\n            color={ feelings.sadness * 100 ? '3D70B2' : 0 }\n          />\n          Fear: <br /><ProgressBar\n            perc={ feelings.fear * 100 ? feelings.fear * 100 : 0 }\n            color={ feelings.fear * 100 ? '3A405A' : 0 }\n          />\n          </div>\n          <br />\n        </div>\n        <button onClick = { onClick } className='newsarticle_button to_article'>To Article</button>\n        <br />\n        <hr />\n      </div>\n    );\n  }\n}\n\nNewsArticle.propTypes = {\n  date: Proptypes.any,\n  title: Proptypes.any,\n  newssource: Proptypes.any,\n  domFeeling: Proptypes.any,\n  emotions: Proptypes.any,\n  feelings: Proptypes.any,\n  persProgress: Proptypes.any,\n  onClick: Proptypes.any,\n};\n\nexport default NewsArticle;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NewsArticle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 213,
    "kind": "class",
    "name": "NewsArticle",
    "memberof": "client/components/result/NewsArticle.js",
    "static": true,
    "longname": "client/components/result/NewsArticle.js~NewsArticle",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/NewsArticle.js",
    "importStyle": "NewsArticle",
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NewsArticle"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} date"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} title"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} newssource"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} domFeeling"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} emotions"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} feelings"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} persProgress"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onClick"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/NewsArticle.js~NewsArticle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/NewsArticle.js~NewsArticle#render",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "file",
    "name": "client/components/result/NewsArticleSentiment.js",
    "content": "import React, { Component } from 'react';\nimport Proptypes from 'prop-types';\nimport ProgressBar from './graph/ProgressbarGraph';\nimport '../style/NewsArticleSentiment.css';\n\n/**\n * @class NewsArticle\n * @extends Component\n *\n * @reactProps {String} date\n * @reactProps {String} title\n * @reactProps {String} newssource\n * @reactProps {String} domSentiment\n * @reactProps {Object} sentiments\n * @reactProps {Number} persProgress\n * @reactProps {Function} onClick\n */\nclass NewsArticle extends Component {\n  render() {\n    const {\n      title, newssource, domSentiment, date, sentiments, onClick,\n    } = this.props;\n\n    return (\n      <div className='newssource'>\n        <div className='newsarticle_date'>{ date }</div>\n        <div className='newsarticle_title'>{ title }</div>\n        <div className='newsarticle_newssource'><span>News Source: </span>{ newssource }</div>\n        <div className='newsarticle_highest_sentiment'>Most prominent sentiment:  <span className='newsarticle_highest_sentiment_text'>{ domSentiment }</span></div>\n        <br />\n        <div className='newsarticle_sentiment'>\n          <div className='row'>\n          Negative: <br /><ProgressBar\n            perc={ sentiments.label === 'negative' ? -sentiments.score * 100 : 0 }\n            color={ sentiments.label ? 'FF5C54' : 0 }\n          />\n          Neutral: <br /><ProgressBar\n            perc={ sentiments.label === 'neutral' ? 100 : 0 }\n            color={ sentiments.label ? 'AFBE8F' : 0 }\n          />\n          Positive: <br /><ProgressBar\n            perc={ sentiments.label === 'positive' ? sentiments.score * 100 : 0 }\n            color={ sentiments.label ? '5EA3DB' : 0 }\n          />\n          </div>\n          <br />\n        </div>\n        <button onClick = { onClick } className='newsarticle_button to_article'>To Article</button>\n        <br />\n        <hr />\n      </div>\n    );\n  }\n}\n\nNewsArticle.propTypes = {\n  date: Proptypes.any,\n  title: Proptypes.any,\n  newssource: Proptypes.any,\n  domSentiment: Proptypes.any,\n  sentiments: Proptypes.any,\n  persProgress: Proptypes.any,\n  onClick: Proptypes.any,\n};\n\nexport default NewsArticle;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NewsArticleSentiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "NewsArticle",
    "memberof": "client/components/result/NewsArticleSentiment.js",
    "static": true,
    "longname": "client/components/result/NewsArticleSentiment.js~NewsArticle",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/NewsArticleSentiment.js",
    "importStyle": "NewsArticle",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NewsArticle"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} date"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} title"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} newssource"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} domSentiment"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Object} sentiments"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} persProgress"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} onClick"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/NewsArticleSentiment.js~NewsArticle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/NewsArticleSentiment.js~NewsArticle#render",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 218,
    "kind": "file",
    "name": "client/components/result/NoResult.js",
    "content": "import React, { Component } from 'react';\nimport Card from '../Card';\nimport { SearchContext } from '../dashboard/SearchStore';\nimport Header from '../Header';\n\n/**\n * @class NoResult\n * @extends Component\n */\nclass NoResult extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header class='result_header' name='Sentiment Analysis' />\n        <Card>\n          <p>Your search: {this.context.searchOpts.search} - did not match any documents</p>\n          <h3>Suggestions:</h3>\n          <ul>\n            <li>Make sure that all words are spelled correctly.</li>\n            <li>Try different keywords</li>\n            <li>Try more general keywords</li>\n            <li>Consult wordcloud for type of keywords searchable</li>\n          </ul>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n\nNoResult.contextType = SearchContext;\n\nexport default NoResult;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NoResult.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 219,
    "kind": "class",
    "name": "NoResult",
    "memberof": "client/components/result/NoResult.js",
    "static": true,
    "longname": "client/components/result/NoResult.js~NoResult",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/NoResult.js",
    "importStyle": "NoResult",
    "description": "",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "NoResult"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/NoResult.js~NoResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/NoResult.js~NoResult#render",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "client/components/result/Parameters.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/Parameters.css';\nimport Button from '../Button';\n\n/**\n * @class Parameters\n * @extends Component\n *\n * @reactProps {String} searchtext\n * @reactProps {String} sentiment\n * @reactProps {Number} timeinterval\n * @reactProps {Number} amount\n * @reactProps {Number} threshold\n * @reactProps {Boolean} emotion\n * @reactProps {Function} emotionClick\n */\nclass Paramteres extends Component {\n  render() {\n    const {\n      searchtext,\n    } = this.props;\n    const arr = ['sentiment', 'timeinterval', 'amount', 'threshold'];\n    return (\n      <div className='parameters'>\n        <div><span className='search_text'>You searched for:</span> { searchtext }</div>\n        <ul className='applied_filters'>\n          {arr.filter((e => this.props[e])).map(e => <li key={e}>{this.props[e]}</li>)}\n        </ul>\n        <Button\n          title={this.props.emotion ? 'View sentiment' : 'View emotion'}\n          onClick={this.props.emotionClick} />\n      </div>\n    );\n  }\n}\n\nParamteres.propTypes = {\n  searchtext: PropTypes.any,\n  sentiment: PropTypes.any,\n  timeinterval: PropTypes.any,\n  amount: PropTypes.any,\n  threshold: PropTypes.any,\n  emotion: PropTypes.any,\n  emotionClick: PropTypes.any,\n};\n\nexport default Paramteres;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/Parameters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "Paramteres",
    "memberof": "client/components/result/Parameters.js",
    "static": true,
    "longname": "client/components/result/Parameters.js~Paramteres",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/Parameters.js",
    "importStyle": "Paramteres",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Parameters"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} searchtext"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} sentiment"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} timeinterval"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} amount"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Number} threshold"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Boolean} emotion"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Function} emotionClick"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/Parameters.js~Paramteres",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Parameters.js~Paramteres#render",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "client/components/result/Result.js",
    "content": "import React, { Component } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport stt from 'search-text-tokenizer';\nimport Alert from 'react-s-alert';\nimport Card from '../Card';\nimport Header from '../Header';\nimport DatePickerInterval from '../DatePickerInterval';\nimport DonutChart from './graph/DonutChart';\nimport Parameteres from './Parameters';\nimport '../style/Result.css';\nimport NewsArticle from './NewsArticle';\nimport Dropdown from '../Dropdown';\nimport Checkbox from '../Checkbox';\nimport Button from '../Button';\nimport { SearchContext } from '../dashboard/SearchStore';\n\n/**\n * Class to name map\n *\n * @function classNameMap\n * @param  {string}     name\n * @returns {string|Array}\n */\nconst classNameMap = (name) => {\n  switch (name) {\n    case 'anger':\n      return 'anger';\n    case 'sadness':\n      return 'sadness';\n    case 'fear':\n      return 'fear';\n    case 'joy':\n      return 'joy';\n    case 'disgust':\n      return 'disgust';\n    default:\n      return [];\n  }\n};\n\n/**\n * Anger color\n * @type {String}\n */\nconst coloranger = '#E26D5A';\n\n/**\n * Fear color\n * @type {String}\n */\nconst colorfear = '#3A405A';\n\n/**\n * Joy color\n * @type {String}\n */\nconst colorjoy = '#D3C0CD';\n\n/**\n * Sad color\n * @type {String}\n */\nconst colorsad = '#3D70B2';\n\n/**\n * Disgust color\n * @type {String}\n */\nconst colordisgust = '#9FAF90';\n\n/**\n * @class Result\n * @extends Component\n */\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      averageArray: [],\n      checkedEmotion: [],\n      etSelection: false,\n    };\n    this.handleCheckedEmotion = this.handleCheckedEmotion.bind(this);\n  }\n\n  componentWillMount() {\n    if (!this.context.search && localStorage.getItem('prev-search'))\n      this.context.getSearch(localStorage.getItem('prev-search'));\n    this.setState({\n      ...this.state,\n      checkedEmotion: [...this.context.searchOpts.checkedItemsEmotion],\n    });\n  }\n\n  /**\n   * Redirect to URL\n   *\n   * @function makeRedirect\n   * @param  {string}     url\n   */\n  makeRedirect(url) {\n    if (typeof url !== 'undefined') {\n      window.open(url, '_blank');\n    }\n  }\n\n  /**\n   * Handle checked emotion checkbox\n   *\n   * @function handleCheckedEmotion\n   * @param  {Object}             emotion\n   */\n  handleCheckedEmotion(emotion) {\n    const item = emotion.target.value;\n    const isChecked = emotion.target.checked;\n    const cs = this.state.checkedEmotion;\n    if (isChecked && cs.indexOf(item) === -1)\n      cs.push(item);\n    else if (!isChecked && cs.indexOf(item) > -1)\n      cs.splice(cs.indexOf(item), 1);\n    this.setState({ ...this.state, checkedEmotion: cs });\n  }\n\n  /**\n   * Date change handler\n   *\n   * @function dateChange\n   * @param  {Object}   date\n   */\n  dateChange(date) {\n    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n    let startDate = !date || !date.startDate ? this.state.startDate : date.startDate;\n    let endDate = !date || !date.endDate ? this.state.endDate : date.endDate;\n    if (!date) {\n      startDate = new Date(0);\n      endDate = new Date();\n    }\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (!startDate.getTime)\n      startDate = new Date(startDate);\n    if (!endDate.getTime)\n      endDate = new Date(endDate);\n    startDate.setHours(0);\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    endDate.setHours(23);\n    endDate.setMinutes(59);\n    endDate.setSeconds(59);\n    startDate = startDate.getTime();\n    endDate = endDate.getTime();\n    if (date && date.startDate && this.context.search.docs[this.context.search.docs.length - 1]\n      .date - (24 * 60 * 60 * 1000) > startDate && this.state.startDate)\n      Alert.warning('Provided \"from\" date is outside current search results', { position: 'top' });\n    else if (date && date.endDate && this.context.search.docs[0]\n      .date + (24 * 60 * 60 * 1000) < endDate && this.state.endDate)\n      Alert.warning('Provided \"to\" date is outside current search results', { position: 'top' });\n    opts.startDate = startDate;\n    opts.endDate = endDate;\n    this.context.computeSearch(this.context.search, opts);\n  }\n\n  render() {\n    let { startDate, endDate } = this.state;\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (startDate.getTime)\n      startDate = startDate.getTime();\n    if (endDate.getTime)\n      endDate = endDate.getTime();\n    const emotionSearch = this.state.checkedEmotion.length === 0\n      ? this.context.search.docs : this.context.search.docs\n        .filter(item => item.analysis.emotion\n          && this.state.checkedEmotion.indexOf(Object.keys(item.analysis.emotion)\n            .sort((a, b) => Math.abs(item.analysis.emotion[b])\n              - Math.abs(item.analysis.emotion[a]))[0]) > -1);\n    const filterEmotion = ((startDate || endDate)\n      ? emotionSearch.filter(doc => (startDate ? doc.date >= startDate : true)\n        && (endDate ? doc.date <= endDate : true)) : emotionSearch)\n      .filter(item => item.analysis.emotion);\n    return (\n      <React.Fragment>\n        <Header class='result_header' name='Sentiment Analysis' />\n        <div className = 'result'>\n          <div className = 'result_filter'>\n              <div className= 'filter_bar'>\n                <div className='test'>\n                  <Dropdown className='clickable' titleList='Emotion' items={\n                    this.context.graphData.map((item, i) => <Checkbox\n                        key={i}\n                        id={item.title}\n                        value={item.title[0].toUpperCase() + item.title.slice(1)}\n                        checked={this.state.checkedEmotion.indexOf(item.title) > -1}\n                        onChange={emotion => this.handleCheckedEmotion(emotion)}\n                      />)\n                  } />\n                  <Dropdown className='clickable' titleList='Date Interval' items={<DatePickerInterval change={(date) => {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: date.startDate === null ? undefined : date.startDate,\n                      endDate: date.endDate === null ? undefined : date.endDate,\n                    });\n                    this.dateChange({\n                      startDate: date.startDate === null\n                        ? this.context.search.docs[this.context.search.docs.length - 1].date\n                        : date.startDate,\n                      endDate: date.endDate === null\n                        ? this.context.search.docs[0].date\n                        : date.endDate,\n                    });\n                  }} startDate={this.state.startDate ? new Date(this.state.startDate) : undefined}\n                  endDate={this.state.endDate ? new Date(this.state.endDate) : undefined} />} />\n                </div>\n                <div>\n                  <Button className='exportpdf' title='Print result' onClick={() => {\n                    window.print();\n                  }} />\n                </div>\n              </div>\n          </div>\n\n          <div className = 'result_parameters'>\n            <Card>\n              <div className='title_param'>Parameters</div>\n              <div className='param_card'>\n                <Parameteres\n                  searchtext={stt(this.context.searchOpts.search.replace(/[^a-zA-Z\\s-]/g, ''))\n                    .reduce((acc, val) => {\n                      if (acc !== '')\n                        acc += ', ';\n                      if (val.exclude)\n                        acc += `-${val.term}`;\n                      else if (val.phrase)\n                        acc += `\"${val.term}\"`;\n                      else\n                        acc += val.term;\n                      return acc;\n                    }, '')}\n                  sentiment={`Emotion: ${this.state.checkedEmotion.length === 0\n                    ? 'Joy, Anger, Disgust, Sadness, Fear'\n                    : `${this.state.checkedEmotion.slice(0, -1)\n                      .map(s => s[0].toUpperCase() + s.slice(1)).join(', ')}${this.state.checkedEmotion.slice(0, -1).length > 0\n                      ? ', '\n                      : ''}${this.state.checkedEmotion.slice(-1).map(s => s[0].toUpperCase() + s.slice(1))[0]}`}`}\n                  timeinterval={`Date Interval: ${new Date(this.state.startDate ? this.state.startDate : filterEmotion[filterEmotion.length - 1].date).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`}\n                  amount={`Amount: ${filterEmotion.length}`}\n                  emotion={this.context.searchOpts.show}\n                  emotionClick={() => {\n                    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                    opts.show = !opts.show;\n                    this.context.computeSearch(this.context.search, opts);\n                  }}\n                />\n              </div>\n            </Card>\n          </div>\n\n            {this.context.graphData.map((element, i) => {\n              const name = classNameMap(element.title);\n              return (<div key={i} align=\"center\" className = {`result_graphs_${name} clickable clickable-color`}>\n                <Card onClick={() => {\n                  if (this.state.checkedEmotion[0] === name\n                    && this.state.checkedEmotion.length === 1)\n                    return this.setState({ ...this.state, checkedEmotion: [] });\n                  this.setState({\n                    ...this.state,\n                    checkedEmotion: [name],\n                  });\n                }}>\n                  <div className='graphs' >\n                    <DonutChart chart={`${name}_chart`} label={`label_${name}`} name={element.title} data={[element]}/>\n                  </div>\n                </Card>\n              </div>);\n            })}\n\n          <div className = 'result_graph'>\n            <Card>\n            <div className='emotionalTone'>Emotional Tone</div>\n              <LineChart\n                width={350}\n                height={300}\n                data={this.context.emotionalTone}\n                margin={{\n                  top: 20,\n                }} onClick={(data) => {\n                  if (this.state.etSelection) {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: undefined,\n                      endDate: undefined,\n                    });\n                    this.dateChange();\n                  }\n                  else if (data\n                    && data.activePayload\n                    && data.activePayload[0]\n                    && data.activePayload[0].payload\n                    && data.activePayload[0].payload.time) {\n                    const sd = new Date(data.activePayload[0].payload.time);\n                    const ed = new Date(data.activePayload[0].payload.time);\n                    sd.setHours(0);\n                    sd.setMinutes(0);\n                    sd.setSeconds(0);\n                    ed.setHours(23);\n                    ed.setMinutes(59);\n                    ed.setSeconds(59);\n                    this.setState({\n                      ...this.state,\n                      etSelection: true,\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                    this.dateChange({\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                  }\n                }}>\n                <XAxis dataKey=\"date\"/>\n                <YAxis/>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <Tooltip/>\n                <Legend />\n                <Line type=\"monotone\" name=\"Anger\" dataKey=\"emotions.anger.perc\" stroke={coloranger} activeDot={{ r: 8 }}/>\n                <Line type=\"monotone\" name=\"Joy\" dataKey=\"emotions.joy.perc\" stroke={colorjoy} />\n                <Line type=\"monotone\" name=\"Fear\" dataKey=\"emotions.fear.perc\" stroke={colorfear} />\n                <Line type=\"monotone\" name=\"Sadness\" dataKey=\"emotions.sadness.perc\" stroke={colorsad} />\n                <Line type=\"monotone\" name=\"Disgust\" dataKey=\"emotions.disgust.perc\" stroke={colordisgust} />\n              </LineChart>\n            </Card>\n          </div>\n\n          <div className = 'result_news'>\n            <Card>\n            { filterEmotion.length === 0 ? 'No articles found with provided filters' : filterEmotion.map((item, i) => <NewsArticle\n              key={i}\n              date={new Date(item.date).toLocaleDateString()}\n              title={item.headline}\n              newssource={item.sourceID}\n              domFeeling={item.analysis.emotion ? Object.keys(item.analysis.emotion)\n                .sort((a, b) => item.analysis.emotion[b] - item.analysis.emotion[a])[0] : 'None'}\n              feelings= {item.analysis.emotion ? item.analysis.emotion : {\n                anger: 0, joy: 0, disgust: 0, fear: 0, sadness: 0,\n              }}\n              onClick= {() => this.makeRedirect(item.url)}\n            />) }\n            </Card>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nResult.contextType = SearchContext;\n\nexport default Result;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/Result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "classNameMap",
    "memberof": "client/components/result/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/result/Result.js~classNameMap",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Class to name map",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "classNameMap"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string|Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string",
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "coloranger",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~coloranger",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Anger color",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "colorfear",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~colorfear",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Fear color",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "colorjoy",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~colorjoy",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Joy color",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "colorsad",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~colorsad",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Sad color",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "variable",
    "name": "colordisgust",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~colordisgust",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": null,
    "description": "Disgust color",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 231,
    "kind": "class",
    "name": "Result",
    "memberof": "client/components/result/Result.js",
    "static": true,
    "longname": "client/components/result/Result.js~Result",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/Result.js",
    "importStyle": "Result",
    "description": "",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Result"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/result/Result.js~Result",
    "static": false,
    "longname": "client/components/result/Result.js~Result#state",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "{\"averageArray\": *, \"checkedEmotion\": *, \"etSelection\": *}"
      ]
    }
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "makeRedirect",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#makeRedirect",
    "access": "public",
    "description": "Redirect to URL",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "makeRedirect"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "handleCheckedEmotion",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#handleCheckedEmotion",
    "access": "public",
    "description": "Handle checked emotion checkbox",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleCheckedEmotion"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "emotion",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "dateChange",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#dateChange",
    "access": "public",
    "description": "Date change handler",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "dateChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/Result.js~Result#render",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "client/components/result/ResultSentiment.js",
    "content": "import React, { Component } from 'react';\nimport '../style/ResultSentiment.css';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport stt from 'search-text-tokenizer';\nimport Alert from 'react-s-alert';\nimport Header from '../Header';\nimport Dropdown from '../Dropdown';\nimport DatePickerInterval from '../DatePickerInterval';\nimport Button from '../Button';\nimport Parameteres from './Parameters';\nimport Card from '../Card';\nimport Checkbox from '../Checkbox';\nimport DonutChart from './graph/DonutChart';\nimport { SearchContext } from '../dashboard/SearchStore';\nimport NewsArticleSentiment from './NewsArticleSentiment';\n\n/**\n * Class to name\n *\n * @function className\n * @param  {string}  name\n * @returns {string}\n */\nconst className = (name) => {\n  switch (name) {\n    case 'negative':\n      return 'negative';\n    case 'neutral':\n      return 'neutral';\n    case 'positive':\n      return 'positive';\n    default:\n      return [];\n  }\n};\n\n/**\n * Negative color\n * @type {String}\n */\nconst colornegative = '#FF5C54';\n\n/**\n * Neutral color\n * @type {String}\n */\nconst colorneutral = '#AFBE8F';\n\n/**\n * Positive color\n * @type {String}\n */\nconst colorpositive = '#5EA3DB';\n\n/**\n * @class ResultSentiment\n * @extends Component\n */\nclass ResultSentiment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      averageArray: [],\n      checkedSentiment: [],\n      etSelection: false,\n    };\n    this.handleCheckedSentiment = this.handleCheckedSentiment.bind(this);\n  }\n\n  /**\n   * Redirect to rul\n   *\n   * @function makeRedirect\n   * @param  {string}     url - [description]\n   */\n  makeRedirect(url) {\n    if (typeof url !== 'undefined') {\n      window.open(url, '_blank');\n    }\n  }\n\n  /**\n   * Handle sentiment checkbox\n   *\n   * @function handleCheckedSentiment\n   * @param  {Object}               sentiment\n   */\n  handleCheckedSentiment(sentiment) {\n    const item = sentiment.target.value;\n    const isChecked = sentiment.target.checked;\n    const cs = this.state.checkedSentiment;\n    if (isChecked && cs.indexOf(item) === -1)\n      cs.push(item);\n    else if (!isChecked && cs.indexOf(item) > -1)\n      cs.splice(cs.indexOf(item), 1);\n    this.setState({ ...this.state, checkedSentiment: cs });\n  }\n\n  /**\n   * Date change\n   *\n   * @function dateChange\n   * @param  {Date}   date\n   */\n  dateChange(date) {\n    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n    let startDate = !date || !date.startDate ? this.state.startDate : date.startDate;\n    let endDate = !date || !date.endDate ? this.state.endDate : date.endDate;\n    if (!date) {\n      startDate = new Date(0);\n      endDate = new Date();\n    }\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (!startDate.getTime)\n      startDate = new Date(startDate);\n    if (!endDate.getTime)\n      endDate = new Date(endDate);\n    startDate.setHours(0);\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    endDate.setHours(23);\n    endDate.setMinutes(59);\n    endDate.setSeconds(59);\n    startDate = startDate.getTime();\n    endDate = endDate.getTime();\n    if (date.startDate && this.context.search.docs[this.context.search.docs.length - 1]\n      .date - (24 * 60 * 60 * 1000) > startDate && this.state.startDate)\n      Alert.warning('Provided \"from\" date is outside current search results', { position: 'top' });\n    else if (date.endDate && this.context.search.docs[0]\n      .date + (24 * 60 * 60 * 1000) < endDate && this.state.endDate)\n      Alert.warning('Provided \"to\" date is outside current search results', { position: 'top' });\n    opts.startDate = startDate;\n    opts.endDate = endDate;\n    this.context.computeSearch(this.context.search, opts);\n  }\n\n  render() {\n    let { startDate, endDate } = this.state;\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (startDate.getTime)\n      startDate = startDate.getTime();\n    if (endDate.getTime)\n      endDate = endDate.getTime();\n    let filterSentiment = (this.state.checkedSentiment.length === 0\n      ? this.context.search.docs : this.context.search.docs\n        .filter(doc => (this.state.checkedSentiment.indexOf(doc.analysis.sentiment.label) > -1)));\n    filterSentiment = ((startDate || endDate)\n      ? filterSentiment.filter(doc => (startDate ? doc.date >= startDate : true)\n        && (endDate ? doc.date <= endDate : true)) : filterSentiment)\n      .filter(item => item.analysis.sentiment);\n    return (\n      <React.Fragment>\n        <Header class='resultSentiment_header' name='Sentiment Analysis' />\n        <div className='resultSentiment'>\n          <div className='resultSentiment_filter'>\n              <div className= 'filterSentiment_bar'>\n                <div>\n                  <Dropdown className='clickable' titleList='Sentiment' items={\n                    this.context.graphData.map((item, i) => <Checkbox\n                      key={i}\n                      id={item.title}\n                      value={item.title[0].toUpperCase() + item.title.slice(1)}\n                      checked={this.state.checkedSentiment.indexOf(item.title) > -1}\n                      onChange={sentiment => this.handleCheckedSentiment(sentiment)}\n                    />)\n                  } />\n                  <Dropdown className='clickable' titleList='Date Interval' items={<DatePickerInterval change={(date) => {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: date.startDate === null ? undefined : date.startDate,\n                      endDate: date.endDate === null ? undefined : date.endDate,\n                    });\n                    this.dateChange({\n                      startDate: date.startDate === null\n                        ? this.context.search.docs[this.context.search.docs.length - 1].date\n                        : date.startDate,\n                      endDate: date.endDate === null\n                        ? this.context.search.docs[0].date\n                        : date.endDate,\n                    });\n                  }} startDate={this.state.startDate ? new Date(this.state.startDate) : undefined}\n                  endDate={this.state.endDate ? new Date(this.state.endDate) : undefined} />} />\n                  <Dropdown className='clickable' titleList='Neutral threshold' items={<div>Neutral sentiment threshold: {`\\xB1 ${this.state.neutralThreshold && this.state.neutralThreshold !== 0 ? this.state.neutralThreshold : this.context.searchOpts.neutralThreshold}`}<br />\n                    <input\n                      type='range'\n                      min={0}\n                      max={20}\n                      value={(this.state.neutralThreshold && this.state.neutralThreshold !== 0\n                        ? this.state.neutralThreshold\n                        : this.context.searchOpts.neutralThreshold) * 20}\n                      onChange={(e) => {\n                        this.setState({\n                          ...this.state,\n                          neutralThreshold: Number(e.target.value / 20),\n                        });\n                      }} />\n                    <Button title='Apply' onClick={() => {\n                      if ((!this.state.neutralThreshold && this.state.neutralThreshold !== 0)\n                        || this.state.neutralThreshold === this.context.searchOpts.neutralThreshold)\n                        return;\n                      const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                      opts.neutralThreshold = Number(this.state.neutralThreshold);\n                      this.context.computeSearch(this.context.search, opts);\n                    }} />\n                    </div>} />\n                </div>\n                <div>\n                  <Button className='exportpdf' title='Print result' onClick={() => {\n                    window.print();\n                  }} />\n                </div>\n            </div>\n          </div>\n\n          <div className = 'resultSentiment_parameters'>\n            <Card>\n              <div className='title_param'>Parameters</div>\n              <div className='param_card'>\n                <Parameteres\n                  searchtext={stt(this.context.searchOpts.search.replace(/[^a-zA-Z\\s-]/g, ''))\n                    .reduce((acc, val) => {\n                      if (acc !== '')\n                        acc += ', ';\n                      if (val.exclude)\n                        acc += `-${val.term}`;\n                      else if (val.phrase)\n                        acc += `\"${val.term}\"`;\n                      else\n                        acc += val.term;\n                      return acc;\n                    }, '')}\n                  sentiment={`Sentiment: ${this.state.checkedSentiment.length === 0\n                    ? 'Positive, Neagtive, Neutral'\n                    : `${this.state.checkedSentiment.slice(0, -1)\n                      .map(s => s[0].toUpperCase() + s.slice(1)).join(', ')}${this.state.checkedSentiment.slice(0, -1).length > 0\n                      ? ', '\n                      : ''}${this.state.checkedSentiment.slice(-1).map(s => s[0].toUpperCase() + s.slice(1))[0]}`}`}\n                  timeinterval={`Date Interval: ${new Date(this.state.startDate ? this.state.startDate : filterSentiment[filterSentiment.length - 1].date).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`}\n                  threshold={`Neutral threshold: \\xB1 ${this.context.searchOpts.neutralThreshold}`}\n                  amount={`Amount: ${filterSentiment.length}`}\n                  emotion={this.context.searchOpts.show}\n                  emotionClick={() => {\n                    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                    opts.show = !opts.show;\n                    this.context.computeSearch(this.context.search, opts);\n                  }}\n                />\n              </div>\n            </Card>\n          </div>\n\n          {this.context.graphData.map((element, i) => {\n            const name = className(element.title);\n            return (<div key={i} className = {`resultSentiment_graphs_${name} clickable clickable-color`}>\n              <Card onClick={() => {\n                if (this.state.checkedSentiment[0] === name\n                  && this.state.checkedSentiment.length === 1)\n                  return this.setState({ ...this.state, checkedSentiment: [] });\n                this.setState({\n                  ...this.state,\n                  checkedSentiment: [name],\n                });\n              }}>\n                <div align='center' className='graphs' >\n                  <DonutChart chart={`${name}_chart`} label={`label_${name}`} name={element.title} data={[element]}/>\n                </div>\n              </Card>\n            </div>);\n          })}\n\n          <div className='resultSentiment_emotionalTone'>\n            <Card>\n            <div className='emotionalTone'>Emotional Tone</div>\n              <LineChart\n                className='clickable'\n                width={350}\n                height={300}\n                data={this.context.emotionalTone}\n                margin={{\n                  top: 20,\n                }} onClick={(data) => {\n                  if (this.state.etSelection) {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: undefined,\n                      endDate: undefined,\n                    });\n                    this.dateChange();\n                  }\n                  else if (data\n                    && data.activePayload\n                    && data.activePayload[0]\n                    && data.activePayload[0].payload\n                    && data.activePayload[0].payload.time) {\n                    const sd = new Date(data.activePayload[0].payload.time);\n                    const ed = new Date(data.activePayload[0].payload.time);\n                    sd.setHours(0);\n                    sd.setMinutes(0);\n                    sd.setSeconds(0);\n                    ed.setHours(23);\n                    ed.setMinutes(59);\n                    ed.setSeconds(59);\n                    this.setState({\n                      ...this.state,\n                      etSelection: true,\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                    this.dateChange({\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                  }\n                }}>\n                <XAxis dataKey=\"date\"/>\n                <YAxis/>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <Tooltip/>\n                <Legend />\n                <Line type=\"monotone\" name=\"Negative\" dataKey=\"sentiments.negative.score\" stroke={colornegative} activeDot={{ r: 8 }}/>\n                <Line type=\"monotone\" name=\"Neutral\" dataKey=\"sentiments.neutral.score\" stroke={colorneutral} />\n                <Line type=\"monotone\" name=\"Positive\" dataKey=\"sentiments.positive.score\" stroke={colorpositive} />\n              </LineChart>\n            </Card>\n          </div>\n\n          <div className='resultSentiment_articles'>\n            <Card>\n              { filterSentiment.length === 0 ? 'No articles found with provided filters' : filterSentiment.map((item, i) => <NewsArticleSentiment\n                key={i}\n                date={new Date(item.date).toLocaleDateString()}\n                title={item.headline}\n                newssource={item.sourceID}\n                domSentiment={item.analysis.sentiment.label}\n                onClick= {() => this.makeRedirect(item.url)}\n                sentiments= {item.analysis.sentiment ? item.analysis.sentiment : {\n                  negative: 0, neutral: 0, positive: 0,\n                }}\n              />)}\n            </Card>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nResultSentiment.contextType = SearchContext;\n\nexport default ResultSentiment;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/ResultSentiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "className",
    "memberof": "client/components/result/ResultSentiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/result/ResultSentiment.js~className",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": "Class to name",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "className"
      },
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "colornegative",
    "memberof": "client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "client/components/result/ResultSentiment.js~colornegative",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": "Negative color",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "colorneutral",
    "memberof": "client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "client/components/result/ResultSentiment.js~colorneutral",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": "Neutral color",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "colorpositive",
    "memberof": "client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "client/components/result/ResultSentiment.js~colorpositive",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": "Positive color",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "ResultSentiment",
    "memberof": "client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/ResultSentiment.js",
    "importStyle": "ResultSentiment",
    "description": "",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ResultSentiment"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "state",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#state",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "{\"averageArray\": *, \"checkedSentiment\": *, \"etSelection\": *}"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "makeRedirect",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#makeRedirect",
    "access": "public",
    "description": "Redirect to rul",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "makeRedirect"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": "[description]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "handleCheckedSentiment",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#handleCheckedSentiment",
    "access": "public",
    "description": "Handle sentiment checkbox",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "handleCheckedSentiment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sentiment",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "dateChange",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#dateChange",
    "access": "public",
    "description": "Date change",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "dateChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Date"
        ],
        "spread": false,
        "optional": false,
        "name": "date",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/ResultSentiment.js~ResultSentiment#render",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "client/components/result/graph/DonutChart.js",
    "content": "import React, { Component } from 'react';\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\nimport '../../style/DonutChart.css';\nimport Proptypes from 'prop-types';\n\n/**\n * @class DonutChart\n * @extends Component\n *\n * @reactProps {String} chart\n * @reactProps {String} label\n * @reactProps {Array<Object>} data\n * @reactProps {String} name\n */\nclass DonutChart extends Component {\n  render() {\n    return (<React.Fragment>\n      <ReactMinimalPieChart\n        className={this.props.chart}\n        data={this.props.data}\n        totalValue={100}\n        lineWidth={25}\n        label\n        labelStyle={{\n          fontSize: '25px',\n          fontFamily: 'sans-serif',\n        }}\n        labelPosition={0}\n        animate\n      />\n      <div className={this.props.label} align='center'>{this.props.name}</div>\n    </React.Fragment>);\n  }\n}\n\nDonutChart.propTypes = {\n  chart: Proptypes.any,\n  label: Proptypes.any,\n  data: Proptypes.any,\n  name: Proptypes.any,\n};\n\nexport default DonutChart;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/graph/DonutChart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "DonutChart",
    "memberof": "client/components/result/graph/DonutChart.js",
    "static": true,
    "longname": "client/components/result/graph/DonutChart.js~DonutChart",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/graph/DonutChart.js",
    "importStyle": "DonutChart",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DonutChart"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} chart"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} label"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{Array<Object>} data"
      },
      {
        "tagName": "@reactProps",
        "tagValue": "{String} name"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 255,
    "kind": "method",
    "name": "render",
    "memberof": "client/components/result/graph/DonutChart.js~DonutChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "client/components/result/graph/DonutChart.js~DonutChart#render",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "file",
    "name": "client/components/result/graph/ProgressbarGraph.js",
    "content": "import React from 'react';\nimport '../../style/ProgressbarGraph.css';\nimport PropTypes from 'prop-types';\n\n/**\n * Progress bar graph\n *\n * @function ProgressBar\n * @param  {Object}    input\n */\nconst ProgressBar = input => (\n      <div className=\"progress-bar\">\n        <Filler perc={input.perc} color={input.color}/>\n      </div>\n);\n\n/**\n * Filler\n *\n * @function Filler\n * @param  {Object} input\n */\nconst Filler = input => (\n  <div className=\"filler\" style={{ width: `${input.perc}%`, backgroundColor: `#${input.color}` }} />\n);\n\nProgressBar.propTypes = {\n  perc: PropTypes.any,\n};\n\nFiller.propTypes = {\n  perc: PropTypes.any,\n};\n\nexport default ProgressBar;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/graph/ProgressbarGraph.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "Filler",
    "memberof": "client/components/result/graph/ProgressbarGraph.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/result/graph/ProgressbarGraph.js~Filler",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/client/components/result/graph/ProgressbarGraph.js",
    "importStyle": null,
    "description": "Filler",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "Filler"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "ProgressBar",
    "memberof": "client/components/result/graph/ProgressbarGraph.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "client/components/result/graph/ProgressbarGraph.js~ProgressBar",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/client/components/result/graph/ProgressbarGraph.js",
    "importStyle": "ProgressBar",
    "description": "Progress bar graph",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": "ProgressBar"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Sentiment-Analysis\n## Documentation\nThe documentation for the project can be found [here](https://andham97.github.io/Sentiment-Analysis/index.html)\n\n## Instalation guide\nMake sure you run atleast node version\n",
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"engines\": {\n    \"node\": \"9.3.0\",\n    \"npm\": \"6.5.0\"\n  },\n  \"name\": \"sentiment-analysis\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"start\": \"node build/server/server.js\",\n    \"pretest\": \"eslint . --ext .js --ignore-path .gitignore\",\n    \"test\": \"jest\",\n    \"clean\": \"rm -rf build && mkdir build\",\n    \"build-server\": \"babel -d ./build/server ./src/server\",\n    \"build-client\": \"webpack\",\n    \"build\": \"npm run clean && npm run build-server && npm run build-client\",\n    \"debug-server\": \"nodemon --exec babel-node src/server/server.js --watch src/server\",\n    \"debug-client\": \"webpack --watch\",\n    \"debug-ws\": \"nodemon --exec babel-node src/server/ws/webscraper.js\",\n    \"ws\": \"babel-node src/server/ws/webscraper.js\",\n    \"prod-ws\": \"node build/server/ws/webscraper.js\",\n    \"jsdoc\": \"nodemon --exec npm run jd --watch src/server\",\n    \"esdoc\": \"nodemon --exec npm run ed --watch src/client\",\n    \"jd\": \"rm -rf docs/server && documentation build src/server/** -f html -o docs/server\",\n    \"ed\": \"rm -rf docs/client && esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/andham97/Sentiment-Analysis.git\"\n  },\n  \"babel\": {\n    \"presets\": [\n      \"@babel/preset-env\",\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": []\n  },\n  \"author\": \"Andreas Hammer, Dina Rosvoll, Oda Steinland Skaug\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@cloudant/cloudant\": \"^3.0.2\",\n    \"@react-pdf/renderer\": \"^1.5.4\",\n    \"auth0\": \"^2.16.0\",\n    \"bootstrap\": \"^4.3.1\",\n    \"brace\": \"^0.11.1\",\n    \"cfenv\": \"^1.2.1\",\n    \"cheerio\": \"^1.0.0-rc.2\",\n    \"dotenv\": \"^7.0.0\",\n    \"express\": \"^4.16.4\",\n    \"express-session\": \"^1.15.6\",\n    \"html2canvas\": \"^1.0.0-rc.1\",\n    \"js-beautify\": \"^1.9.1\",\n    \"jspdf\": \"^1.5.3\",\n    \"lodash\": \"^4.17.11\",\n    \"moment\": \"^2.24.0\",\n    \"morgan\": \"^1.9.1\",\n    \"newsapi\": \"^2.4.0\",\n    \"passport\": \"^0.4.0\",\n    \"passport-auth0\": \"^1.1.0\",\n    \"prismjs\": \"^1.16.0\",\n    \"prop-types\": \"^15.7.2\",\n    \"rasterizehtml\": \"^1.3.0\",\n    \"react\": \"^16.7.0\",\n    \"react-ace\": \"^6.4.0\",\n    \"react-autocomplete\": \"^1.8.1\",\n    \"react-bootstrap\": \"^1.0.0-beta.5\",\n    \"react-bootstrap-typeahead\": \"^4.0.0-alpha.5\",\n    \"react-d3-cloud\": \"^0.7.0\",\n    \"react-datepicker\": \"^2.3.0\",\n    \"react-dates\": \"^20.1.0\",\n    \"react-dom\": \"^16.7.0\",\n    \"react-hotkeys\": \"^1.1.4\",\n    \"react-icons\": \"^3.5.0\",\n    \"react-minimal-pie-chart\": \"^3.5.0\",\n    \"react-onclickoutside\": \"^6.8.0\",\n    \"react-responsive\": \"^6.1.1\",\n    \"react-router\": \"^5.0.0\",\n    \"react-router-dom\": \"^5.0.0\",\n    \"react-s-alert\": \"^1.4.1\",\n    \"react-simple-code-editor\": \"^0.9.10\",\n    \"react-tagcloud\": \"^1.4.0\",\n    \"recharts\": \"^1.5.0\",\n    \"request\": \"^2.88.0\",\n    \"request-promise\": \"^4.2.4\",\n    \"search-text-tokenizer\": \"^2.1.1\",\n    \"url-loader\": \"^1.1.2\",\n    \"uuid\": \"^3.3.2\",\n    \"validator\": \"^10.11.0\",\n    \"watson-developer-cloud\": \"^3.17.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.2.3\",\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/node\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^8.0.5\",\n    \"css-loader\": \"^2.1.0\",\n    \"documentation\": \"^11.0.0\",\n    \"enzyme\": \"^3.8.0\",\n    \"enzyme-adapter-react-16\": \"^1.8.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.12.1\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.15.0\",\n    \"eslint-plugin-jest\": \"^22.1.3\",\n    \"eslint-plugin-jsdoc\": \"^4.8.4\",\n    \"eslint-plugin-react\": \"^7.12.4\",\n    \"jest\": \"^24.1.0\",\n    \"jsdoc\": \"^3.6.2\",\n    \"jsdoc-babel\": \"^0.5.0\",\n    \"jsdoc-route-plugin\": \"^0.1.0\",\n    \"jsdoc-to-markdown\": \"^5.0.0\",\n    \"loke-jsdoc-theme\": \"^2.1.0\",\n    \"nock\": \"^10.0.6\",\n    \"nodemon\": \"^1.18.9\",\n    \"path\": \"^0.12.7\",\n    \"style-loader\": \"^0.23.1\",\n    \"webpack\": \"^4.29.0\",\n    \"webpack-cli\": \"^3.2.1\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"airbnb-base\",\n      \"plugin:jest/recommended\",\n      \"plugin:react/recommended\"\n    ],\n    \"parser\": \"babel-eslint\",\n    \"env\": {\n      \"node\": true,\n      \"jest/globals\": true,\n      \"browser\": true\n    },\n    \"plugins\": [\n      \"jest\",\n      \"react\",\n      \"jsdoc\"\n    ],\n    \"rules\": {\n      \"class-methods-use-this\": 0,\n      \"prefer-destructuring\": 0,\n      \"brace-style\": [\n        2,\n        \"stroustrup\"\n      ],\n      \"consistent-return\": 0,\n      \"nonblock-statement-body-position\": 0,\n      \"curly\": 0,\n      \"no-console\": 0,\n      \"no-param-reassign\": 0,\n      \"no-shadow\": [\n        \"error\",\n        {\n          \"allow\": [\n            \"err\"\n          ]\n        }\n      ],\n      \"no-underscore-dangle\": 0,\n      \"import/named\": 0,\n      \"no-plusplus\": 0,\n      \"prefer-promise-reject-errors\": 0,\n      \"no-eval\": 0,\n      \"no-await-in-loop\": 0,\n      \"no-restricted-globals\": 0,\n      \"import/no-unresolved\": 0,\n      \"jsdoc/check-alignment\": 1,\n      \"jsdoc/check-examples\": 1,\n      \"jsdoc/check-indentation\": 1,\n      \"jsdoc/check-param-names\": 1,\n      \"jsdoc/check-syntax\": 1,\n      \"jsdoc/check-tag-names\": 1,\n      \"jsdoc/check-types\": 1,\n      \"jsdoc/newline-after-description\": 1,\n      \"jsdoc/require-hyphen-before-param-description\": 1,\n      \"jsdoc/require-jsdoc\": 1,\n      \"jsdoc/require-param\": 1,\n      \"jsdoc/require-param-name\": 1,\n      \"jsdoc/require-param-type\": 1,\n      \"jsdoc/valid-types\": 1\n    },\n    \"settings\": {\n      \"react\": {\n        \"version\": \"detect\"\n      }\n    }\n  },\n  \"eslintIgnore\": [\n    \"node_modules\",\n    \"docs\"\n  ],\n  \"jest\": {\n    \"setupFilesAfterEnv\": [\n      \"<rootDir>/enzyme.config.js\"\n    ],\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less|sass|scss)$\": \"<rootDir>/__mocks__/styleMock.js\"\n    }\n  }\n}\n",
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]