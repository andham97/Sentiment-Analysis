[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/client/App.js",
    "content": "import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Alert from 'react-s-alert';\nimport Dashboard from './components/dashboard/Dashboard';\nimport AdminPanel from './components/admin/AdminPanel';\nimport AdminPanelStore from './components/admin/AdminPanelStore';\nimport SearchStore from './components/dashboard/SearchStore';\nimport LoadingPage from './components/LoadingPage';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport 'react-s-alert/dist/s-alert-default.css';\nimport 'react-s-alert/dist/s-alert-css-effects/stackslide.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <ErrorBoundary>\n        <Alert stack={{ limit: 1 }} />\n        <BrowserRouter>\n          <SearchStore>\n            <Route exact path='/' component={Dashboard} />\n            <Route path='/result' component={LoadingPage} />\n          </SearchStore>\n          <AdminPanelStore>\n            <Route path='/admin' component={AdminPanel} />\n          </AdminPanelStore>\n        </BrowserRouter>\n      </ErrorBoundary>\n    );\n  }\n}\n\nexport default App;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "App",
    "memberof": "src/client/App.js",
    "static": true,
    "longname": "src/client/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/App.js",
    "importStyle": "App",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/App.js~App#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "file",
    "name": "src/client/client.js",
    "content": "import ReactDOM from 'react-dom';\nimport React from 'react';\nimport App from './App';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/client.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "src/client/components/Button.js",
    "content": "import React, { Component } from 'react';\nimport './style/SearchButton.css';\nimport PropTypes from 'prop-types';\n\nclass Button extends Component {\n  render() {\n    return (\n      <button\n        onClick={this.props.onClick}\n        className={this.props.className}>\n      {this.props.title}</button>\n    );\n  }\n}\n\nButton.propTypes = {\n  onClick: PropTypes.any,\n  className: PropTypes.any,\n  title: PropTypes.any,\n};\n\nexport default Button;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Button.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "Button",
    "memberof": "src/client/components/Button.js",
    "static": true,
    "longname": "src/client/components/Button.js~Button",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/Button.js",
    "importStyle": "Button",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Button.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Button.js~Button#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "file",
    "name": "src/client/components/Card.js",
    "content": "import React, { Component } from 'react';\nimport './style/Card.css';\nimport PropTypes from 'prop-types';\n\nclass Card extends Component {\n  render() {\n    return (\n      <div onClick={this.props.onClick} className={`card ${this.props.cName ? this.props.cName : ''}`} style={this.props.style}>{this.props.children}</div>\n    );\n  }\n}\n\nCard.propTypes = {\n  style: PropTypes.any,\n  children: PropTypes.any,\n  cName: PropTypes.any,\n  onClick: PropTypes.any,\n};\n\nexport default Card;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Card.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 56,
    "kind": "class",
    "name": "Card",
    "memberof": "src/client/components/Card.js",
    "static": true,
    "longname": "src/client/components/Card.js~Card",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/Card.js",
    "importStyle": "Card",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Card.js~Card",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Card.js~Card#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/client/components/Checkbox.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './style/Checkbox.css';\n\nclass Checkbox extends Component {\n  render() {\n    const {\n      name, id, value, className, onChange, checked,\n    } = this.props;\n    return (\n      <div className='each_Checkbox'>\n        <ul style= {{ margin: '0rem', paddingLeft: '0.2rem' }}><input type='checkbox' key= { id } name= { name } value= { id } checked= {checked} className= { className } onChange= { onChange }/> { value }</ ul>\n      </div>\n    );\n  }\n}\n\nCheckbox.propTypes = {\n  name: PropTypes.any,\n  id: PropTypes.any,\n  value: PropTypes.any,\n  className: PropTypes.any,\n  onChange: PropTypes.any,\n  checked: PropTypes.any,\n};\n\nexport default Checkbox;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Checkbox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "Checkbox",
    "memberof": "src/client/components/Checkbox.js",
    "static": true,
    "longname": "src/client/components/Checkbox.js~Checkbox",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/Checkbox.js",
    "importStyle": "Checkbox",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Checkbox.js~Checkbox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Checkbox.js~Checkbox#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/client/components/DatePickerInterval.js",
    "content": "import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport './style/DatePickerInterval.css';\nimport Proptypes from 'prop-types';\n\nclass DatePickerInterval extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: props.startDate,\n      endDate: props.endDate,\n    };\n    this.handleChangeEnd = this.handleChangeEnd.bind(this);\n    this.handleChangeStart = this.handleChangeStart.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      startDate: this.props.startDate ? this.props.startDate : undefined,\n      endDate: this.props.endDate ? this.props.endDate : undefined,\n    });\n  }\n\n  handleChangeStart(start) {\n    if (start && start.getTime) {\n      start.setHours(0);\n      start.setMinutes(0);\n      start.setSeconds(0);\n    }\n    this.props.change({ startDate: start, endDate: this.state.endDate });\n    this.setState({\n      ...this.state,\n      startDate: start,\n    });\n  }\n\n  handleChangeEnd(end) {\n    if (end && end.getTime) {\n      end.setHours(23);\n      end.setMinutes(59);\n      end.setSeconds(59);\n    }\n    this.props.change({ startDate: this.state.startDate, endDate: end });\n    this.setState({\n      ...this.state,\n      endDate: end,\n    });\n  }\n\n  render() {\n    return (\n      <div className='datepickerinterval'>\n        From: <br /><DatePicker\n           selected={this.state.startDate}\n           selectsStart\n           startDate={this.state.startDate}\n           endDate={this.state.endDate}\n           onChange={this.handleChangeStart}\n           className={'daterangestart'}\n           style={this.props.style}\n           isClearable={true}\n        />\n\n        <br />\n\n        To: <br /><DatePicker\n           selected={this.state.endDate}\n           selectsEnd\n           startDate={this.state.startDate}\n           endDate={this.state.endDate}\n           onChange={this.handleChangeEnd}\n           className={'daterangeend'}\n           style={this.props.style}\n           isClearable={true}\n        />\n      </div>\n    );\n  }\n}\n\nDatePickerInterval.propTypes = {\n  style: Proptypes.any,\n  change: Proptypes.any,\n  startDate: Proptypes.any,\n  endDate: Proptypes.any,\n};\n\nexport default DatePickerInterval;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/DatePickerInterval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "class",
    "name": "DatePickerInterval",
    "memberof": "src/client/components/DatePickerInterval.js",
    "static": true,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/DatePickerInterval.js",
    "importStyle": "DatePickerInterval",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 63,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"startDate\": *, \"endDate\": *}"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "handleChangeStart",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#handleChangeStart",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "handleChangeEnd",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#handleChangeEnd",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/DatePickerInterval.js~DatePickerInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/DatePickerInterval.js~DatePickerInterval#render",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/client/components/Dropdown.js",
    "content": "import React, { Component } from 'react';\nimport { FaAngleDown, FaAngleUp } from 'react-icons/fa';\nimport onClickOutside from 'react-onclickoutside';\nimport PropTypes from 'prop-types';\nimport './style/Dropdown.css';\n\nclass Dropdown extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownList: false,\n    };\n  }\n\n  droppedList() {\n    this.setState({\n      dropdownList: !this.state.dropdownList,\n    });\n  }\n\n  handleClickOutside() {\n    if (this.props.onClose)\n      this.props.onClose();\n    this.setState({\n      dropdownList: false,\n    });\n  }\n\n  render() {\n    const { titleList, items } = this.props;\n    const { dropdownList } = this.state;\n    return (\n        <div className={`dropdown ${this.props.className ? this.props.className : ''}`} onClick={(e) => {\n          if (e.target.className === `dropdown ${this.props.className ? this.props.className : ''}`)\n            this.droppedList();\n        }}>\n          <div className='dropdown_title' onClick={() => this.droppedList()}>{ titleList }\n            {dropdownList ? <span className='arrowDown'> <FaAngleUp /> </span> : <span className='arrowDown'> <FaAngleDown /> </span> }\n          </div>\n          <br />\n          <br />\n            {dropdownList ? (\n              <div className='dropdown dropdown-items'>{ items }</div>\n            )\n              : (\n                null\n              )\n        }\n        </div>\n    );\n  }\n}\n\nDropdown.propTypes = {\n  titleList: PropTypes.any,\n  items: PropTypes.any,\n  onClose: PropTypes.any,\n  className: PropTypes.any,\n};\n\nexport default onClickOutside(Dropdown);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Dropdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "class",
    "name": "Dropdown",
    "memberof": "src/client/components/Dropdown.js",
    "static": true,
    "longname": "src/client/components/Dropdown.js~Dropdown",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/Dropdown.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 73,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Dropdown.js~Dropdown#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/Dropdown.js~Dropdown",
    "static": false,
    "longname": "src/client/components/Dropdown.js~Dropdown#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"dropdownList\": *}"
      ]
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "droppedList",
    "memberof": "src/client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Dropdown.js~Dropdown#droppedList",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "handleClickOutside",
    "memberof": "src/client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Dropdown.js~Dropdown#handleClickOutside",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Dropdown.js~Dropdown#render",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "file",
    "name": "src/client/components/ErrorBoundary.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, info) {\n    console.error(error);\n    console.error(info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (<React.Fragment>\n        <h1>Something went wrong.</h1>\n        {JSON.stringify(this.state.error, null, 2)}\n      </React.Fragment>);\n    }\n\n    return this.props.children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default ErrorBoundary;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/ErrorBoundary.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 79,
    "kind": "class",
    "name": "ErrorBoundary",
    "memberof": "src/client/components/ErrorBoundary.js",
    "static": true,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/ErrorBoundary.js",
    "importStyle": "ErrorBoundary",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 80,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "static": false,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary#state",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{\"hasError\": *}"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "getDerivedStateFromError",
    "memberof": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary.getDerivedStateFromError",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"hasError\": boolean, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "componentDidCatch",
    "memberof": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary#componentDidCatch",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "info",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/ErrorBoundary.js~ErrorBoundary",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/ErrorBoundary.js~ErrorBoundary#render",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "file",
    "name": "src/client/components/Filter.js",
    "content": "import React, { Component } from 'react';\nimport './style/Filter.css';\nimport Proptypes from 'prop-types';\nimport { FaAngleDown } from 'react-icons/fa';\n\nclass Filter extends Component {\n  render() {\n    const { name } = this.props;\n    return (\n      <div className='filter'>\n        <div className='filter_name'> { name }</div>\n        <span className='arrowDown'> <FaAngleDown /> </span>\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  name: Proptypes.any,\n};\n\nexport default Filter;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Filter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 86,
    "kind": "class",
    "name": "Filter",
    "memberof": "src/client/components/Filter.js",
    "static": true,
    "longname": "src/client/components/Filter.js~Filter",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/Filter.js",
    "importStyle": "Filter",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Filter.js~Filter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Filter.js~Filter#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 88,
    "kind": "file",
    "name": "src/client/components/Header.js",
    "content": "import React, { Component } from 'react';\nimport './style/Header.css';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\n\nclass Header extends Component {\n  render() {\n    const { name, children } = this.props;\n    return (\n      <div className=\"header\">\n        <div><span className=\"clickable\" onClick={() => this.props.history.push('/')}>{ name }</span> { children }<span className='clickable admin-button' onClick={() => this.props.history.push('/admin')}>Admin?</span></div>\n      </div>\n    );\n  }\n}\n\nHeader.propTypes = {\n  name: PropTypes.any,\n  children: PropTypes.any,\n  history: PropTypes.any,\n};\n\nexport default withRouter(Header);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/Header.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 89,
    "kind": "class",
    "name": "Header",
    "memberof": "src/client/components/Header.js",
    "static": true,
    "longname": "src/client/components/Header.js~Header",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/Header.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/Header.js~Header",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/Header.js~Header#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/client/components/LoadingPage.js",
    "content": "import React, { Component } from 'react';\nimport './style/LoadingPage.css';\nimport loader from '../oda.gif';\nimport { SearchContext } from './dashboard/SearchStore';\nimport Result from './result/Result';\nimport ResultSentiment from './result/ResultSentiment';\nimport NoResult from './result/NoResult';\n\nclass LoadingPage extends Component {\n  componentDidMount() {\n    if (!this.context.search && localStorage.getItem('prev-search') && !this.context.searchOpts)\n      this.context.getSearch(JSON.parse(localStorage.getItem('prev-search')));\n  }\n\n  render() {\n    if (!this.context.search)\n      return (\n        <React.Fragment>\n          <img src={loader} />\n          <div>{ this.context.search }</div>\n        </React.Fragment>\n      );\n    if (this.context.search.docs.length === 0)\n      return <NoResult />;\n    if (this.context.searchType === 'emotion')\n      return <Result />;\n    if (this.context.searchType === 'sentiment')\n      return <ResultSentiment />;\n    return <NoResult />;\n  }\n}\n\nLoadingPage.contextType = SearchContext;\n\nexport default LoadingPage;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/LoadingPage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "LoadingPage",
    "memberof": "src/client/components/LoadingPage.js",
    "static": true,
    "longname": "src/client/components/LoadingPage.js~LoadingPage",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/LoadingPage.js",
    "importStyle": "LoadingPage",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "src/client/components/LoadingPage.js~LoadingPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/LoadingPage.js~LoadingPage#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/LoadingPage.js~LoadingPage",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/LoadingPage.js~LoadingPage#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "file",
    "name": "src/client/components/TimeInterval.js",
    "content": "import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport './style/TimeInterval.css';\n\nclass TimeInterval extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      startDate: new Date(),\n      endDate: new Date(),\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(startdate, enddate) {\n    this.setState({\n      startDate: startdate,\n      endDate: enddate,\n    });\n  }\n\n  render() {\n    return (\n      <div><br /> <span className='chooseDate'>Choose prefered date: </span>\n        From: <DatePicker todayButton={'Today'} selected={this.state.startDate} onChange={this.handleChange()}/>\n        To: <DatePicker todayButton={'Today'} selected={this.state.endDate} onChange={this.handleChange()}/>\n      </div>\n    );\n  }\n}\n\nexport default TimeInterval;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/TimeInterval.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 96,
    "kind": "class",
    "name": "TimeInterval",
    "memberof": "src/client/components/TimeInterval.js",
    "static": true,
    "longname": "src/client/components/TimeInterval.js~TimeInterval",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/TimeInterval.js",
    "importStyle": "TimeInterval",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 97,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/TimeInterval.js~TimeInterval#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 98,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/TimeInterval.js~TimeInterval",
    "static": false,
    "longname": "src/client/components/TimeInterval.js~TimeInterval#state",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"startDate\": *, \"endDate\": *}"
      ]
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "handleChange",
    "memberof": "src/client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/TimeInterval.js~TimeInterval#handleChange",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "startdate",
        "types": [
          "*"
        ]
      },
      {
        "name": "enddate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/TimeInterval.js~TimeInterval",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/TimeInterval.js~TimeInterval#render",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/client/components/admin/AdminPanelStore.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\nimport beautify from 'js-beautify';\nimport cheerio from 'cheerio';\nimport Alert from 'react-s-alert';\n\nconst AdminPanelContext = React.createContext();\nconst hostBoilerplate = {\n  body: [],\n  date: {\n    sel: [],\n    function: '(date, months) => {\\n  return new Date();\\n};',\n  },\n  exclude: [],\n  headlines: [],\n  name: '',\n  sourceID: '',\n  hostnames: [],\n  hostDeletions: [],\n  headlineDeletions: [],\n  bodyDeletions: [],\n  excludeDelections: [],\n  validationURL: '',\n};\n\nconst clone = object => JSON.parse(JSON.stringify(object));\n\nclass AdminPanelStore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hosts: [],\n      activeHost: clone(hostBoilerplate),\n      activeIndex: -1,\n      testURL: '',\n      whitelist: false,\n      urlCount: -1,\n      scheduleItems: [],\n    };\n    this.getHosts = this.getHosts.bind(this);\n    this.setActiveHost = this.setActiveHost.bind(this);\n    this.updateActiveHost = this.updateActiveHost.bind(this);\n    this.saveHost = this.saveHost.bind(this);\n    this.testURLChange = this.testURLChange.bind(this);\n    this.loadTestURL = this.loadTestURL.bind(this);\n    this.clearActiveHost = this.clearActiveHost.bind(this);\n    this.isWhitelisted = this.isWhitelisted.bind(this);\n    this.fetchNews = this.fetchNews.bind(this);\n    this.getUrlCount = this.getUrlCount.bind(this);\n    this.getSchedule = this.getSchedule.bind(this);\n    this.addScheduleItem = this.addScheduleItem.bind(this);\n    this.deleteScheduleItem = this.deleteScheduleItem.bind(this);\n  }\n\n  addScheduleItem(item) {\n    fetch('/api/ws/schedule', {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json',\n      },\n      body: JSON.stringify(item),\n    }).then(res => res.json()).then((nItem) => {\n      const { scheduleItems } = this.state;\n      scheduleItems.push(nItem);\n      this.setState({\n        ...this.state,\n        scheduleItems,\n      });\n    }).catch(console.error);\n  }\n\n  deleteScheduleItem(id) {\n    fetch(`/api/ws/schedule/${id}`, {\n      method: 'DELETE',\n    }).then(res => res.json()).then((did) => {\n      let { scheduleItems } = this.state;\n      scheduleItems = scheduleItems.filter(item => item.id !== did);\n      this.setState({\n        ...this.state,\n        scheduleItems,\n      });\n    }).catch(console.error);\n  }\n\n  getSchedule() {\n    fetch('/api/ws/schedule').then(res => res.json()).then((items) => {\n      this.setState({\n        ...this.state,\n        scheduleItems: items,\n      });\n    }).catch(console.error);\n  }\n\n  getUrlCount() {\n    fetch('/api/ws/urlCount', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(res => res.json())\n      .then(data => this.setState({ ...this.state, urlCount: data.count }))\n      .catch(console.error);\n  }\n\n  fetchNews(sources, hsts) {\n    Alert.info(`Fetching news from ${sources.reduce((acc, src) => `${acc} ${hsts[src]},`, '')}`.slice(0, -1), { position: 'top' });\n    fetch('/api/ws/fetchNews', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        sources,\n      }),\n    }).then(res => res.json()).then((data) => {\n      Alert.success(`${data} articles started to load`, { position: 'top' });\n    }).catch(console.error);\n  }\n\n  scrapeURL(url) {\n    if (typeof url !== 'string')\n      return;\n    fetch('/api/ws', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        urls: [url],\n      }),\n    });\n  }\n\n  isWhitelisted() {\n    fetch('/api/auth/whitelist').then(resp => resp.json()).then((wl) => {\n      this.setState({ ...this.state, whitelist: wl });\n    }).catch(console.error);\n  }\n\n  clearActiveHost() {\n    this.setState({ ...this.state, activeIndex: -1, activeHost: clone(hostBoilerplate) });\n  }\n\n  loadTestURL() {\n    this.setState({ ...this.state, testPage: 1 });\n    fetch(`/api/ws/load?url=${encodeURIComponent(this.state.testURL)}`).then(resp => resp.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        testPage: data.statusCode === 200 ? cheerio.load(data.data) : 'Unable to access news source',\n      });\n    });\n  }\n\n  testURLChange(testURL) {\n    this.setState({ ...this.state, testURL });\n  }\n\n  getHosts() {\n    fetch('/api/ws/hosts').then(response => response.json()).then((data) => {\n      const hosts = Object.keys(data).filter(key => key.indexOf('_') !== 0 && key !== 'type').reduce((acc, key) => {\n        const selection = acc.filter(e => e.sourceID === data[key].sourceID);\n        if (selection.length === 0) {\n          const d = data[key];\n          d.hostnames = [key];\n          d.hostDeletions = [];\n          acc.push(d);\n        }\n        else\n          selection[0].hostnames.push(key);\n        return acc;\n      }, [])\n        .map(val => ({\n          ...val,\n          date: {\n            ...val.date,\n            function: beautify.js(val.date.function, {\n              indent_size: 2,\n              space_in_empty_parent: false,\n            }),\n          },\n        }))\n        .sort((a, b) => ([a.sourceID, b.sourceID].sort()[0] === a.sourceID ? -1 : 1));\n      this.setState({ ...this.state, hosts });\n    });\n  }\n\n  setActiveHost(i) {\n    this.setState({\n      ...this.state,\n      activeIndex: i,\n      activeHost: i === -1 ? clone(hostBoilerplate) : clone(this.state.hosts[i]),\n    });\n  }\n\n  updateActiveHost(host) {\n    host.sourceID = host.name.split(' ').join('-').toLowerCase();\n    this.setState({\n      ...this.state,\n      activeHost: host,\n    });\n  }\n\n  saveHost() {\n    if (!this.state.activeHost.validationURL || this.state.activeHost.validationURL === '')\n      return Alert.error('Please provide a validation URL');\n    const { hosts } = this.state;\n    if (this.state.activeIndex > -1)\n      hosts[this.state.activeIndex] = clone(this.state.activeHost);\n    else\n      hosts.push(clone(this.state.activeHost));\n    hosts.sort((a, b) => ([a.sourceID, b.sourceID].sort()[0] === a.sourceID ? -1 : 1));\n    Alert.info('Saving host...', { position: 'top' });\n    fetch('/api/ws/hosts', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(this.state.activeHost),\n    }).then((data) => {\n      if (data.status === 200) {\n        Alert.success('Host saved', { postiion: 'top' });\n        this.setState({\n          ...this.state,\n          activeIndex: -1,\n          activeHost: clone(hostBoilerplate),\n        });\n      }\n      else\n        Alert.error(`Host not saved, an error occured.${data.status > 400 && data.status < 410 ? 'host blocks scraping' : ''}`, { position: 'top' });\n    }).catch(console.error);\n    this.setState({\n      ...this.state,\n      hosts,\n    });\n  }\n\n  render() {\n    return (\n      <AdminPanelContext.Provider value={{\n        ...this.state,\n        getHosts: this.getHosts,\n        setActiveHost: this.setActiveHost,\n        updateActiveHost: this.updateActiveHost,\n        saveHost: this.saveHost,\n        testURLChange: this.testURLChange,\n        loadTestURL: this.loadTestURL,\n        clearActiveHost: this.clearActiveHost,\n        isWhitelisted: this.isWhitelisted,\n        scrapeURL: this.scrapeURL,\n        fetchNews: this.fetchNews,\n        getUrlCount: this.getUrlCount,\n        getSchedule: this.getSchedule,\n        addScheduleItem: this.addScheduleItem,\n        deleteScheduleItem: this.deleteScheduleItem,\n      }}>\n      {this.props.children}\n      </AdminPanelContext.Provider>\n    );\n  }\n}\n\nAdminPanelStore.propTypes = {\n  children: PropTypes.any,\n  hosts: PropTypes.any,\n};\n\nexport default AdminPanelStore;\n\nexport { AdminPanelContext };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/AdminPanelStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "hostBoilerplate",
    "memberof": "src/client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "src/client/components/admin/AdminPanelStore.js~hostBoilerplate",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/admin/AdminPanelStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "{\"body\": *, \"date\": *, \"exclude\": *, \"headlines\": *, \"name\": *, \"sourceID\": *, \"hostnames\": *, \"hostDeletions\": *, \"headlineDeletions\": *, \"bodyDeletions\": *, \"excludeDelections\": *, \"validationURL\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "clone",
    "memberof": "src/client/components/admin/AdminPanelStore.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/admin/AdminPanelStore.js~clone",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/admin/AdminPanelStore.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 105,
    "kind": "class",
    "name": "AdminPanelStore",
    "memberof": "src/client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/admin/AdminPanelStore.js",
    "importStyle": "AdminPanelStore",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#state",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "{\"hosts\": *, \"activeHost\": *, \"activeIndex\": *, \"testURL\": *, \"whitelist\": *, \"urlCount\": *, \"scheduleItems\": *}"
      ]
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "addScheduleItem",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#addScheduleItem",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "deleteScheduleItem",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#deleteScheduleItem",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "getSchedule",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#getSchedule",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "getUrlCount",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#getUrlCount",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "fetchNews",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#fetchNews",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      },
      {
        "name": "hsts",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "scrapeURL",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#scrapeURL",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "isWhitelisted",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#isWhitelisted",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "clearActiveHost",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#clearActiveHost",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "loadTestURL",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#loadTestURL",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "testURLChange",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#testURLChange",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [
      {
        "name": "testURL",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "getHosts",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#getHosts",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "setActiveHost",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#setActiveHost",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "i",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "updateActiveHost",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#updateActiveHost",
    "access": "public",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "params": [
      {
        "name": "host",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "saveHost",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#saveHost",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelStore#render",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "variable",
    "name": "AdminPanelContext",
    "memberof": "src/client/components/admin/AdminPanelStore.js",
    "static": true,
    "longname": "src/client/components/admin/AdminPanelStore.js~AdminPanelContext",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/admin/AdminPanelStore.js",
    "importStyle": "{AdminPanelContext}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/client/components/admin/MultiListInput.js",
    "content": "/**\n * @module Multi List Input\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Component class\n * @class MultiListInput\n * @extends Component\n */\nclass MultiListInput extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tempInput: '',\n    };\n    this.inputChange = this.inputChange.bind(this);\n  }\n\n  /**\n   * Update state when input onChange\n   *\n   * @method inputChange\n   * @param  {Object} e Event object\n   */\n  inputChange(e) {\n    this.setState({ tempInput: e.target.value });\n  }\n\n  /**\n   * Render the component\n   * @return {String} Component HTML\n   */\n  render() {\n    const {\n      activeHost,\n      title,\n      addButton,\n      emptyText,\n      propname,\n      propnameDel,\n      update,\n      newText,\n      delButton,\n      placeholder,\n      validate,\n    } = this.props;\n\n    if (!propname\n      || !activeHost\n      || !title\n      || !emptyText\n      || !addButton\n      || !newText\n      || !placeholder)\n      throw new Error('Error: MultiListInput not configured');\n\n    return (<React.Fragment>\n      <strong>{title}</strong><br />\n      <ul>\n        {activeHost[propname].length === 0 ? <i>{emptyText}</i> : activeHost[propname]\n          .map((val, i) => <li key={i}>{val}<button onClick={() => {\n            if (propnameDel)\n              activeHost[propnameDel].push(activeHost[propname][i]);\n            activeHost[propname].splice(i, 1);\n            if (update)\n              update({ ...activeHost });\n          }}>{delButton}</button></li>)}\n      </ul>\n      {newText}: <input\n        placeholder={placeholder}\n        value={this.state.tempInput}\n        onChange={this.inputChange} />\n      <button onClick={() => {\n        if (validate && !validate(this.state.tempInput))\n          return;\n        activeHost[propname].push(this.state.tempInput);\n        this.setState({ ...this.state, tempInput: '' });\n        if (update)\n          update({ ...activeHost });\n      }}>{addButton}</button><br />\n    </React.Fragment>);\n  }\n}\n\nMultiListInput.propTypes = {\n  activeHost: PropTypes.any,\n  addButton: PropTypes.any,\n  title: PropTypes.any,\n  emptyText: PropTypes.any,\n  propname: PropTypes.any,\n  propnameDel: PropTypes.any,\n  update: PropTypes.any,\n  newText: PropTypes.any,\n  delButton: PropTypes.any,\n  placeholder: PropTypes.any,\n  validate: PropTypes.any,\n};\n\nexport default MultiListInput;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/MultiListInput.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "class",
    "name": "MultiListInput",
    "memberof": "src/client/components/admin/MultiListInput.js",
    "static": true,
    "longname": "src/client/components/admin/MultiListInput.js~MultiListInput",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/admin/MultiListInput.js",
    "importStyle": "MultiListInput",
    "description": "Component class",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "MultiListInput"
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 139,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/MultiListInput.js~MultiListInput#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/admin/MultiListInput.js~MultiListInput",
    "static": false,
    "longname": "src/client/components/admin/MultiListInput.js~MultiListInput#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "{\"tempInput\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "inputChange",
    "memberof": "src/client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/MultiListInput.js~MultiListInput#inputChange",
    "access": "public",
    "description": "Update state when input onChange",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "inputChange"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event object"
      }
    ],
    "return": null
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/admin/MultiListInput.js~MultiListInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/MultiListInput.js~MultiListInput#render",
    "access": "public",
    "description": "Render the component",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Component HTML"
    },
    "params": []
  },
  {
    "__docId__": 144,
    "kind": "file",
    "name": "src/client/components/admin/Scraper.js",
    "content": "import React, { Component } from 'react';\nimport { AdminPanelContext } from './AdminPanelStore';\n\nconst months = ['January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'Desember'];\n\nclass Scraper extends Component {\n  render() {\n    const { testPage, activeHost } = this.context;\n    if (testPage === 1)\n      return 'Loading page...';\n    if (typeof testPage === 'string')\n      return testPage;\n    if (testPage) {\n      let headline = 'Error';\n      let body = 'Error';\n      let date = 'Error';\n      try {\n        let text = '';\n        if (activeHost.headlines.length > 0) {\n          for (let i = 0; i < activeHost.headlines.length; i++) {\n            text = testPage(activeHost.headlines[i]).text();\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            headline = text;\n        }\n        text = '';\n        if (activeHost.body.length) {\n          for (let i = 0; i < activeHost.body.length; i++) {\n            let sub = testPage(activeHost.body[i]);\n            activeHost.exclude.forEach((sel) => {\n              sub = sub.not(sel);\n            });\n            text = sub.text();\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            body = text;\n        }\n        text = '';\n        if (activeHost.date.function !== '') {\n          for (let i = 0; i < activeHost.date.sel.length; i++) {\n            if (activeHost.date.sel[i].attr === '')\n              text = testPage(activeHost.date.sel[i].sel).text();\n            else\n              text = testPage(activeHost.date.sel[i].sel).attr(activeHost.date.sel[i].attr);\n            if (text.length > 0)\n              break;\n          }\n          if (text.length > 0)\n            date = eval(activeHost.date.function)(text, months);\n        }\n      }\n      catch (e) {\n        console.log(e);\n        if (!date)\n          date = 'Error';\n      }\n      if (headline !== 'Error' || date !== 'Error' || body !== 'Error')\n        return <React.Fragment>\n          Headline: {headline}<br/>\n          Date: {date ? date.toLocaleString() : date}<br />\n          Main text:<br /><div className='scroll admin-scraper-body'>{body}</div>\n        </React.Fragment>;\n    }\n    if (testPage && this.context.activeIndex === -1)\n      return 'Page loaded, select a host or start creating a new definition';\n    return '';\n  }\n}\n\nScraper.contextType = AdminPanelContext;\n\nexport default Scraper;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/admin/Scraper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 145,
    "kind": "variable",
    "name": "months",
    "memberof": "src/client/components/admin/Scraper.js",
    "static": true,
    "longname": "src/client/components/admin/Scraper.js~months",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/admin/Scraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Scraper",
    "memberof": "src/client/components/admin/Scraper.js",
    "static": true,
    "longname": "src/client/components/admin/Scraper.js~Scraper",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/admin/Scraper.js",
    "importStyle": "Scraper",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/admin/Scraper.js~Scraper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/admin/Scraper.js~Scraper#render",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/client/components/dashboard/Dashboard.js",
    "content": "import React, { Component } from 'react';\nimport Card from '../Card';\nimport '../style/Dashboard.css';\nimport NewSearch from './NewSearch';\nimport WordCloud from './WordCloud';\nimport Header from '../Header';\n\nclass Dashboard extends Component {\n  render() {\n    return [\n      <Header key={1} class='dashboard_header' name = 'Dashboard'/>,\n      <div key={2} className='wrapper'>\n        <Card class='new_search' cName='new_search'>\n            <NewSearch />\n        </Card>\n        <Card class='wordcloud' cName='wordcloud'>\n            <WordCloud />\n        </Card>\n      </div>,\n    ];\n  }\n}\n\nexport default Dashboard;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/Dashboard.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "class",
    "name": "Dashboard",
    "memberof": "src/client/components/dashboard/Dashboard.js",
    "static": true,
    "longname": "src/client/components/dashboard/Dashboard.js~Dashboard",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/dashboard/Dashboard.js",
    "importStyle": "Dashboard",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/dashboard/Dashboard.js~Dashboard",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/Dashboard.js~Dashboard#render",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/client/components/dashboard/NewSearch.js",
    "content": "import React, { Component } from 'react';\nimport '../style/NewSearch.css';\nimport { FaTimes } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport Alert from 'react-s-alert';\nimport DatePickerInterval from '../DatePickerInterval';\nimport Checkbox from '../Checkbox';\nimport SearchButton from '../Button';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\nimport '../style/react_dates_overrides.css';\nimport { SearchContext } from './SearchStore';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst checkboxesEmotions = [\n  {\n    name: 'analysis_filter_emotions',\n    key: 'joy',\n    value: 'Joy',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'anger',\n    value: 'Anger',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'disgust',\n    value: 'Disgust',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'sadness',\n    value: 'Sadness',\n  },\n  {\n    name: 'analysis_filter_emotions',\n    key: 'fear',\n    value: 'Fear',\n  },\n];\n\nclass NewSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      checkedItemsNews: [],\n      checkedItemsEmotion: [],\n      show: false,\n      news_search: '',\n      search: '',\n      neutralThreshold: '0.2',\n    };\n    this.handleChangeCheckboxNews = this.handleChangeCheckboxNews.bind(this);\n    this.handleChangeCheckboxEmotion = this.handleChangeCheckboxEmotion.bind(this);\n    this.handleFilterClick = this.handleFilterClick.bind(this);\n    this.dateChange = this.dateChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  componentWillMount() {\n    this.context.getSources();\n  }\n\n  updateSearch(event) {\n    this.setState({ news_search: event.target.value });\n  }\n\n  handleFilterClick() {\n    const { buttonclicked } = this.state;\n    this.setState({ buttonclicked: !buttonclicked });\n  }\n\n  handleChecked() {\n    this.setState({\n      show: !this.state.show,\n      checkedItemsEmotion: [],\n    });\n  }\n\n  handleChangeCheckboxNews(e) {\n    const item = e.target.value;\n    const { checkedItemsNews } = this.state;\n    if (checkedItemsNews.indexOf(item) > -1)\n      checkedItemsNews.splice(checkedItemsNews.indexOf(item), 1);\n    else\n      checkedItemsNews.push(item);\n    this.setState({\n      ...this.state,\n      checkedItemsNews,\n    });\n  }\n\n  handleChangeCheckboxEmotion(e) {\n    const item = e.target.value;\n    const { checkedItemsEmotion } = this.state;\n    if (checkedItemsEmotion.indexOf(item) > -1)\n      checkedItemsEmotion.splice(checkedItemsEmotion.indexOf(item), 1);\n    else\n      checkedItemsEmotion.push(item);\n    this.setState({\n      ...this.state,\n      checkedItemsEmotion,\n    });\n  }\n\n\n  dateChange(startDate, endDate) {\n    this.setState({\n      ...this.state,\n      startDate,\n      endDate,\n    });\n  }\n\n  handleSearch(searchdata) {\n    if (!searchdata.search || searchdata.search === '' || searchdata.search.split(' ').filter(elem => elem !== '').length === 0)\n      return Alert.error('The provided search query is empty', {\n        position: 'top',\n        effect: 'stackslide',\n      });\n    searchdata.neutralThreshold = Number(searchdata.neutralThreshold);\n    this.context.getSearch(searchdata);\n    this.props.history.push('/result');\n  }\n\n  handleInput(event) {\n    this.setState({\n      ...this.state,\n      search: event.target.value,\n    });\n  }\n\n  render() {\n    const filterNews = this.context.sources.filter(\n      item => item.value.toLowerCase().indexOf(this.state.news_search.toLowerCase()) !== -1,\n    );\n    const { buttonclicked } = this.state;\n    const searchdata = this.state;\n    return (\n      <div className='content' >\n        <div className='container_top'>\n          <div className='title'>New Search</div>\n        </div>\n        <hr style = {{ margin: '0px', opacity: '0.2' }} />\n        {!buttonclicked\n          ? (<div className='container_main'>\n          <div className='flexContainer input'>\n            <input className='searchfield' type='text' placeholder='  Search...' onChange={this.handleInput} onKeyDown={(e) => {\n              if (e.keyCode === 13)\n                this.handleSearch(searchdata);\n            }}></input>\n          </div>\n          <div className='flexContainer buttons'>\n            <button className='add_filter' onClick={this.handleFilterClick}>Add filters</button>\n            <SearchButton onClick={() => this.handleSearch(searchdata)} title='Search'/>\n          </div>\n        </div>)\n          : (\n            <div className='container_filter'>\n              <div className = 'flexContainer input_filter'>\n                <input className ='searchfield_filter' type='text' placeholder='  Search...' onChange={this.handleInput} onKeyDown={(e) => {\n                  if (e.keyCode === 13)\n                    this.handleSearch(searchdata);\n                }}></input>\n                <SearchButton onClick={() => this.handleSearch(searchdata)} title='Search' />\n              </div>\n                <hr style = {{ margin: '0px', opacity: '0.2' }} />\n                <div className = 'exit_filter' onClick={this.handleFilterClick}> <FaTimes /> </div>\n              <div id='filter' className='flexContainer apply_filter'>\n                <div className='filter_analysis'>\n                  <div className='title_Analysis'> Analysis </div>\n                  <form>\n                    <div className='analysis-check'>\n                      <label>\n                        <input\n                          type='radio'\n                          name='analysis_filter'\n                          value='sentiment'\n                          className='analysis-check-input'\n                          checked={this.state.show === false}\n                          onChange={() => this.handleChecked()}\n                        />\n                         Sentiment\n                      </label>\n                    </div>\n                    {!this.state.show ? <div>Neutral sentiment threshold: {`\\xB1 ${this.state.neutralThreshold}`}<br />\n                      <input\n                        type='range'\n                        min={0}\n                        max={20}\n                        value={this.state.neutralThreshold * 20}\n                        onChange={(e) => {\n                          this.setState({\n                            ...this.state,\n                            neutralThreshold: e.target.value / 20,\n                          });\n                        }} />\n                      </div> : null}\n                    <div className='analysis-check'>\n                    <div className='checkbox'>\n                      <label>\n                        <input\n                          type='radio'\n                          name='analysis_filter'\n                          value='emotion'\n                          className='analysis-check-input'\n                          checked={this.state.show === true}\n                          onChange={() => this.handleChecked()}\n                        />\n                         Emotion\n                      </label>\n                      <br />\n                      <div className='analysis-check-input-checkbox'>\n                        {\n                        this.state.show\n                          ? checkboxesEmotions.map(item => (\n                            <div key={item.key}>\n                              <Checkbox\n                                id={item.key}\n                                value={item.value}\n                                checked={this.state.checkedItemsEmotion.indexOf(item.key) > -1}\n                                onChange={e => this.handleChangeCheckboxEmotion(e)}\n                                className='checkbox_emotion'\n                                name='emotion'\n                              />\n                            </div>\n                          ))\n                          : null\n                        }\n                      </div>\n                      </div>\n                    </div>\n                  </form>\n                </div>\n                <div className='filter_source'>\n                  <div className='title_Analysis'> News Source </div>\n                    <div>\n                      <input type='text'\n                        className='searchNews'\n                        value={this.state.news_search}\n                        onChange={this.updateSearch.bind(this)}\n                        placeholder=' News Source...'\n                      />\n                      {filterNews.map(item => <Checkbox\n                        key={item.key}\n                        id={item.key}\n                        value={item.value}\n                        checked={this.state.checkedItemsNews.indexOf(item.key) > -1}\n                        onChange={e => this.handleChangeCheckboxNews(e)}\n                      />)}\n                    </div>\n                  </div>\n                <div className='filter_time'>\n                  <div className='title_Analysis'> Date Interval </div>\n                  <DatePickerInterval change={dates => this.setState({\n                    ...this.state,\n                    ...dates,\n                  })} style={'../style/DatePickerInterval.css'} />\n                    <p>Choose from and to date</p>\n                </div>\n              </div>\n            </div>\n          )\n        }\n      </div>);\n  }\n}\n\nNewSearch.propTypes = {\n  checkboxesNews: PropTypes.any,\n  searchdata: PropTypes.any,\n  history: PropTypes.any,\n};\n\nNewSearch.contextType = SearchContext;\n\nexport default withRouter(NewSearch);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/NewSearch.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "variable",
    "name": "checkboxesEmotions",
    "memberof": "src/client/components/dashboard/NewSearch.js",
    "static": true,
    "longname": "src/client/components/dashboard/NewSearch.js~checkboxesEmotions",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/dashboard/NewSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 153,
    "kind": "class",
    "name": "NewSearch",
    "memberof": "src/client/components/dashboard/NewSearch.js",
    "static": true,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/dashboard/NewSearch.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 154,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 155,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#state",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{\"checkedItemsNews\": *, \"checkedItemsEmotion\": *, \"show\": *, \"news_search\": *, \"search\": *, \"neutralThreshold\": string}"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "updateSearch",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#updateSearch",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "handleFilterClick",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleFilterClick",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "handleChecked",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleChecked",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "handleChangeCheckboxNews",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleChangeCheckboxNews",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "handleChangeCheckboxEmotion",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleChangeCheckboxEmotion",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "dateChange",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#dateChange",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "startDate",
        "types": [
          "*"
        ]
      },
      {
        "name": "endDate",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "handleSearch",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleSearch",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "params": [
      {
        "name": "searchdata",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "handleInput",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#handleInput",
    "access": "public",
    "description": null,
    "lineNumber": 129,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/dashboard/NewSearch.js~NewSearch",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/NewSearch.js~NewSearch#render",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/client/components/dashboard/SearchStore.js",
    "content": "import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchContext = React.createContext();\n\nclass SearchStore extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: [],\n      searchType: '',\n      sources: [],\n    };\n    this.getSearch = this.getSearch.bind(this);\n    this.getWords = this.getWords.bind(this);\n    this.getSources = this.getSources.bind(this);\n    this.getEmotionalTone = this.getEmotionalTone.bind(this);\n    this.getEmotionalToneSentiment = this.getEmotionalToneSentiment.bind(this);\n    this.computeSearch = this.computeSearch.bind(this);\n  }\n\n  getSearch(opts) {\n    if (opts.startDate && opts.startDate.getTime)\n      opts.startDate = opts.startDate.getTime();\n    if (opts.endDate && opts.endDate.getTime)\n      opts.endDate = opts.endDate.getTime();\n    localStorage.setItem('prev-search', JSON.stringify(opts));\n    if (!opts.startDate)\n      opts.startDate = 0;\n    if (!opts.endDate)\n      opts.endDate = new Date().getTime();\n    this.setState({\n      ...this.state, search: undefined, searchOpts: opts, searchType: opts.show ? 'emotion' : 'sentiment',\n    });\n    const sources = opts.checkedItemsNews.join(',');\n    fetch(`/api/search?q=${opts.search}${sources.length > 0 ? `&sources=${sources}` : ''}${opts.startDate ? `&intervalStart=${opts.startDate}` : ''}${opts.endDate ? `&intervalEnd=${opts.endDate}` : ''}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    }).then(response => response.json()).then((data) => {\n      this.computeSearch(data, opts);\n    }).catch(console.error);\n  }\n\n  computeSearch(data, opts) {\n    const search = JSON.parse(JSON.stringify(data));\n    search.docs = search.docs\n      .filter(doc => (opts.startDate ? doc.date >= opts.startDate : true)\n          && (opts.endDate ? doc.date <= opts.endDate : true));\n    if (search.docs.length === 0) {\n      this.setState({\n        ...this.state,\n        search: data,\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n    else if (!opts.show) {\n      const colors = ['#5EA3DB', '#FF5C54', '#AFBE8F'];\n      const average = search.docs.reduce((acc, val) => {\n        let sentiment = val.analysis.sentiment;\n        if (!sentiment) {\n          sentiment = {\n            score: 0,\n            label: 'neutral',\n          };\n        }\n        let label = 'neutral';\n        if (sentiment.score > opts.neutralThreshold)\n          label = 'positive';\n        else if (sentiment.score < -opts.neutralThreshold)\n          label = 'negative';\n        acc.sentiment[label]++;\n        return acc;\n      }, {\n        sentiment: { positive: 0, negative: 0, neutral: 0 },\n      });\n\n      Object.keys(average).forEach((key) => {\n        if (typeof average[key] === 'number')\n          average[key] /= search.docs.length;\n        else\n          Object.keys(average[key]).forEach((key2) => {\n            average[key][key2] /= search.docs.length;\n          });\n      });\n      this.setState({\n        ...this.state,\n        graphData: Object.keys(average.sentiment ? average.sentiment : {}).map(\n          (key, i) => (\n            {\n              title: key,\n              value: Math.floor(average.sentiment[key] * 100),\n              color: colors[i],\n            }),\n        ),\n        search: data,\n        emotionalTone: this.getEmotionalToneSentiment(search, opts),\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n    else if (opts.show) {\n      const colors = ['#D3C0CD', '#9FAF90', '#3A405A', '#3D70B2', '#E26D5A'];\n      const average = search.docs.reduce((acc, val) => {\n        let emotion = val.analysis.emotion;\n        if (!emotion) {\n          emotion = {\n            anger: 0,\n            joy: 0,\n            disgust: 0,\n            fear: 0,\n            sadness: 0,\n          };\n        }\n        Object.keys(emotion).forEach((k) => {\n          acc[k] += emotion[k];\n        });\n        acc.sentiment[val.analysis.sentiment.label]++;\n        return acc;\n      }, {\n        sentiment: { positive: 0, negative: 0, neutral: 0 },\n        joy: 0,\n        disgust: 0,\n        fear: 0,\n        sadness: 0,\n        anger: 0,\n      });\n\n      Object.keys(average).forEach((key) => {\n        if (typeof average[key] === 'number')\n          average[key] /= search.docs.length;\n        else\n          Object.keys(average[key]).forEach((key2) => {\n            average[key][key2] /= search.docs.length;\n          });\n      });\n      this.setState({\n        ...this.state,\n        graphData: Object.keys(average).filter(e => e !== 'sentiment').map(\n          (key, i) => ({ title: key, value: Math.floor(average[key] * 100), color: colors[i] }),\n        ),\n        search: data,\n        emotionalTone: this.getEmotionalTone(search),\n        searchOpts: opts,\n        searchType: opts.show ? 'emotion' : 'sentiment',\n      });\n    }\n  }\n\n  getSources() {\n    fetch('/api/search/sources').then(res => res.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        sources: data,\n      });\n    });\n  }\n\n  getWords(count) {\n    if (!count)\n      count = 30;\n    fetch(`/api/wordcloud?length=${count}`).then(res => res.json()).then((data) => {\n      this.setState({\n        ...this.state,\n        words: data.map(elem => ({\n          value: elem.key,\n          count: elem.value,\n        })),\n      });\n    });\n  }\n\n  getEmotionalTone(search) {\n    const sortArr = search.docs.sort(\n      (a, b) => a.date - b.date,\n    ).filter(a => a.date > 0).map((element) => {\n      const date = new Date(element.date);\n      date.setHours(12);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      element.date = date.getTime();\n      return element;\n    });\n    const days = {};\n    sortArr.forEach((element) => {\n      if (days[element.date])\n        days[element.date].push(element);\n      else\n        days[element.date] = [element];\n    });\n    const ret = [];\n    Object.keys(days).forEach((key, i) => {\n      const emotions = days[key].reduce((acc, val) => {\n        const emotion = val.analysis.emotion;\n        if (!emotion)\n          return acc;\n        Object.keys(acc).forEach((k) => {\n          acc[k].perc += emotion[k];\n        });\n        return acc;\n      }, {\n        anger: { perc: 0 },\n        joy: { perc: 0 },\n        disgust: { perc: 0 },\n        fear: { perc: 0 },\n        sadness: { perc: 0 },\n      });\n      Object.keys(emotions).forEach((k) => {\n        emotions[k].perc /= days[key].length;\n        emotions[k].perc *= 1000;\n        emotions[k].perc = Math.round(emotions[k].perc);\n        emotions[k].perc /= 10;\n      });\n      ret.push({\n        id: i,\n        date: new Date(Number(key)).toLocaleDateString(),\n        emotions,\n        time: new Date(Number(key)).getTime(),\n      });\n    });\n    return ret;\n  }\n\n  getEmotionalToneSentiment(search, opts) {\n    const sortArr = search.docs.sort(\n      (a, b) => a.date - b.date,\n    ).filter(a => a.date > 0).map((element) => {\n      const date = new Date(element.date);\n      date.setHours(12);\n      date.setMinutes(0);\n      date.setSeconds(0);\n      date.setMilliseconds(0);\n      element.date = date.getTime();\n      return element;\n    });\n    const days = {};\n    sortArr.forEach((element) => {\n      if (days[element.date])\n        days[element.date].push(element);\n      else\n        days[element.date] = [element];\n    });\n    const ret = Object.keys(days).map((key) => {\n      const sentiments = days[key].reduce((acc, val) => {\n        const sentiment = val.analysis.sentiment;\n        if (!sentiment)\n          return acc;\n        if (sentiment.score > opts.neutralThreshold)\n          acc.positive.score++;\n        if (sentiment.score > -opts.neutralThreshold)\n          acc.neutral.score++;\n        else\n          acc.negative.score++;\n        return acc;\n      }, {\n        negative: { score: 0 },\n        neutral: { score: 0 },\n        positive: { score: 0 },\n      });\n      return { sentiments, key };\n    });\n    return ret.map((val, i) => ({\n      id: i,\n      date: new Date(Number(val.key)).toLocaleDateString(),\n      sentiments: val.sentiments,\n      time: new Date(Number(val.key)).getTime(),\n    }));\n  }\n\n  render() {\n    return (\n      <SearchContext.Provider value={{\n        ...this.state,\n        getSearch: this.getSearch,\n        getWords: this.getWords,\n        getSources: this.getSources,\n        getEmotionalTone: this.getEmotionalTone,\n        getEmotionalToneSentiment: this.getEmotionalToneSentiment,\n        computeSearch: this.computeSearch,\n      }}>\n      {this.props.children}\n      </SearchContext.Provider>\n    );\n  }\n}\n\nSearchStore.propTypes = {\n  children: PropTypes.any,\n};\n\nexport default SearchStore;\n\nexport { SearchContext };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/SearchStore.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "SearchStore",
    "memberof": "src/client/components/dashboard/SearchStore.js",
    "static": true,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/dashboard/SearchStore.js",
    "importStyle": "SearchStore",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"words\": *, \"searchType\": *, \"sources\": *}"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "getSearch",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#getSearch",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "computeSearch",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#computeSearch",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getSources",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#getSources",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "getWords",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#getWords",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "count",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "getEmotionalTone",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#getEmotionalTone",
    "access": "public",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "params": [
      {
        "name": "search",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getEmotionalToneSentiment",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#getEmotionalToneSentiment",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "search",
        "types": [
          "*"
        ]
      },
      {
        "name": "opts",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/dashboard/SearchStore.js~SearchStore",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchStore#render",
    "access": "public",
    "description": null,
    "lineNumber": 273,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "variable",
    "name": "SearchContext",
    "memberof": "src/client/components/dashboard/SearchStore.js",
    "static": true,
    "longname": "src/client/components/dashboard/SearchStore.js~SearchContext",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/dashboard/SearchStore.js",
    "importStyle": "{SearchContext}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "src/client/components/dashboard/WordCloud.js",
    "content": "import React, { Component } from 'react';\nimport '../style/WordCloud.css';\nimport { TagCloud } from 'react-tagcloud';\nimport { withRouter } from 'react-router';\nimport PropTypes from 'prop-types';\nimport { SearchContext } from './SearchStore';\n\nclass WordCloud extends Component {\n  constructor(props) {\n    super(props);\n    this.performSearchOnClick = this.performSearchOnClick.bind(this);\n  }\n\n  componentWillMount() {\n    let count = 30;\n    if (window.screen.width >= 550)\n      count = 50;\n    if (window.screen.width >= 2000)\n      count = 70;\n    this.context.getWords(count);\n  }\n\n  performSearchOnClick(searchword) {\n    const opts = {\n      checkedItemsNews: [],\n      checkedItemsEmotion: [],\n      show: false,\n      startDate: 0,\n      endDate: new Date().getTime(),\n      news_search: '',\n      search: searchword,\n      neutralThreshold: 0.2,\n    };\n    this.context.getSearch(opts);\n    this.props.history.push('/result');\n  }\n\n  render() {\n    const colorOpinions = {\n      luminosity: 'light',\n      hue: 'blue',\n    };\n    return (\n      <SearchContext.Consumer>\n      {({ words }) => (\n        <TagCloud\n          minSize={18}\n          maxSize={45}\n          tags={words}\n          className='tag-cloud clickable'\n          colorOptions= {colorOpinions}\n          onClick={tag => this.performSearchOnClick(tag.value)}\n        />)\n      }\n      </SearchContext.Consumer>\n    );\n  }\n}\n\nWordCloud.propTypes = {\n  history: PropTypes.any,\n};\n\nWordCloud.contextType = SearchContext;\n\n\nexport default withRouter(WordCloud);\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/dashboard/WordCloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "class",
    "name": "WordCloud",
    "memberof": "src/client/components/dashboard/WordCloud.js",
    "static": true,
    "longname": "src/client/components/dashboard/WordCloud.js~WordCloud",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/dashboard/WordCloud.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 192,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/WordCloud.js~WordCloud#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/WordCloud.js~WordCloud#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "performSearchOnClick",
    "memberof": "src/client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/WordCloud.js~WordCloud#performSearchOnClick",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "searchword",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/dashboard/WordCloud.js~WordCloud",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/dashboard/WordCloud.js~WordCloud#render",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "file",
    "name": "src/client/components/result/NewsArticle.js",
    "content": "import React, { Component } from 'react';\nimport '../style/NewsArticle.css';\nimport Proptypes from 'prop-types';\nimport ProgressBar from './graph/ProgressbarGraph';\n\nclass NewsArticle extends Component {\n  render() {\n    const {\n      title, newssource, domFeeling, date, feelings, onClick,\n    } = this.props;\n\n    return (\n      <div className='newssource'>\n        <div className='newsarticle_date'>{ date }</div>\n        <div className='newsarticle_title'>{ title }</div>\n        <div className='newsarticle_newssource'><span>News Source: </span>{ newssource }</div>\n        <div className='newsarticle_highest_feeling'>Most prominent feeling:  <span className='newsarticle_highest_feeling_text'>{ domFeeling }</span></div>\n        <br />\n        <div className='newsarticle_emotions'>\n          <div className='row'>\n          Joy: <br /><ProgressBar\n            perc={ feelings.joy * 100 ? feelings.joy * 100 : 0 }\n            color={ feelings.joy * 100 ? 'D3C0CD' : 0 }\n          />\n          Anger: <br /><ProgressBar\n            perc={ feelings.anger * 100 ? feelings.anger * 100 : 0 }\n            color={ feelings.anger * 100 ? 'E26D5A' : 0 }\n          />\n          Disgust: <br /><ProgressBar\n            perc={ feelings.disgust * 100 ? feelings.disgust * 100 : 0 }\n            color={ feelings.disgust * 100 ? '9FAF90' : 0 }\n          />\n          Sad: <br /><ProgressBar\n            perc={ feelings.sadness * 100 ? feelings.sadness * 100 : 0 }\n            color={ feelings.sadness * 100 ? '3D70B2' : 0 }\n          />\n          Fear: <br /><ProgressBar\n            perc={ feelings.fear * 100 ? feelings.fear * 100 : 0 }\n            color={ feelings.fear * 100 ? '3A405A' : 0 }\n          />\n          </div>\n          <br />\n        </div>\n        <button onClick = { onClick } className='newsarticle_button to_article'>To Article</button>\n        <br />\n        <hr />\n      </div>\n    );\n  }\n}\n\nNewsArticle.propTypes = {\n  date: Proptypes.any,\n  title: Proptypes.any,\n  newssource: Proptypes.any,\n  domFeeling: Proptypes.any,\n  emotions: Proptypes.any,\n  feelings: Proptypes.any,\n  persProgress: Proptypes.any,\n  onClick: Proptypes.any,\n};\n\nexport default NewsArticle;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NewsArticle.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 198,
    "kind": "class",
    "name": "NewsArticle",
    "memberof": "src/client/components/result/NewsArticle.js",
    "static": true,
    "longname": "src/client/components/result/NewsArticle.js~NewsArticle",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/NewsArticle.js",
    "importStyle": "NewsArticle",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/NewsArticle.js~NewsArticle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/NewsArticle.js~NewsArticle#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "file",
    "name": "src/client/components/result/NewsArticleSentiment.js",
    "content": "import React, { Component } from 'react';\nimport Proptypes from 'prop-types';\nimport ProgressBar from './graph/ProgressbarGraph';\nimport '../style/NewsArticleSentiment.css';\n\nclass NewsArticle extends Component {\n  render() {\n    const {\n      title, newssource, domSentiment, date, sentiments, onClick,\n    } = this.props;\n\n    return (\n      <div className='newssource'>\n        <div className='newsarticle_date'>{ date }</div>\n        <div className='newsarticle_title'>{ title }</div>\n        <div className='newsarticle_newssource'><span>News Source: </span>{ newssource }</div>\n        <div className='newsarticle_highest_sentiment'>Most prominent sentiment:  <span className='newsarticle_highest_sentiment_text'>{ domSentiment }</span></div>\n        <br />\n        <div className='newsarticle_sentiment'>\n          <div className='row'>\n          Negative: <br /><ProgressBar\n            perc={ sentiments.label === 'negative' ? -sentiments.score * 100 : 0 }\n            color={ sentiments.label ? 'FF5C54' : 0 }\n          />\n          Neutral: <br /><ProgressBar\n            perc={ sentiments.label === 'neutral' ? 100 : 0 }\n            color={ sentiments.label ? 'AFBE8F' : 0 }\n          />\n          Positive: <br /><ProgressBar\n            perc={ sentiments.label === 'positive' ? sentiments.score * 100 : 0 }\n            color={ sentiments.label ? '5EA3DB' : 0 }\n          />\n          </div>\n          <br />\n        </div>\n        <button onClick = { onClick } className='newsarticle_button to_article'>To Article</button>\n        <br />\n        <hr />\n      </div>\n    );\n  }\n}\n\nNewsArticle.propTypes = {\n  date: Proptypes.any,\n  title: Proptypes.any,\n  newssource: Proptypes.any,\n  domSentiment: Proptypes.any,\n  sentiments: Proptypes.any,\n  persProgress: Proptypes.any,\n  onClick: Proptypes.any,\n};\n\nexport default NewsArticle;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NewsArticleSentiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 201,
    "kind": "class",
    "name": "NewsArticle",
    "memberof": "src/client/components/result/NewsArticleSentiment.js",
    "static": true,
    "longname": "src/client/components/result/NewsArticleSentiment.js~NewsArticle",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/NewsArticleSentiment.js",
    "importStyle": "NewsArticle",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/NewsArticleSentiment.js~NewsArticle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/NewsArticleSentiment.js~NewsArticle#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/client/components/result/NoResult.js",
    "content": "import React, { Component } from 'react';\nimport Card from '../Card';\nimport { SearchContext } from '../dashboard/SearchStore';\nimport Header from '../Header';\n\nclass NoResult extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Header class='result_header' name='Sentiment Analysis' />\n        <Card>\n          <p>Your search: {this.context.searchOpts.search} - did not match any documents</p>\n          <h3>Suggestions:</h3>\n          <ul>\n            <li>Make sure that all words are spelled correctly.</li>\n            <li>Try different keywords</li>\n            <li>Try more general keywords</li>\n            <li>Consult wordcloud for type of keywords searchable</li>\n          </ul>\n        </Card>\n      </React.Fragment>\n    );\n  }\n}\n\nNoResult.contextType = SearchContext;\n\nexport default NoResult;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/NoResult.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "NoResult",
    "memberof": "src/client/components/result/NoResult.js",
    "static": true,
    "longname": "src/client/components/result/NoResult.js~NoResult",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/NoResult.js",
    "importStyle": "NoResult",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/NoResult.js~NoResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/NoResult.js~NoResult#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "file",
    "name": "src/client/components/result/Parameters.js",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport '../style/Parameters.css';\nimport Button from '../Button';\n\nclass Paramteres extends Component {\n  render() {\n    const {\n      searchtext,\n    } = this.props;\n    const arr = ['sentiment', 'timeinterval', 'amount', 'threshold'];\n    return (\n      <div className='parameters'>\n        <div><span className='search_text'>You searched for:</span> { searchtext }</div>\n        <ul className='applied_filters'>\n          {arr.filter((e => this.props[e])).map(e => <li key={e}>{this.props[e]}</li>)}\n        </ul>\n        <Button\n          title={this.props.emotion ? 'View sentiment' : 'View emotion'}\n          onClick={this.props.emotionClick} />\n      </div>\n    );\n  }\n}\n\nParamteres.propTypes = {\n  searchtext: PropTypes.any,\n  sentiment: PropTypes.any,\n  timeinterval: PropTypes.any,\n  amount: PropTypes.any,\n  threshold: PropTypes.any,\n  emotion: PropTypes.any,\n  emotionClick: PropTypes.any,\n};\n\nexport default Paramteres;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/Parameters.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 207,
    "kind": "class",
    "name": "Paramteres",
    "memberof": "src/client/components/result/Parameters.js",
    "static": true,
    "longname": "src/client/components/result/Parameters.js~Paramteres",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/Parameters.js",
    "importStyle": "Paramteres",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/Parameters.js~Paramteres",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Parameters.js~Paramteres#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "file",
    "name": "src/client/components/result/Result.js",
    "content": "import React, { Component } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport stt from 'search-text-tokenizer';\nimport Alert from 'react-s-alert';\nimport Card from '../Card';\nimport Header from '../Header';\nimport DatePickerInterval from '../DatePickerInterval';\nimport DonutChart from './graph/DonutChart';\nimport Parameteres from './Parameters';\nimport '../style/Result.css';\nimport NewsArticle from './NewsArticle';\nimport Dropdown from '../Dropdown';\nimport Checkbox from '../Checkbox';\nimport Button from '../Button';\nimport { SearchContext } from '../dashboard/SearchStore';\n\nconst classNameMap = (name) => {\n  switch (name) {\n    case 'anger':\n      return 'anger';\n    case 'sadness':\n      return 'sadness';\n    case 'fear':\n      return 'fear';\n    case 'joy':\n      return 'joy';\n    case 'disgust':\n      return 'disgust';\n    default:\n      return [];\n  }\n};\n\nconst coloranger = '#E26D5A';\nconst colorfear = '#3A405A';\nconst colorjoy = '#D3C0CD';\nconst colorsad = '#3D70B2';\nconst colordisgust = '#9FAF90';\n\nclass Result extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      averageArray: [],\n      checkedEmotion: [],\n      etSelection: false,\n    };\n    this.handleCheckedEmotion = this.handleCheckedEmotion.bind(this);\n  }\n\n  componentWillMount() {\n    if (!this.context.search && localStorage.getItem('prev-search'))\n      this.context.getSearch(localStorage.getItem('prev-search'));\n    this.setState({\n      ...this.state,\n      checkedEmotion: [...this.context.searchOpts.checkedItemsEmotion],\n    });\n  }\n\n  makeRedirect(url) {\n    if (typeof url !== 'undefined') {\n      window.open(url, '_blank');\n    }\n  }\n\n  handleCheckedEmotion(emotion) {\n    const item = emotion.target.value;\n    const isChecked = emotion.target.checked;\n    const cs = this.state.checkedEmotion;\n    if (isChecked && cs.indexOf(item) === -1)\n      cs.push(item);\n    else if (!isChecked && cs.indexOf(item) > -1)\n      cs.splice(cs.indexOf(item), 1);\n    this.setState({ ...this.state, checkedEmotion: cs });\n  }\n\n  dateChange(date) {\n    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n    let startDate = !date || !date.startDate ? this.state.startDate : date.startDate;\n    let endDate = !date || !date.endDate ? this.state.endDate : date.endDate;\n    if (!date) {\n      startDate = new Date(0);\n      endDate = new Date();\n    }\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (!startDate.getTime)\n      startDate = new Date(startDate);\n    if (!endDate.getTime)\n      endDate = new Date(endDate);\n    startDate.setHours(0);\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    endDate.setHours(23);\n    endDate.setMinutes(59);\n    endDate.setSeconds(59);\n    startDate = startDate.getTime();\n    endDate = endDate.getTime();\n    if (date && date.startDate && this.context.search.docs[this.context.search.docs.length - 1]\n      .date - (24 * 60 * 60 * 1000) > startDate && this.state.startDate)\n      Alert.warning('Provided \"from\" date is outside current search results', { position: 'top' });\n    else if (date && date.endDate && this.context.search.docs[0]\n      .date + (24 * 60 * 60 * 1000) < endDate && this.state.endDate)\n      Alert.warning('Provided \"to\" date is outside current search results', { position: 'top' });\n    opts.startDate = startDate;\n    opts.endDate = endDate;\n    this.context.computeSearch(this.context.search, opts);\n  }\n\n  render() {\n    let { startDate, endDate } = this.state;\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (startDate.getTime)\n      startDate = startDate.getTime();\n    if (endDate.getTime)\n      endDate = endDate.getTime();\n    const emotionSearch = this.state.checkedEmotion.length === 0\n      ? this.context.search.docs : this.context.search.docs\n        .filter(item => item.analysis.emotion\n          && this.state.checkedEmotion.indexOf(Object.keys(item.analysis.emotion)\n            .sort((a, b) => Math.abs(item.analysis.emotion[b])\n              - Math.abs(item.analysis.emotion[a]))[0]) > -1);\n    const filterEmotion = ((startDate || endDate)\n      ? emotionSearch.filter(doc => (startDate ? doc.date >= startDate : true)\n        && (endDate ? doc.date <= endDate : true)) : emotionSearch)\n      .filter(item => item.analysis.emotion);\n    return (\n      <React.Fragment>\n        <Header class='result_header' name='Sentiment Analysis' />\n        <div className = 'result'>\n          <div className = 'result_filter'>\n              <div className= 'filter_bar'>\n                <div className='test'>\n                  <Dropdown className='clickable' titleList='Emotion' items={\n                    this.context.graphData.map((item, i) => <Checkbox\n                        key={i}\n                        id={item.title}\n                        value={item.title[0].toUpperCase() + item.title.slice(1)}\n                        checked={this.state.checkedEmotion.indexOf(item.title) > -1}\n                        onChange={emotion => this.handleCheckedEmotion(emotion)}\n                      />)\n                  } />\n                  <Dropdown className='clickable' titleList='Date Interval' items={<DatePickerInterval change={(date) => {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: date.startDate === null ? undefined : date.startDate,\n                      endDate: date.endDate === null ? undefined : date.endDate,\n                    });\n                    this.dateChange({\n                      startDate: date.startDate === null\n                        ? this.context.search.docs[this.context.search.docs.length - 1].date\n                        : date.startDate,\n                      endDate: date.endDate === null\n                        ? this.context.search.docs[0].date\n                        : date.endDate,\n                    });\n                  }} startDate={this.state.startDate ? new Date(this.state.startDate) : undefined}\n                  endDate={this.state.endDate ? new Date(this.state.endDate) : undefined} />} />\n                </div>\n                <div>\n                  <Button className='exportpdf' title='Print result' onClick={() => {\n                    window.print();\n                  }} />\n                </div>\n              </div>\n          </div>\n\n          <div className = 'result_parameters'>\n            <Card>\n              <div className='title_param'>Parameters</div>\n              <div className='param_card'>\n                <Parameteres\n                  searchtext={stt(this.context.searchOpts.search.replace(/[^a-zA-Z\\s-]/g, ''))\n                    .reduce((acc, val) => {\n                      if (acc !== '')\n                        acc += ', ';\n                      if (val.exclude)\n                        acc += `-${val.term}`;\n                      else if (val.phrase)\n                        acc += `\"${val.term}\"`;\n                      else\n                        acc += val.term;\n                      return acc;\n                    }, '')}\n                  sentiment={`Emotion: ${this.state.checkedEmotion.length === 0\n                    ? 'Joy, Anger, Disgust, Sadness, Fear'\n                    : `${this.state.checkedEmotion.slice(0, -1)\n                      .map(s => s[0].toUpperCase() + s.slice(1)).join(', ')}${this.state.checkedEmotion.slice(0, -1).length > 0\n                      ? ', '\n                      : ''}${this.state.checkedEmotion.slice(-1).map(s => s[0].toUpperCase() + s.slice(1))[0]}`}`}\n                  timeinterval={`Date Interval: ${new Date(this.state.startDate ? this.state.startDate : filterEmotion[filterEmotion.length - 1].date).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`}\n                  amount={`Amount: ${filterEmotion.length}`}\n                  emotion={this.context.searchOpts.show}\n                  emotionClick={() => {\n                    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                    opts.show = !opts.show;\n                    this.context.computeSearch(this.context.search, opts);\n                  }}\n                />\n              </div>\n            </Card>\n          </div>\n\n            {this.context.graphData.map((element, i) => {\n              const name = classNameMap(element.title);\n              return (<div key={i} align=\"center\" className = {`result_graphs_${name} clickable clickable-color`}>\n                <Card onClick={() => {\n                  if (this.state.checkedEmotion[0] === name\n                    && this.state.checkedEmotion.length === 1)\n                    return this.setState({ ...this.state, checkedEmotion: [] });\n                  this.setState({\n                    ...this.state,\n                    checkedEmotion: [name],\n                  });\n                }}>\n                  <div className='graphs' >\n                    <DonutChart chart={`${name}_chart`} label={`label_${name}`} name={element.title} data={[element]}/>\n                  </div>\n                </Card>\n              </div>);\n            })}\n\n          <div className = 'result_graph'>\n            <Card>\n            <div className='emotionalTone'>Emotional Tone</div>\n              <LineChart\n                width={350}\n                height={300}\n                data={this.context.emotionalTone}\n                margin={{\n                  top: 20,\n                }} onClick={(data) => {\n                  if (this.state.etSelection) {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: undefined,\n                      endDate: undefined,\n                    });\n                    this.dateChange();\n                  }\n                  else if (data\n                    && data.activePayload\n                    && data.activePayload[0]\n                    && data.activePayload[0].payload\n                    && data.activePayload[0].payload.time) {\n                    const sd = new Date(data.activePayload[0].payload.time);\n                    const ed = new Date(data.activePayload[0].payload.time);\n                    sd.setHours(0);\n                    sd.setMinutes(0);\n                    sd.setSeconds(0);\n                    ed.setHours(23);\n                    ed.setMinutes(59);\n                    ed.setSeconds(59);\n                    this.setState({\n                      ...this.state,\n                      etSelection: true,\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                    this.dateChange({\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                  }\n                }}>\n                <XAxis dataKey=\"date\"/>\n                <YAxis/>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <Tooltip/>\n                <Legend />\n                <Line type=\"monotone\" name=\"Anger\" dataKey=\"emotions.anger.perc\" stroke={coloranger} activeDot={{ r: 8 }}/>\n                <Line type=\"monotone\" name=\"Joy\" dataKey=\"emotions.joy.perc\" stroke={colorjoy} />\n                <Line type=\"monotone\" name=\"Fear\" dataKey=\"emotions.fear.perc\" stroke={colorfear} />\n                <Line type=\"monotone\" name=\"Sadness\" dataKey=\"emotions.sadness.perc\" stroke={colorsad} />\n                <Line type=\"monotone\" name=\"Disgust\" dataKey=\"emotions.disgust.perc\" stroke={colordisgust} />\n              </LineChart>\n            </Card>\n          </div>\n\n          <div className = 'result_news'>\n            <Card>\n            { filterEmotion.length === 0 ? 'No articles found with provided filters' : filterEmotion.map((item, i) => <NewsArticle\n              key={i}\n              date={new Date(item.date).toLocaleDateString()}\n              title={item.headline}\n              newssource={item.sourceID}\n              domFeeling={item.analysis.emotion ? Object.keys(item.analysis.emotion)\n                .sort((a, b) => item.analysis.emotion[b] - item.analysis.emotion[a])[0] : 'None'}\n              feelings= {item.analysis.emotion ? item.analysis.emotion : {\n                anger: 0, joy: 0, disgust: 0, fear: 0, sadness: 0,\n              }}\n              onClick= {() => this.makeRedirect(item.url)}\n            />) }\n            </Card>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nResult.contextType = SearchContext;\n\nexport default Result;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/Result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 210,
    "kind": "function",
    "name": "classNameMap",
    "memberof": "src/client/components/result/Result.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/result/Result.js~classNameMap",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "variable",
    "name": "coloranger",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~coloranger",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "colorfear",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~colorfear",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "colorjoy",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~colorjoy",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "variable",
    "name": "colorsad",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~colorsad",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 215,
    "kind": "variable",
    "name": "colordisgust",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~colordisgust",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 216,
    "kind": "class",
    "name": "Result",
    "memberof": "src/client/components/result/Result.js",
    "static": true,
    "longname": "src/client/components/result/Result.js~Result",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/Result.js",
    "importStyle": "Result",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 217,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/result/Result.js~Result",
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#state",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "{\"averageArray\": *, \"checkedEmotion\": *, \"etSelection\": *}"
      ]
    }
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "makeRedirect",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#makeRedirect",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "handleCheckedEmotion",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#handleCheckedEmotion",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [
      {
        "name": "emotion",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "dateChange",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#dateChange",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/Result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/Result.js~Result#render",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "src/client/components/result/ResultSentiment.js",
    "content": "import React, { Component } from 'react';\nimport '../style/ResultSentiment.css';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport stt from 'search-text-tokenizer';\nimport Alert from 'react-s-alert';\nimport Header from '../Header';\nimport Dropdown from '../Dropdown';\nimport DatePickerInterval from '../DatePickerInterval';\nimport Button from '../Button';\nimport Parameteres from './Parameters';\nimport Card from '../Card';\nimport Checkbox from '../Checkbox';\nimport DonutChart from './graph/DonutChart';\nimport { SearchContext } from '../dashboard/SearchStore';\nimport NewsArticleSentiment from './NewsArticleSentiment';\n\nconst className = (name) => {\n  switch (name) {\n    case 'negative':\n      return 'negative';\n    case 'neutral':\n      return 'neutral';\n    case 'positive':\n      return 'positive';\n    default:\n      return [];\n  }\n};\n\nconst colornegative = '#FF5C54';\nconst colorneutral = '#AFBE8F';\nconst colorpositive = '#5EA3DB';\n\nclass ResultSentiment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      averageArray: [],\n      checkedSentiment: [],\n      etSelection: false,\n    };\n    this.handleCheckedSentiment = this.handleCheckedSentiment.bind(this);\n  }\n\n  makeRedirect(url) {\n    if (typeof url !== 'undefined') {\n      window.open(url, '_blank');\n    }\n  }\n\n  handleCheckedSentiment(sentiment) {\n    const item = sentiment.target.value;\n    const isChecked = sentiment.target.checked;\n    const cs = this.state.checkedSentiment;\n    if (isChecked && cs.indexOf(item) === -1)\n      cs.push(item);\n    else if (!isChecked && cs.indexOf(item) > -1)\n      cs.splice(cs.indexOf(item), 1);\n    this.setState({ ...this.state, checkedSentiment: cs });\n  }\n\n  dateChange(date) {\n    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n    let startDate = !date || !date.startDate ? this.state.startDate : date.startDate;\n    let endDate = !date || !date.endDate ? this.state.endDate : date.endDate;\n    if (!date) {\n      startDate = new Date(0);\n      endDate = new Date();\n    }\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (!startDate.getTime)\n      startDate = new Date(startDate);\n    if (!endDate.getTime)\n      endDate = new Date(endDate);\n    startDate.setHours(0);\n    startDate.setMinutes(0);\n    startDate.setSeconds(0);\n    endDate.setHours(23);\n    endDate.setMinutes(59);\n    endDate.setSeconds(59);\n    startDate = startDate.getTime();\n    endDate = endDate.getTime();\n    if (date.startDate && this.context.search.docs[this.context.search.docs.length - 1]\n      .date - (24 * 60 * 60 * 1000) > startDate && this.state.startDate)\n      Alert.warning('Provided \"from\" date is outside current search results', { position: 'top' });\n    else if (date.endDate && this.context.search.docs[0]\n      .date + (24 * 60 * 60 * 1000) < endDate && this.state.endDate)\n      Alert.warning('Provided \"to\" date is outside current search results', { position: 'top' });\n    opts.startDate = startDate;\n    opts.endDate = endDate;\n    this.context.computeSearch(this.context.search, opts);\n  }\n\n  render() {\n    let { startDate, endDate } = this.state;\n    if (!startDate)\n      startDate = this.context.searchOpts.startDate;\n    if (!endDate)\n      endDate = this.context.searchOpts.endDate;\n    if (startDate.getTime)\n      startDate = startDate.getTime();\n    if (endDate.getTime)\n      endDate = endDate.getTime();\n    let filterSentiment = (this.state.checkedSentiment.length === 0\n      ? this.context.search.docs : this.context.search.docs\n        .filter(doc => (this.state.checkedSentiment.indexOf(doc.analysis.sentiment.label) > -1)));\n    filterSentiment = ((startDate || endDate)\n      ? filterSentiment.filter(doc => (startDate ? doc.date >= startDate : true)\n        && (endDate ? doc.date <= endDate : true)) : filterSentiment)\n      .filter(item => item.analysis.sentiment);\n    return (\n      <React.Fragment>\n        <Header class='resultSentiment_header' name='Sentiment Analysis' />\n        <div className='resultSentiment'>\n          <div className='resultSentiment_filter'>\n              <div className= 'filterSentiment_bar'>\n                <div>\n                  <Dropdown className='clickable' titleList='Sentiment' items={\n                    this.context.graphData.map((item, i) => <Checkbox\n                      key={i}\n                      id={item.title}\n                      value={item.title[0].toUpperCase() + item.title.slice(1)}\n                      checked={this.state.checkedSentiment.indexOf(item.title) > -1}\n                      onChange={sentiment => this.handleCheckedSentiment(sentiment)}\n                    />)\n                  } />\n                  <Dropdown className='clickable' titleList='Date Interval' items={<DatePickerInterval change={(date) => {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: date.startDate === null ? undefined : date.startDate,\n                      endDate: date.endDate === null ? undefined : date.endDate,\n                    });\n                    this.dateChange({\n                      startDate: date.startDate === null\n                        ? this.context.search.docs[this.context.search.docs.length - 1].date\n                        : date.startDate,\n                      endDate: date.endDate === null\n                        ? this.context.search.docs[0].date\n                        : date.endDate,\n                    });\n                  }} startDate={this.state.startDate ? new Date(this.state.startDate) : undefined}\n                  endDate={this.state.endDate ? new Date(this.state.endDate) : undefined} />} />\n                  <Dropdown className='clickable' titleList='Neutral threshold' items={<div>Neutral sentiment threshold: {`\\xB1 ${this.state.neutralThreshold && this.state.neutralThreshold !== 0 ? this.state.neutralThreshold : this.context.searchOpts.neutralThreshold}`}<br />\n                    <input\n                      type='range'\n                      min={0}\n                      max={20}\n                      value={(this.state.neutralThreshold && this.state.neutralThreshold !== 0\n                        ? this.state.neutralThreshold\n                        : this.context.searchOpts.neutralThreshold) * 20}\n                      onChange={(e) => {\n                        this.setState({\n                          ...this.state,\n                          neutralThreshold: Number(e.target.value / 20),\n                        });\n                      }} />\n                    <Button title='Apply' onClick={() => {\n                      if ((!this.state.neutralThreshold && this.state.neutralThreshold !== 0)\n                        || this.state.neutralThreshold === this.context.searchOpts.neutralThreshold)\n                        return;\n                      const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                      opts.neutralThreshold = Number(this.state.neutralThreshold);\n                      this.context.computeSearch(this.context.search, opts);\n                    }} />\n                    </div>} />\n                </div>\n                <div>\n                  <Button className='exportpdf' title='Print result' onClick={() => {\n                    window.print();\n                  }} />\n                </div>\n            </div>\n          </div>\n\n          <div className = 'resultSentiment_parameters'>\n            <Card>\n              <div className='title_param'>Parameters</div>\n              <div className='param_card'>\n                <Parameteres\n                  searchtext={stt(this.context.searchOpts.search.replace(/[^a-zA-Z\\s-]/g, ''))\n                    .reduce((acc, val) => {\n                      if (acc !== '')\n                        acc += ', ';\n                      if (val.exclude)\n                        acc += `-${val.term}`;\n                      else if (val.phrase)\n                        acc += `\"${val.term}\"`;\n                      else\n                        acc += val.term;\n                      return acc;\n                    }, '')}\n                  sentiment={`Sentiment: ${this.state.checkedSentiment.length === 0\n                    ? 'Positive, Neagtive, Neutral'\n                    : `${this.state.checkedSentiment.slice(0, -1)\n                      .map(s => s[0].toUpperCase() + s.slice(1)).join(', ')}${this.state.checkedSentiment.slice(0, -1).length > 0\n                      ? ', '\n                      : ''}${this.state.checkedSentiment.slice(-1).map(s => s[0].toUpperCase() + s.slice(1))[0]}`}`}\n                  timeinterval={`Date Interval: ${new Date(this.state.startDate ? this.state.startDate : filterSentiment[filterSentiment.length - 1].date).toLocaleDateString()} - ${new Date(endDate).toLocaleDateString()}`}\n                  threshold={`Neutral threshold: \\xB1 ${this.context.searchOpts.neutralThreshold}`}\n                  amount={`Amount: ${filterSentiment.length}`}\n                  emotion={this.context.searchOpts.show}\n                  emotionClick={() => {\n                    const opts = JSON.parse(JSON.stringify(this.context.searchOpts));\n                    opts.show = !opts.show;\n                    this.context.computeSearch(this.context.search, opts);\n                  }}\n                />\n              </div>\n            </Card>\n          </div>\n\n          {this.context.graphData.map((element, i) => {\n            const name = className(element.title);\n            return (<div key={i} className = {`resultSentiment_graphs_${name} clickable clickable-color`}>\n              <Card onClick={() => {\n                if (this.state.checkedSentiment[0] === name\n                  && this.state.checkedSentiment.length === 1)\n                  return this.setState({ ...this.state, checkedSentiment: [] });\n                this.setState({\n                  ...this.state,\n                  checkedSentiment: [name],\n                });\n              }}>\n                <div align='center' className='graphs' >\n                  <DonutChart chart={`${name}_chart`} label={`label_${name}`} name={element.title} data={[element]}/>\n                </div>\n              </Card>\n            </div>);\n          })}\n\n          <div className='resultSentiment_emotionalTone'>\n            <Card>\n            <div className='emotionalTone'>Emotional Tone</div>\n              <LineChart\n                className='clickable'\n                width={350}\n                height={300}\n                data={this.context.emotionalTone}\n                margin={{\n                  top: 20,\n                }} onClick={(data) => {\n                  if (this.state.etSelection) {\n                    this.setState({\n                      ...this.state,\n                      etSelection: false,\n                      startDate: undefined,\n                      endDate: undefined,\n                    });\n                    this.dateChange();\n                  }\n                  else if (data\n                    && data.activePayload\n                    && data.activePayload[0]\n                    && data.activePayload[0].payload\n                    && data.activePayload[0].payload.time) {\n                    const sd = new Date(data.activePayload[0].payload.time);\n                    const ed = new Date(data.activePayload[0].payload.time);\n                    sd.setHours(0);\n                    sd.setMinutes(0);\n                    sd.setSeconds(0);\n                    ed.setHours(23);\n                    ed.setMinutes(59);\n                    ed.setSeconds(59);\n                    this.setState({\n                      ...this.state,\n                      etSelection: true,\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                    this.dateChange({\n                      startDate: sd,\n                      endDate: ed,\n                    });\n                  }\n                }}>\n                <XAxis dataKey=\"date\"/>\n                <YAxis/>\n                <CartesianGrid strokeDasharray=\"3 3\"/>\n                <Tooltip/>\n                <Legend />\n                <Line type=\"monotone\" name=\"Negative\" dataKey=\"sentiments.negative.score\" stroke={colornegative} activeDot={{ r: 8 }}/>\n                <Line type=\"monotone\" name=\"Neutral\" dataKey=\"sentiments.neutral.score\" stroke={colorneutral} />\n                <Line type=\"monotone\" name=\"Positive\" dataKey=\"sentiments.positive.score\" stroke={colorpositive} />\n              </LineChart>\n            </Card>\n          </div>\n\n          <div className='resultSentiment_articles'>\n            <Card>\n              { filterSentiment.length === 0 ? 'No articles found with provided filters' : filterSentiment.map((item, i) => <NewsArticleSentiment\n                key={i}\n                date={new Date(item.date).toLocaleDateString()}\n                title={item.headline}\n                newssource={item.sourceID}\n                domSentiment={item.analysis.sentiment.label}\n                onClick= {() => this.makeRedirect(item.url)}\n                sentiments= {item.analysis.sentiment ? item.analysis.sentiment : {\n                  negative: 0, neutral: 0, positive: 0,\n                }}\n              />)}\n            </Card>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nResultSentiment.contextType = SearchContext;\n\nexport default ResultSentiment;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/ResultSentiment.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "className",
    "memberof": "src/client/components/result/ResultSentiment.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/result/ResultSentiment.js~className",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "variable",
    "name": "colornegative",
    "memberof": "src/client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "src/client/components/result/ResultSentiment.js~colornegative",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 228,
    "kind": "variable",
    "name": "colorneutral",
    "memberof": "src/client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "src/client/components/result/ResultSentiment.js~colorneutral",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "colorpositive",
    "memberof": "src/client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "src/client/components/result/ResultSentiment.js~colorpositive",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/ResultSentiment.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "class",
    "name": "ResultSentiment",
    "memberof": "src/client/components/result/ResultSentiment.js",
    "static": true,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/ResultSentiment.js",
    "importStyle": "ResultSentiment",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 231,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "state",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#state",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "{\"averageArray\": *, \"checkedSentiment\": *, \"etSelection\": *}"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "makeRedirect",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#makeRedirect",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "handleCheckedSentiment",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#handleCheckedSentiment",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "sentiment",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "dateChange",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#dateChange",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "date",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/ResultSentiment.js~ResultSentiment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/ResultSentiment.js~ResultSentiment#render",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "file",
    "name": "src/client/components/result/graph/DonutChart.js",
    "content": "import React, { Component } from 'react';\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\nimport '../../style/DonutChart.css';\nimport Proptypes from 'prop-types';\n\nclass DonutChart extends Component {\n  render() {\n    return (<React.Fragment>\n      <ReactMinimalPieChart\n        className={this.props.chart}\n        data={this.props.data}\n        totalValue={100}\n        lineWidth={25}\n        label\n        labelStyle={{\n          fontSize: '25px',\n          fontFamily: 'sans-serif',\n        }}\n        labelPosition={0}\n        animate\n      />\n      <div className={this.props.label} align='center'>{this.props.name}</div>\n    </React.Fragment>);\n  }\n}\n\nDonutChart.propTypes = {\n  chart: Proptypes.any,\n  label: Proptypes.any,\n  data: Proptypes.any,\n  name: Proptypes.any,\n};\n\nexport default DonutChart;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/graph/DonutChart.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 239,
    "kind": "class",
    "name": "DonutChart",
    "memberof": "src/client/components/result/graph/DonutChart.js",
    "static": true,
    "longname": "src/client/components/result/graph/DonutChart.js~DonutChart",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/graph/DonutChart.js",
    "importStyle": "DonutChart",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "render",
    "memberof": "src/client/components/result/graph/DonutChart.js~DonutChart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/client/components/result/graph/DonutChart.js~DonutChart#render",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "src/client/components/result/graph/ProgressbarGraph.js",
    "content": "import React from 'react';\nimport '../../style/ProgressbarGraph.css';\nimport PropTypes from 'prop-types';\n\nconst ProgressBar = input => (\n      <div className=\"progress-bar\">\n        <Filler perc={input.perc} color={input.color}/>\n      </div>\n);\n\n\nconst Filler = input => (\n  <div className=\"filler\" style={{ width: `${input.perc}%`, backgroundColor: `#${input.color}` }} />\n);\n\nProgressBar.propTypes = {\n  perc: PropTypes.any,\n};\n\nFiller.propTypes = {\n  perc: PropTypes.any,\n};\n\nexport default ProgressBar;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/client/components/result/graph/ProgressbarGraph.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "function",
    "name": "Filler",
    "memberof": "src/client/components/result/graph/ProgressbarGraph.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/result/graph/ProgressbarGraph.js~Filler",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/client/components/result/graph/ProgressbarGraph.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "function",
    "name": "ProgressBar",
    "memberof": "src/client/components/result/graph/ProgressbarGraph.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/client/components/result/graph/ProgressbarGraph.js~ProgressBar",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/client/components/result/graph/ProgressbarGraph.js",
    "importStyle": "ProgressBar",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/server/api/schedule.js",
    "content": "/**\n * @module Schedule Internal API\n */\nimport uuid from 'uuid/v4';\nimport { getCloudant } from '../ics';\n\n/**\n * Change listener functions\n * @type {Array}\n */\nconst listeners = [];\n\n/**\n * Compare two objects\n *\n * @name objectEqual\n * @param  {Object} a Object1\n * @param  {Object} b Object2\n * @return {Boolean}   Is the objects equal\n */\nconst objectEqual = (a, b) => {\n  let ret = true;\n  Object.keys(a).forEach((key) => {\n    if (!ret)\n      return;\n    if (typeof a[key] === 'object' && typeof b[key] === 'object') {\n      ret = objectEqual(a[key], b[key]) ? ret : false;\n    }\n    else\n      ret = a[key] === b[key] ? ret : false;\n  });\n  ret = Object.keys(a).length === Object.keys(b).length ? ret : false;\n  return ret;\n};\n\n/**\n * Fetch the current central schedule from cloudantReady\n *\n * @name getSchedule\n * @return {Array} Central Schedule\n */\nconst getSchedule = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  getCloudant().db.use('sa-meta').find({ selector: { type: 'schedule' }, fields: ['schedule'] }).then((data) => {\n    if (data && data.docs && data.docs.length > 0 && data.docs[0].schedule)\n      resolve(data.docs[0].schedule);\n    else\n      resolve([]);\n  }).catch(reject);\n});\n\n/**\n * Register schedule change listener functions\n *\n * @name registerScheduleListener\n * @param  {function} listener Listener callback function\n */\nconst registerScheduleListener = (listener) => {\n  if (listener instanceof Function)\n    listeners.push(listener);\n};\n\nconst deleteScheduleItem = id => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  getCloudant().db.use('sa-meta').find({ selector: { type: 'schedule' } }).then((data) => {\n    if (data && data.docs && data.docs.length > 0 && data.docs[0].schedule) {\n      const doc = data.docs[0];\n      if (doc.schedule.filter(item => item.id === id).length === 0)\n        return resolve();\n      doc.schedule = doc.schedule.filter(item => item.id !== id);\n      listeners.forEach(listener => listener(doc.schedule));\n      getCloudant().db.use('sa-meta').insert(doc).then(() => resolve(id)).catch(reject);\n    }\n  }).catch(reject);\n});\n\nconst addScheduleItem = item => new Promise((resolve, reject) => {\n  if (!item\n    || (!item.recurring && item.recurring !== false)\n    || (!item.task || item.task === '')\n    || (!item.occurences || item.occurences.length === 0))\n    return reject();\n  if (!getCloudant())\n    return reject();\n  getCloudant().db.use('sa-meta').find({ selector: { type: 'schedule' } }).then((data) => {\n    if (data && data.docs && data.docs.length > 0 && data.docs[0].schedule) {\n      const doc = data.docs[0];\n      if (!doc.schedule.reduce((acc, val) => {\n        if (!acc)\n          return acc;\n        return objectEqual(item, val);\n      }, true)) {\n        const nItem = { id: uuid(), ...item };\n        doc.schedule.push(nItem);\n        listeners.forEach(listener => listener(doc.schedule));\n        getCloudant().db.use('sa-meta').insert(doc).then(() => resolve(nItem)).catch(reject);\n      }\n      else\n        reject();\n    }\n  }).catch(reject);\n});\n\nexport default {\n  getSchedule, deleteScheduleItem, addScheduleItem, registerScheduleListener,\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api/schedule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "listeners",
    "memberof": "src/server/api/schedule.js",
    "static": true,
    "longname": "src/server/api/schedule.js~listeners",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": "Change listener functions",
    "lineNumber": 11,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "function",
    "name": "objectEqual",
    "memberof": "src/server/api/schedule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/schedule.js~objectEqual",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": "Compare two objects",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "Object1"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "Object2"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Is the objects equal"
    },
    "ignore": true
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "getSchedule",
    "memberof": "src/server/api/schedule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/schedule.js~getSchedule",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": "Fetch the current central schedule from cloudantReady",
    "lineNumber": 42,
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Central Schedule"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 248,
    "kind": "function",
    "name": "registerScheduleListener",
    "memberof": "src/server/api/schedule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/schedule.js~registerScheduleListener",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": "Register schedule change listener functions",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "listener",
        "description": "Listener callback function"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "function",
    "name": "deleteScheduleItem",
    "memberof": "src/server/api/schedule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/schedule.js~deleteScheduleItem",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "addScheduleItem",
    "memberof": "src/server/api/schedule.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/schedule.js~addScheduleItem",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/schedule.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 251,
    "kind": "file",
    "name": "src/server/api/search.js",
    "content": "import stt from 'search-text-tokenizer';\nimport { getCloudant } from '../ics';\n\nconst search = (query, options) => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  query = query.replace(/[^a-zA-Z\\s-]/g, '');\n  if (query === '')\n    return reject({ code: 400, err: new Error('Error: Empty query not supported') });\n  const tokens = stt(query);\n  const includes = tokens.filter(token => !token.exclude).map(token => token.term);\n  const excludes = tokens.filter(token => token.exclude).map(token => token.term);\n  const regex = includes.reduce((acc, val, i) => `${i === 0 ? '(' : ''}${acc + val}${i === includes.length - 1 ? ')' : '|'}`, '');\n  const negRegex = excludes.reduce((acc, val, i) => `${i === 0 ? '(' : ''}${acc + val}${i === excludes.length - 1 ? ')' : '|'}`, '');\n  let sources = '';\n  let sourceRegex = '';\n  if (options && options.sources && typeof options.sources === 'string') {\n    sources = options.sources;\n    sources = sources.split(',').join(' ');\n  }\n  else if (options && options.sources && options.sources.join)\n    sources = options.sources.join(' ');\n  if (sources === '')\n    sourceRegex = '.+';\n  else {\n    const sTokens = stt(sources);\n    const sourceList = sTokens.filter(token => !token.exclude).map(token => token.term.replace(/[^a-zA-Z-]/g, ''));\n    sourceRegex = sourceList.reduce((acc, val, i) => `${i === 0 ? '(' : ''}${acc + val}${i === sourceList.length - 1 ? ')' : '|'}`, '');\n  }\n  try {\n    RegExp(sourceRegex);\n    RegExp(regex);\n    RegExp(negRegex);\n  }\n  catch (e) {\n    return reject({ code: 400, err: new Error('Error: Invalid query parameters') });\n  }\n  const opts = {\n    selector: {\n      $and: [\n        {\n          'analysis.text': {\n            $regex: `(?i)${regex}`,\n          },\n        },\n        {\n          sourceID: {\n            $regex: `(?i)${sourceRegex}`,\n          },\n        },\n      ],\n    },\n    fields: [\n      '_id',\n      '_rev',\n      'date',\n      'headline',\n      'analysis',\n      'url',\n      'sourceID',\n    ],\n    sort: [\n      {\n        date: 'desc',\n      },\n    ],\n    limit: 10000,\n  };\n  if (options.bookmark)\n    opts.bookmark = options.bookmark;\n  if (options.intervalStart)\n    opts.selector.$and.push({\n      date: {\n        $gte: Number(options.intervalStart),\n      },\n    });\n  if (options.intervalEnd)\n    opts.selector.$and.push({\n      date: {\n        $lte: Number(options.intervalEnd),\n      },\n    });\n  if (negRegex !== '')\n    opts.selector.$and.push({\n      $not: {\n        'analysis.text': {\n          $regex: `(?i)${negRegex}`,\n        },\n      },\n    });\n  const find = () => {\n    getCloudant().db.use('sa-index').find(opts).then((data) => {\n      data.docs = data.docs.map((doc) => {\n        if (doc.date < 0) {\n          doc.date = new Date().getTime();\n          getCloudant().db.use('sa-index').insert(doc, (err) => {\n            if (err)\n              console.error(err);\n          });\n        }\n        delete doc._rev;\n        return doc;\n      });\n      resolve({ ...data, params: includes });\n    }).catch((err) => {\n      console.error(err);\n      if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n        find();\n      else\n        reject(err);\n    });\n  };\n  find();\n});\n\nconst getSources = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  const find = () => {\n    getCloudant().db.use('sa-index').view('searches', 'source-view', {\n      group: true,\n    }).then((data) => {\n      const find2 = () => {\n        getCloudant().db.use('sa-meta').find({ selector: { type: 'ws' } }).then(({ docs }) => {\n          const hosts = Object.keys(docs[0]).filter(key => docs[0][key].sourceID);\n          const keys = data.rows.map(e => e.key);\n          resolve(keys.map(key => ({\n            key,\n            value: docs[0][hosts.filter(k => docs[0][k].sourceID === key)[0]].name,\n          })));\n        }).catch((err) => {\n          if (!err.reason)\n            return reject(err);\n          if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n            find2();\n          else\n            reject(err);\n        });\n      };\n      find2();\n    }).catch((err) => {\n      if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n        find();\n      else\n        reject(err);\n    });\n  };\n  find();\n});\n\nexport default { search, getSources };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api/search.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 252,
    "kind": "function",
    "name": "search",
    "memberof": "src/server/api/search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/search.js~search",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "function",
    "name": "getSources",
    "memberof": "src/server/api/search.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/search.js~getSources",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/search.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/server/api/utils.js",
    "content": "import { getCloudant } from '../ics';\n\nconst urlCheck = urls => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  let arr = urls;\n  if (typeof arr === 'string')\n    arr = [arr];\n  const find = () => {\n    getCloudant().db.use('sa-index').view('searches', 'url-view', {\n      group: true,\n    }).then((data) => {\n      const u = data.rows.map(row => row.key);\n      for (let i = 0; i < arr.length; i += 1) {\n        if (u.indexOf(arr[i]) > -1) {\n          arr.splice(i, 1);\n          i -= 1;\n        }\n      }\n      resolve(arr);\n    }).catch((err) => {\n      if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n        find();\n      else\n        reject(err);\n    });\n  };\n  find();\n});\n\nconst urlCount = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  const find = () => {\n    getCloudant().db.use('sa-index').view('searches', 'url-view', {\n      group: true,\n    }).then((data) => {\n      resolve(data.rows.length);\n    }).catch((err) => {\n      if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n        find();\n      else\n        reject(err);\n    });\n  };\n  find();\n});\n\nexport default { urlCheck, urlCount };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "function",
    "name": "urlCheck",
    "memberof": "src/server/api/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/utils.js~urlCheck",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "urls",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "urlCount",
    "memberof": "src/server/api/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/utils.js~urlCount",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "file",
    "name": "src/server/api/webscraper.js",
    "content": "import { getCloudant, newsapi } from '../ics';\n\nconst getWebscraperHosts = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  getCloudant().db.use('sa-meta').find({ selector: { type: 'ws' } }, (err, result) => {\n    if (err)\n      return reject(err);\n    resolve(result.docs[0]);\n  });\n});\n\nconst getWebscraperSources = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject();\n  getWebscraperHosts()\n    .then(data => resolve(Object.keys(data).filter(key => key.indexOf('_') !== 0 && key !== 'type').reduce((acc, key) => {\n      const selection = acc.filter(e => e.sourceID === data[key].sourceID);\n      if (selection.length === 0) {\n        const d = data[key];\n        d.hostnames = [key];\n        d.hostDeletions = [];\n        acc.push(d);\n      }\n      else\n        selection[0].hostnames.push(key);\n      return acc;\n    }, []).map(v => ({ key: v.sourceID, value: v.name }))))\n    .catch(reject);\n});\n\nconst updateWebscraperHost = host => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    return reject(new Error('Cloudant'));\n  getCloudant().db.use('sa-meta').find({ selector: { type: 'ws' } }, (err, result) => {\n    if (err)\n      return reject(err);\n    const index = result.docs[0];\n    host.hostnames.forEach((hostname) => {\n      if (!index[hostname])\n        index[hostname] = {};\n      Object.keys(host).filter(e => e !== 'hostnames' && e !== 'hostDeletions').forEach((key) => {\n        index[hostname][key] = host[key];\n      });\n    });\n    host.hostDeletions.forEach((hostname) => {\n      if (index[hostname])\n        delete index[hostname];\n    });\n    getCloudant().db.use('sa-meta').insert(index, (err) => {\n      if (err)\n        return reject(err);\n      resolve();\n    });\n  });\n});\n\nconst getNewsSourceURLs = sources => new Promise((resolve, reject) => {\n  if (typeof sources === 'string')\n    sources = sources.split(',');\n  if (!sources.length || sources.length === 0)\n    return resolve([]);\n  getWebscraperHosts().then((hsts) => {\n    const hosts = Object.keys(hsts).filter(key => key.indexOf('_') !== 0 && key !== 'type').map(key => hsts[key].sourceID);\n    sources = sources.filter(source => hosts.indexOf(source) > -1);\n    Promise.all(sources.map((source) => {\n      const opts = {\n        language: 'en',\n        sources: source,\n        pageSize: 100,\n      };\n\n      return newsapi.v2.everything(opts);\n    }).map(promise => promise.then(val => val, () => ({ articles: [] })))).then((data) => {\n      resolve(data.reduce((acc, val) => {\n        val.articles.map(a => a.url).forEach(url => acc.push(url));\n        return acc;\n      }, []));\n    }).catch(reject);\n  });\n});\n\nexport default {\n  getWebscraperHosts,\n  updateWebscraperHost,\n  getNewsSourceURLs,\n  getWebscraperSources,\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api/webscraper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "getWebscraperHosts",
    "memberof": "src/server/api/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/webscraper.js~getWebscraperHosts",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "getWebscraperSources",
    "memberof": "src/server/api/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/webscraper.js~getWebscraperSources",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "updateWebscraperHost",
    "memberof": "src/server/api/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/webscraper.js~updateWebscraperHost",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "host",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "getNewsSourceURLs",
    "memberof": "src/server/api/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/webscraper.js~getNewsSourceURLs",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "sources",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "file",
    "name": "src/server/api/wordcloud.js",
    "content": "import { getCloudant } from '../ics';\nimport API from '../api';\n\nconst getWordcloud = () => new Promise((resolve, reject) => {\n  if (!getCloudant())\n    reject();\n  const find = () => {\n    getCloudant().db.use('sa-index').search('searches', 'basic-search', {\n      q: '*:*',\n      counts: ['key'],\n      limit: 0,\n    }).then((data) => {\n      API.getSources().then((sources) => {\n        const arr = data.counts.key;\n        const result = [];\n\n        Object.entries(arr).forEach((entry) => {\n          result.push({ key: entry[0], value: entry[1] });\n        });\n        result.sort((a, b) => {\n          if (a.value < b.value)\n            return 1;\n          if (a.value > b.value)\n            return -1;\n          if (a.key < b.key)\n            return -1;\n          if (a.key > b.key)\n            return 1;\n          return 0;\n        });\n        resolve(result\n          .filter(o => sources\n            .filter(source => source.key === o.key || source.value === o.key).length === 0));\n      });\n    }).catch((err) => {\n      if (err.statusCode === 401 || err.reason.indexOf('_design') || err.reason.indexOf('_reader'))\n        find();\n      else\n        reject(err);\n    });\n  };\n  find();\n});\n\nexport default { getWordcloud };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api/wordcloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "getWordcloud",
    "memberof": "src/server/api/wordcloud.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/api/wordcloud.js~getWordcloud",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/api/wordcloud.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "file",
    "name": "src/server/api.js",
    "content": "import Scraper from './api/webscraper';\nimport Wordcloud from './api/wordcloud';\nimport Search from './api/search';\nimport Utils from './api/utils';\nimport Schedule from './api/schedule';\n\nexport default {\n  ...Scraper, ...Wordcloud, ...Utils, ...Search, ...Schedule,\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/api.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "src/server/app-env.js",
    "content": "/**\n * @module Application enviroment\n */\nimport cfenv from 'cfenv';\nimport dotenv from 'dotenv';\nimport fs from 'fs';\n\ndotenv.config();\n\n/**\n * Cloud Foundry enviroment\n * @type {Object}\n */\nconst appEnv = cfenv.getAppEnv();\n\n/**\n * Service parameters for cloudant, NLU, NewsAPI\n *\n * @type {Object}\n */\nlet serviceParameters;\nif (appEnv.isLocal) {\n  if (process.env.isTravis) {\n    serviceParameters = {\n      cloudantNoSQLDB: [\n        {\n          credentials: {\n            apikey: process.env.cloudantNoSQLDB_apikey,\n            username: process.env.cloudantNoSQLDB_username,\n          },\n        },\n      ],\n      'natural-language-understanding': [\n        {\n          credentials: {\n            apikey: process.env.nlu_apikey,\n          },\n        },\n      ],\n      newsapi: [\n        {\n          credentials: {\n            apikey: process.env.np_apikey,\n          },\n        },\n      ],\n    };\n  }\n  else\n    serviceParameters = JSON.parse(fs.readFileSync('.ibm-credentials', 'utf8'));\n}\nelse {\n  serviceParameters = appEnv.services;\n  serviceParameters.newsapi = [{\n    credentials: {\n      apikey: process.env.np_apikey,\n    },\n  }];\n}\n\nexport default {\n  getService: service => serviceParameters[service],\n  getServiceCredentials: (service, index) => serviceParameters[service][index || 0].credentials,\n  isLocal: appEnv.isLocal,\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/app-env.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "appEnv",
    "memberof": "src/server/app-env.js",
    "static": true,
    "longname": "src/server/app-env.js~appEnv",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/app-env.js",
    "importStyle": null,
    "description": "Cloud Foundry enviroment",
    "lineNumber": 14,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "src/server/ics.js",
    "content": "/**\n * @module Cloud services\n */\nimport NLUV1 from 'watson-developer-cloud/natural-language-understanding/v1';\nimport Cloudant from '@cloudant/cloudant';\nimport NP from 'newsapi';\nimport env from './app-env';\n\n/**\n * Credentials for NLU\n * @type {Object}\n */\nconst nluParameters = env.getServiceCredentials('natural-language-understanding');\nnluParameters.version = '2018-11-16';\nnluParameters.iam_apikey = nluParameters.apikey;\n\n/**\n * NLU instance\n * @type {NLU}\n */\nconst nlu = new NLUV1(nluParameters);\n\n/**\n * Is cloudant connected\n * @type {Boolean}\n */\nlet cloudantReady = false;\n\n/**\n * Cloudant conntection instance\n * @type {Cloudant}\n */\nlet cloudant;\nconst connectCloudant = () => {\n  cloudantReady = false;\n  cloudant = Cloudant({\n    account: env.getServiceCredentials('cloudantNoSQLDB').username,\n    plugins: [\n      {\n        iamauth: {\n          iamApiKey: env.getServiceCredentials('cloudantNoSQLDB').apikey,\n        },\n      },\n      {\n        retry: {\n          retryStatusCodes: [429],\n          retryInitialDelayMsecs: 500,\n        },\n      },\n    ],\n  }, (err) => {\n    if (!err)\n      cloudantReady = true;\n  });\n};\n\nconnectCloudant();\n\n/**\n * NewsAPI instance\n * @type {NP}\n */\nconst newsapi = new NP(env.getServiceCredentials('newsapi').apikey);\n\n/**\n * Get the current cloudant instance\n * @name getCloudant\n * @return {Cloudant} Cloudant instance if initialized\n *\n * @example\n * getCloudant();\n */\nconst getCloudant = () => (cloudantReady ? cloudant : undefined);\nexport {\n  nlu, getCloudant, newsapi, connectCloudant,\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/ics.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "nluParameters",
    "memberof": "src/server/ics.js",
    "static": true,
    "longname": "src/server/ics.js~nluParameters",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": null,
    "description": "Credentials for NLU",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "cloudantReady",
    "memberof": "src/server/ics.js",
    "static": true,
    "longname": "src/server/ics.js~cloudantReady",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": null,
    "description": "Is cloudant connected",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "nlu",
    "memberof": "src/server/ics.js",
    "static": true,
    "longname": "src/server/ics.js~nlu",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": "{nlu}",
    "description": "NLU instance",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "NLU"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "function",
    "name": "getCloudant",
    "memberof": "src/server/ics.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ics.js~getCloudant",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": "{getCloudant}",
    "description": "Get the current cloudant instance",
    "examples": [
      "getCloudant();"
    ],
    "lineNumber": 73,
    "return": {
      "nullable": null,
      "types": [
        "Cloudant"
      ],
      "spread": false,
      "description": "Cloudant instance if initialized"
    },
    "params": []
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "newsapi",
    "memberof": "src/server/ics.js",
    "static": true,
    "longname": "src/server/ics.js~newsapi",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": "{newsapi}",
    "description": "NewsAPI instance",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "NP"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "function",
    "name": "connectCloudant",
    "memberof": "src/server/ics.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ics.js~connectCloudant",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ics.js",
    "importStyle": "{connectCloudant}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 274,
    "kind": "file",
    "name": "src/server/routes/auth.js",
    "content": "import { Router } from 'express';\nimport passport from 'passport';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst router = new Router();\nconst isWhitelisted = (req) => {\n  if (!req.user)\n    return false;\n  return req.headers.api_key === process.env.SCRAPER_API_KEY || process.env.ADMIN_WHITELIST.split(',').filter(email => req.user.emails.filter(val => email === val.value).length > 0).length > 0;\n};\n\nrouter.get('/login', passport.authenticate('auth0', {\n  scope: 'openid email profile',\n}), (req, res) => {\n  res.redirect('/');\n});\n\nrouter.get('/callback', (req, res, next) => {\n  passport.authenticate('auth0', (err, user) => {\n    if (err)\n      return next(err);\n    if (!user)\n      return res.redirect('/api/auth/login');\n    req.logIn(user, (err) => {\n      if (err)\n        return next(err);\n      const returnTo = req.session.returnTo;\n      delete req.session.returnTo;\n      res.redirect(returnTo || '/admin');\n    });\n  })(req, res, next);\n});\n\nrouter.get('/logout', (req, res) => {\n  req.logout();\n  res.redirect('/');\n});\n\nrouter.get('/whitelist', (req, res) => {\n  res.json(isWhitelisted(req));\n});\n\nexport default router;\nexport { isWhitelisted };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/routes/auth.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 275,
    "kind": "function",
    "name": "isWhitelisted",
    "memberof": "src/server/routes/auth.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/routes/auth.js~isWhitelisted",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/routes/auth.js",
    "importStyle": "{isWhitelisted}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "req",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "src/server/routes/search.js",
    "content": "import { Router } from 'express';\nimport stt from 'search-text-tokenizer';\nimport API from '../api';\n\nconst router = new Router();\n\nrouter.get('/sources', (req, res) => {\n  API.getSources().then((data) => {\n    res.json(data);\n  }).catch((err) => {\n    console.error(err);\n    res.status(err.code || 500).send(err.err ? (err.err.message || 'ERROR') : 'ERROR');\n  });\n});\n\nrouter.get('/', (req, res) => {\n  if (req.query.q && !req.query.query)\n    req.query.query = req.query.q;\n  if (!req.query.query || stt(req.query.query).length === 0)\n    return res.status(400).send('No search provided');\n  API.search(req.query.query, req.query)\n    .then((data) => {\n      res.json(data);\n    })\n    .catch((err) => {\n      console.error(err);\n      res.status(err.code || 500).send(err.err ? (err.err.message || 'ERROR') : 'ERROR');\n    });\n});\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/routes/search.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/server/routes/webscraper.js",
    "content": "import { Router } from 'express';\nimport rp from 'request-promise';\nimport dotenv from 'dotenv';\nimport Schedule from './ws/schedule';\nimport ws from '../ws';\nimport nluProcess from '../ws/nlu';\nimport API from '../api';\nimport { isWhitelisted } from './auth';\n\ndotenv.config();\n\nconst router = new Router();\n\nrouter.use('/schedule', (req, res, next) => {\n  if (!isWhitelisted(req) && req.headers.api_key !== process.env.SCRAPER_API_KEY)\n    return res.status(403).send('Access denied');\n  next();\n});\n\nrouter.use('/schedule', Schedule);\n\nrouter.get('/hosts', (req, res) => {\n  API.getWebscraperHosts().then((data) => {\n    res.json(data);\n  }).catch((err) => {\n    console.error(err);\n    res.status(500).send('ERROR');\n  });\n});\n\nrouter.get('/sources', (req, res) => {\n  API.getWebscraperSources()\n    .then(data => res.json(data))\n    .catch(() => res.status(500).send('ERROR'));\n});\n\nrouter.get('/urlCount', (req, res) => {\n  if (!isWhitelisted(req) && req.headers.api_key !== process.env.SCRAPER_API_KEY)\n    return res.status(403).send('Access denied');\n  API.urlCount().then((data) => {\n    res.json({ count: data });\n  }).catch((err) => {\n    console.error(err);\n    res.status(500).send('ERROR');\n  });\n});\n\nrouter.get('/load', (req, res) => {\n  console.log(req.query.url);\n  if (!req.query.url)\n    return res.status(400).send('');\n  rp(req.query.url)\n    .then(data => res.status(200).json({ statusCode: 200, data }))\n    .catch(err => res.status(err.statusCode || 500).json(err));\n});\n\nconst clone = object => JSON.parse(JSON.stringify(object));\n\nconst patternExists = (object, pattern) => {\n  let temp = clone(object);\n  pattern.split('.').forEach((key) => {\n    if (!temp)\n      return;\n    temp = temp[key];\n  });\n  return temp;\n};\n\nrouter.post('/hosts', (req, res) => {\n  const requirements = ['hostnames', 'hostDeletions', 'name', 'headlines', 'body', 'sourceID', 'exclude', 'date.sel', 'date.function', 'validationURL'];\n  if (requirements.filter(e => !patternExists(req.body, e)).length !== 0)\n    return res.status(400).send('Error: requires hostname, headline, body, sourceID and date');\n  if (!req.body.exclude)\n    req.body.exclude = [];\n  rp(req.body.validationURL)\n    .then(() => API.updateWebscraperHost(req.body)\n      .then(data => res.json(data))\n      .catch(err => res.status(400).send(JSON.stringify(err))))\n    .catch(err => res.status(err.statusCode || 500).json(err));\n});\n\nrouter.post('/fetchNews', (req, res) => {\n  if (!isWhitelisted(req) && req.headers.api_key !== process.env.SCRAPER_API_KEY)\n    return res.status(403).send('Access denied');\n  if (!req.body.sources)\n    return res.status(400).send('No sources provided');\n  API.getNewsSourceURLs(req.body.sources).then((urls) => {\n    API.urlCheck(urls).then((list) => {\n      res.status(200).json(list.length);\n      if (list.length > 0) {\n        ws(list, (data) => {\n          if (!data)\n            return;\n          nluProcess(data, (err) => {\n            if (err)\n              return console.error(err);\n          });\n        });\n      }\n    }).catch((err) => {\n      console.error(err);\n      setTimeout(() => {\n        if (!res.headersSent)\n          res.status(200).send('Success');\n      }, 500);\n    });\n  }).catch(() => {\n    setTimeout(() => {\n      if (!res.headersSent)\n        res.status(200).send('Success');\n    }, 500);\n  });\n});\n\nrouter.post('/', (req, res) => {\n  if (!isWhitelisted(req) && req.headers.api_key !== process.env.SCRAPER_API_KEY)\n    return res.status(403).send('Access denied');\n  if (!req.body.urls)\n    return res.status(400).send('No provided URLs');\n  if (typeof req.body.urls === 'string')\n    req.body.urls = [req.body.urls];\n  if (req.body.urls.filter(url => typeof url !== 'string').length > 0)\n    return res.status(400).send('Invalid URL');\n  API.urlCheck(req.body.urls).then((list) => {\n    res.status(200).send(list.length);\n    if (list.length > 0) {\n      ws(list, (data) => {\n        if (!data)\n          return;\n        nluProcess(data, (err) => {\n          if (err) {\n            setTimeout(() => {\n              if (!res.headersSent)\n                res.status(500).send('Error');\n            }, 500);\n            return console.error(err);\n          }\n        });\n      });\n    }\n    else {\n      setTimeout(() => {\n        if (!res.headersSent)\n          res.status(200).send('Success');\n      }, 500);\n    }\n  }).catch((err) => {\n    console.error(err);\n    setTimeout(() => {\n      if (!res.headersSent)\n        res.status(200).send('Success');\n    }, 500);\n  });\n});\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/routes/webscraper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "clone",
    "memberof": "src/server/routes/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/routes/webscraper.js~clone",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/routes/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "patternExists",
    "memberof": "src/server/routes/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/routes/webscraper.js~patternExists",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/routes/webscraper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "pattern",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "file",
    "name": "src/server/routes/wordcloud.js",
    "content": "import { Router } from 'express';\nimport API from '../api';\n\nconst router = new Router();\n\nrouter.get('/', (req, res) => {\n  API.getWordcloud().then((data) => {\n    if (req.query.length)\n      res.json(data.slice(0, req.query.length));\n    else\n      res.json(data);\n  }).catch((err) => {\n    res.status(500).send(JSON.stringify(err));\n  });\n});\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/routes/wordcloud.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 281,
    "kind": "file",
    "name": "src/server/routes/ws/schedule.js",
    "content": "import { Router } from 'express';\nimport API from '../../api';\n\nconst router = new Router();\n\nrouter.get('/', (req, res) => {\n  API.getSchedule().then((data) => {\n    res.json(data);\n  }).catch((err) => {\n    console.error(err);\n    res.status(500).send('ERROR');\n  });\n});\n\nrouter.post('/', (req, res) => {\n  const { task, recurring, occurences } = req.body;\n  if (!task\n    || typeof task !== 'string'\n    || (!recurring && recurring !== false)\n    || typeof recurring !== 'boolean'\n    || !occurences\n    || typeof occurences !== 'object'\n    || !occurences.filter\n    || occurences.filter(item => (!item.hour && item.hour !== 0)\n      || (!item.minute && item.minute !== 0)\n      || (!item.second && item.second !== 0)).length > 0)\n    return res.status(400).send('Invalid request');\n  API.addScheduleItem({\n    task,\n    recurring,\n    occurences,\n  }).then((item) => {\n    res.json(item);\n  }).catch((err) => {\n    console.error(err);\n    res.status(500).send('ERROR');\n  });\n});\n\nrouter.delete('/:id', (req, res) => {\n  API.deleteScheduleItem(req.params.id).then((uid) => {\n    res.json(uid);\n  }).catch((err) => {\n    console.error(err);\n    res.status(500).send('ERROR');\n  });\n});\n\nexport default router;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/routes/ws/schedule.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 282,
    "kind": "file",
    "name": "src/server/scheduler.js",
    "content": "import uuid from 'uuid/v1';\nimport API from './api';\nimport ws from './ws';\nimport nluProcess from './ws/nlu';\n\nconst interval = 60;\nlet schedule = [];\nlet activeSchedule = [];\nconst ignoreIDs = [];\nlet selfInvoked = [];\nconst selfStop = [];\nconst toggle = {\n  update: false,\n  schedule: true,\n  run: true,\n};\n\nconst msToString = (ms) => {\n  const hrs = Math.floor(ms / (60 * 60 * 1000));\n  ms -= hrs * 60 * 60 * 1000;\n  return `${hrs}h ${Math.floor(ms / (60 * 1000))}min`;\n};\n\nclass Timeout {\n  constructor(fn, wait) {\n    this.wait = wait;\n    if (wait === -1)\n      return;\n    this.executed = false;\n    this.id = setTimeout(() => {\n      fn(() => {\n        this.executed = true;\n      });\n    }, wait);\n  }\n\n  stop() {\n    clearTimeout(this.id);\n  }\n}\n\nconst getTimeToNextRun = (item) => {\n  const ref = new Date();\n  return item.occurences.map((val) => {\n    const occ = new Date(Date.UTC(\n      ref.getUTCFullYear(),\n      ref.getUTCMonth(),\n      ref.getUTCDate(),\n      val.hour,\n      val.minute,\n      val.second,\n    ));\n    return occ.getTime() + (occ.getTime() <= ref.getTime() ? (24 * 60 * 60 * 1000) : 0);\n  }).sort((a, b) => a - b)[0] - ref.getTime();\n};\n\nconst run = item => ((cb) => {\n  console.log(`Executing ${item.id ? item.id : 'independent job'}`);\n  if (item.recurring) {\n    activeSchedule = activeSchedule.filter(i => item.id !== i);\n    activeSchedule.push({\n      id: item.id,\n      timeout: new Timeout(run(item), getTimeToNextRun(item)),\n      recurring: item.recurring,\n      timestamp: new Date().getTime(),\n    });\n  }\n  else if (item.id && selfInvoked.filter(i => item.id === i.id).length === 0) {\n    API.deleteScheduleItem(item.id).then(() => {\n      schedule = schedule.filter(i => i.id !== item.id);\n    }).catch(() => {});\n  }\n  else if (item.id && selfInvoked.filter(i => item.id === i.id).length > 0) {\n    selfInvoked = selfInvoked.filter(i => item.id !== i.id);\n  }\n  (() => {\n    if (item.task === 'all')\n      return new Promise(resolve => API.getWebscraperSources()\n        .then(srcs => resolve(srcs.map(h => h.key)))\n        .catch(() => resolve([])));\n    return new Promise(resolve => resolve(item.task));\n  })().then((sources) => {\n    console.log(sources);\n    API.getNewsSourceURLs(sources).then((urls) => {\n      API.urlCheck(urls).then((list) => {\n        if (cb)\n          cb();\n        else\n          console.log(`Fetching ${list.length}/${urls.length} articles`);\n        if (list.length > 0) {\n          let count = 0;\n          let err = 0;\n          ws(list, (data) => {\n            count++;\n            if (count === list.length)\n              console.log(`URLs processed: ${count} Number of errors: ${!data ? (err + 1) : err}`);\n            if (!data) {\n              err++;\n              return;\n            }\n            nluProcess(data, () => {});\n          });\n        }\n      }).catch((err) => {\n        console.error(err);\n      });\n    });\n  });\n});\n\nconst update = (extra) => {\n  activeSchedule.forEach((item) => {\n    if (item.timeout.executed && !item.recurring)\n      ignoreIDs.push(item.id);\n  });\n  activeSchedule = activeSchedule\n    .filter(aItem => schedule\n      .filter(item => item.id === aItem.id && !aItem.timeout.executed).length > 0)\n    .filter(aItem => (aItem.timeout.wait + aItem.timestamp) - new Date().getTime() >= 0);\n  schedule\n    .filter(item => activeSchedule\n      .filter(aItem => aItem.id === item.id).length === 0\n      && ignoreIDs.indexOf(item.id) === -1\n      && selfStop.indexOf(item.id) === -1)\n    .forEach((item) => {\n      activeSchedule.push({\n        id: item.id,\n        timeout: new Timeout(run(item), getTimeToNextRun(item)),\n        recurring: item.recurring,\n        timestamp: new Date().getTime(),\n      });\n    });\n  ignoreIDs.forEach((id) => {\n    API.deleteScheduleItem(id).then(() => {\n      ignoreIDs.splice(ignoreIDs.indexOf(id), 1);\n      schedule = schedule.filter(item => item.id !== id);\n    }).catch(() => {});\n  });\n  if (toggle.update) {\n    console.log(`Active scheduled jobs: ${activeSchedule.length}`);\n    activeSchedule.forEach(item => console.log(`${item.id}\\n\\tTime until invocation: ${msToString((item.timeout.wait + item.timestamp) - new Date().getTime())}`));\n  }\n  API.getWebscraperHosts().then(() => {}).catch(console.error);\n  if (!extra)\n    setTimeout(update, interval * 1000);\n};\n\nconst processInput = (data) => {\n  data = data.toString('utf-8').split(' ')\n    .filter(s => s !== '').join(' ')\n    .split('\\n')\n    .filter(cmd => cmd !== '');\n  data.forEach((line) => {\n    if (line.split(' ')[0] === 's')\n      line = `schedule ${line.split(' ').slice(1).join(' ')}`;\n    else if (line.split(' ')[0] === 'r')\n      line = `run ${line.split(' ').slice(1).join(' ')}`;\n    else if (line.split(' ')[0] === 't')\n      line = `toggle ${line.split(' ').slice(1).join(' ')}`;\n    if (line.indexOf('schedule') === 0) {\n      const command = line.split(' ')[1];\n      const options = line.split(' ').slice(2);\n      switch (command) {\n        case 'get':\n          if (toggle.schedule)\n            console.log('Fetching new updated schedule');\n          API.getSchedule().then((ns) => {\n            const curIDs = schedule.map(item => item.id);\n            ns.filter(item => curIDs.indexOf(item.id) === -1).forEach(item => schedule.push(item));\n            update(true);\n            if (toggle.schedule)\n              console.log('Schedule updated');\n          }).catch(() => console.log('Not possible to get schedule'));\n          break;\n        case 'delete':\n          if (schedule.filter(item => item.id === options[0]).length === 0\n            && selfInvoked.filter(ii => ii.id === options[0]).length === 0)\n            console.log('ID not recognized');\n          else if (selfInvoked.filter(ii => ii.id === options[0]).length > 0) {\n            if (toggle.schedule)\n              console.log('Deleting job');\n            selfInvoked.forEach((item) => {\n              if (item.id === options[0])\n                item.timeout.stop();\n            });\n            selfInvoked = selfInvoked.filter(item => item.id !== options[0]);\n            console.log('Job deleted');\n          }\n          else {\n            if (toggle.schedule)\n              console.log('Deleting job');\n            API.deleteScheduleItem(options[0]).then(() => {\n              activeSchedule.forEach((item) => {\n                if (item.id === options[0])\n                  item.timeout.stop();\n              });\n              activeSchedule = activeSchedule.filter(item => item.id !== options[0]);\n              console.log('Job deleted');\n            }).catch(() => console.log('Deletion not possible'));\n          }\n          break;\n        case 'add':\n          if (options[1] !== 'true' && options[1] !== 'false')\n            console.log('recurring option must be true or false');\n          else if (options.slice(2, 5)\n            .filter(num => isNaN(num) || Number(num) > 59 || Number(num) < 0).length > 0\n            || Number(options[2]) > 23\n            || Number(options[2]) < 0)\n            console.log('Parameter 3, 4 and 5 must be numbers and between 0 0 0 and 23 59 59');\n          else {\n            API.addScheduleItem({\n              recurring: options[1] === 'true',\n              task: options[0],\n              occurences: [{\n                hour: Number(options[2]),\n                minute: Number(options[3]),\n                second: Number(options[4]),\n              }],\n            }).then((item) => {\n              console.log('Job addded');\n              if (toggle.schedule)\n                console.log(item);\n            }).catch((err) => {\n              console.log('Job not added');\n              console.log(err);\n            });\n          }\n          break;\n        case 'show':\n          if (options.length > 0 && options[0] === 'all') {\n            console.log(`All central scheduled jobs: ${schedule.length}`);\n            schedule.forEach(item => console.log(`${item.id}\\n\\t${item.occurences.map(i => `${i.hour < 10 ? `0${i.hour}` : i.hour}:${i.minute < 10 ? `0${i.minute}` : i.minute}:${i.second < 10 ? `0${i.second}` : i.second}`).join('\\n\\t')}`));\n          }\n          else {\n            console.log(`Active scheduled jobs: ${activeSchedule.length}`);\n            activeSchedule.forEach(item => console.log(`${item.id}\\n\\tTime until invocation: ${msToString((item.timeout.wait + item.timestamp) - new Date().getTime())}`));\n          }\n          break;\n        case 'help':\n        case 'h':\n          console.log(\n            `Usage:\n\\t- schedule get (force a fetch of the central schedule)\n\\t- schedule add <task> <recurring (true | false)> <hour> <minute> <second> (add task to central schedule)\n\\t- schedule delete <job-id> (delete the specified task from local and remote schedule)\n\\t- schedule help (show this command description)`,\n          );\n          break;\n        default:\n          console.log('Command not recognized');\n      }\n    }\n    else if (line.indexOf('run') === 0 && line.split(' ').length > 1) {\n      const options = line.split(' ').slice(1);\n      const items = schedule.filter(item => item.id === options[0]);\n      if (items.length > 0) {\n        items.forEach(item => run(item)());\n        console.log('Job invoked');\n      }\n      else if (options.length === 4) {\n        if (options.slice(1, 4)\n          .filter(num => isNaN(num) || Number(num) > 59 || Number(num) < 0).length > 0\n          || Number(options[1]) > 23\n          || Number(options[1]) < 0)\n          console.log('Parameter 2, 3 and 4 must be numbers and between 0 0 0 and 23 59 59');\n        else {\n          const nItem = {\n            id: uuid(),\n            recurring: false,\n            task: options[0],\n            occurences: [{\n              hour: Number(options[1]),\n              minute: Number(options[2]),\n              second: Number(options[3]),\n            }],\n          };\n          selfInvoked.push({\n            id: nItem.id,\n            recurring: nItem.recurring,\n            timestamp: new Date().getTime(),\n            timeout: new Timeout(run(nItem), getTimeToNextRun(nItem)),\n          });\n          console.log(`Added job:\\n${toggle.run ? JSON.stringify(nItem, null, 2) : ''}\\n`);\n        }\n      }\n      else if (options.length === 2 && options[1] === 'now') {\n        run({\n          task: options[0],\n        })();\n        console.log('Task invoked');\n      }\n      else if (options.length === 2 && options[0] === 'stop') {\n        if (options[1] === 'show')\n          selfStop.forEach(id => console.log(id));\n        else if (activeSchedule.filter(item => item.id === options[1]).length > 0) {\n          const item = activeSchedule.filter(i => i.id === options[1])[0];\n          item.timeout.stop();\n          activeSchedule = activeSchedule.filter(i => item.id !== i.id);\n          selfStop.push(item.id);\n          console.log('Job stopped');\n        }\n      }\n      else if (options.length === 2 && options[0] === 'start') {\n        if (options[1] === 'show')\n          selfStop.forEach(id => console.log(id));\n        else if (selfStop.indexOf(options[1]) > -1) {\n          const item = schedule.filter(i => i.id === options[1])[0];\n          activeSchedule.push({\n            id: item.id,\n            timeout: new Timeout(run(item), getTimeToNextRun(item)),\n            recurring: item.recurring,\n            timestamp: new Date().getTime(),\n          });\n          console.log('Job started');\n        }\n      }\n      else if (options.length === 1 && options[0] === 'show') {\n        console.log(`Locally scheduled jobs: ${selfInvoked.length}\\n`);\n        selfInvoked.forEach(item => console.log(`${item.id}\\n\\tTime until invocation: ${msToString((item.timeout.wait + item.timestamp) - new Date().getTime())}`));\n        console.log('');\n      }\n      else if (options.length === 1 && (options[0] === 'help' || options[0] === 'h')) {\n        console.log(\n          `Usage:\n\\t- run <job-id> (run the job with the ID provided now)\n\\t- run <task> now (run the specified task now)\n\\t- run <task> <hour> <minute> <second> (schedule a local task at the specified time)\n\\t- run start <job-id> (start the specified job)\n\\t- run stop <job-id> (stop the specified job from running locally)\n\\t- run start show (print central jobs stopped locally)\n\\t- run stop show (print central jobs stopped locally)\n\\t- run show (print the locally scheduled jobs)\n\\t- run help (show this command description)`,\n        );\n      }\n      else if (options.length === 1)\n        console.log('ID not recognized');\n      else if (options.length < 4 || options.length > 5)\n        console.log('Command not recognized');\n    }\n    else if (line.indexOf('help') === 0 || line.split(' ')[0] === 'h') {\n      console.log(\n        `Commands (for usage pass 'help' as first parameter to command)\n\\t- schedule\n\\t- run\n\\t- toggle\n\\t- help`,\n      );\n    }\n    else if (line.indexOf('toggle') === 0) {\n      const label = line.split(' ')[1];\n      if (label === 'help' || label === 'h')\n        console.log(`\n          Usage:\n\\t- toggle <label> (toggles the output label)\n\\t\\t- update (the ongoing update)\n\\t\\t- schedule\n\\t\\t- run\n\\t\\t- all (toggle all labels)\n\\t- toggle help (display this help section)`);\n      else if (label === 'all') {\n        const tk = Object.keys(toggle).filter(key => !toggle[key]).length > 0;\n        Object.keys(toggle).forEach((key) => {\n          toggle[key] = tk;\n        });\n        console.log(`All labels set to ${tk}`);\n      }\n      else if (label === 'show')\n        console.log(toggle);\n      else if (toggle[label] || toggle[label] === false) {\n        toggle[label] = !toggle[label];\n        console.log(`${label} set to ${toggle[label]}`);\n      }\n    }\n    else\n      console.log('Command not recognized, try \\'help\\' command');\n    update(true);\n  });\n};\n\nconst start = () => {\n  console.log('Starting scheduler');\n  API.registerScheduleListener((items) => {\n    if (!items)\n      return;\n    schedule = items;\n  });\n  const ft = () => {\n    API.getSchedule().then((data) => {\n      data.forEach(item => schedule.push(item));\n      update();\n      console.log('Scheduler commandline tool is ready:');\n      process.stdin.on('data', processInput);\n    }).catch(() => {\n      if (schedule.length === 0)\n        setTimeout(ft, 2000);\n    });\n  };\n  setTimeout(ft, 2000);\n};\n\nexport default start;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/scheduler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 283,
    "kind": "variable",
    "name": "interval",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~interval",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "schedule",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~schedule",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "variable",
    "name": "activeSchedule",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~activeSchedule",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 286,
    "kind": "variable",
    "name": "ignoreIDs",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~ignoreIDs",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 287,
    "kind": "variable",
    "name": "selfInvoked",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~selfInvoked",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 288,
    "kind": "variable",
    "name": "selfStop",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~selfStop",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 289,
    "kind": "variable",
    "name": "toggle",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~toggle",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"update\": *, \"schedule\": boolean, \"run\": boolean}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 290,
    "kind": "function",
    "name": "msToString",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~msToString",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "ms",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 291,
    "kind": "class",
    "name": "Timeout",
    "memberof": "src/server/scheduler.js",
    "static": true,
    "longname": "src/server/scheduler.js~Timeout",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 292,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/server/scheduler.js~Timeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/scheduler.js~Timeout#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "wait",
    "memberof": "src/server/scheduler.js~Timeout",
    "static": false,
    "longname": "src/server/scheduler.js~Timeout#wait",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "executed",
    "memberof": "src/server/scheduler.js~Timeout",
    "static": false,
    "longname": "src/server/scheduler.js~Timeout#executed",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "id",
    "memberof": "src/server/scheduler.js~Timeout",
    "static": false,
    "longname": "src/server/scheduler.js~Timeout#id",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "stop",
    "memberof": "src/server/scheduler.js~Timeout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/server/scheduler.js~Timeout#stop",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 298,
    "kind": "function",
    "name": "getTimeToNextRun",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~getTimeToNextRun",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 299,
    "kind": "function",
    "name": "run",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~run",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 300,
    "kind": "function",
    "name": "update",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~update",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "extra",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 301,
    "kind": "function",
    "name": "processInput",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~processInput",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 148,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 302,
    "kind": "function",
    "name": "start",
    "memberof": "src/server/scheduler.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/scheduler.js~start",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/scheduler.js",
    "importStyle": "start",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "file",
    "name": "src/server/server.js",
    "content": "/**\n * @module Server entry\n */\nimport express from 'express';\nimport session from 'express-session';\nimport morgan from 'morgan';\nimport path from 'path';\nimport dotenv from 'dotenv';\nimport passport from 'passport';\nimport Auth0Security from 'passport-auth0';\nimport Wordcloud from './routes/wordcloud';\nimport Search from './routes/search';\nimport WebScraper from './routes/webscraper';\nimport Auth from './routes/auth';\nimport Scheduler from './scheduler';\nimport { getCloudant } from './ics';\n\ndotenv.config();\n\npassport.use(new Auth0Security({\n  domain: process.env.AUTH0_DOMAIN,\n  clientID: process.env.AUTH0_CLIENT_ID,\n  clientSecret: process.env.AUTH0_CLIENT_SECRET,\n  callbackURL: process.env.AUTH0_CALLBACK_URL,\n}, (accessToken, refreshToken, extraParams, profile, done) => done(null, profile)));\npassport.serializeUser((user, done) => done(null, user));\npassport.deserializeUser((user, done) => done(null, user));\n\n/**\n * Express application\n * @type {express-server}\n */\nconst app = express();\n\napp.use(express.static(path.resolve(process.cwd(), 'build/client')));\napp.use(express.json());\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  cookie: { secure: false },\n  resave: false,\n  saveUninitialized: true,\n}));\napp.use(morgan('dev'));\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.use('/api/auth', Auth);\n\n/**\n * Auth API common error message\n * @name Auth API Error\n * @route {ANY} /api/auth\n */\napp.use('/api/auth', (err, req, res) => {\n  res.status(500).send(JSON.stringify(err, null, 2));\n});\n\n/**\n * Database connection check\n * @name Database connection check\n * @route {ANY} /api\n */\napp.use('/api', (req, res, next) => {\n  const start = new Date().getTime();\n  const timeLimit = 5000;\n  const cb = () => {\n    if (!getCloudant())\n      setTimeout(cb, 100);\n    else if (new Date().getTime() - start >= timeLimit)\n      res.status(500).send('Error');\n    else\n      setTimeout(next, 100);\n  };\n  cb();\n});\n\napp.use('/api/wordcloud', Wordcloud);\n\napp.use('/api/search', Search);\n\n/**\n * Check for authenticated for some api access\n * @route {ANY} /api\n * @authentication This route require login to Auth0 session\n * @headerparam {string} API-key if no Auth0 session\n */\napp.use('/api', (req, res, next) => {\n  if (req.user || req.headers.api_key === process.env.SCRAPER_API_KEY)\n    return next();\n  req.session.returnTo = req.originalUrl;\n  res.redirect('/api/auth/login');\n});\n\napp.use('/api/ws', WebScraper);\n\n/**\n * Endpoint not found\n * @route {ANY} /api\n */\napp.use('/api', (req, res) => {\n  res.status(404).send('API endpoint not found');\n});\n\n/**\n * Redirect on admin route if no Auth0 session\n * @route {GET} /admin\n */\napp.get('/admin', (req, res, next) => {\n  if (req.user)\n    return next();\n  req.session.returnTo = req.originalUrl;\n  res.redirect('/api/auth/login');\n});\n\n/**\n * Serve frontend\n * @route {GET} *\n */\napp.get('*', (req, res) => {\n  res.sendFile(path.join(process.cwd(), '/src/client/index.html'));\n});\n\n/**\n * The server object for export to test suite\n * @type {http-server}\n */\nconst server = app.listen(process.env.PORT || 3000, () => {\n  process.stdout.write(`listening on port ${process.env.PORT || 3000}\\n`);\n  if (process.argv.indexOf('--no-scheduler') === -1)\n    Scheduler();\n});\n\nexport default server;\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/server.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 304,
    "kind": "variable",
    "name": "app",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~app",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/server.js",
    "importStyle": null,
    "description": "Express application",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "express-server"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "variable",
    "name": "server",
    "memberof": "src/server/server.js",
    "static": true,
    "longname": "src/server/server.js~server",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/server.js",
    "importStyle": "server",
    "description": "The server object for export to test suite",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "http-server"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "file",
    "name": "src/server/ws/index.js",
    "content": "import ws, { loadIndex } from './webscraper';\n\nexport default (urls, cb) => {\n  loadIndex(() => {\n    urls.forEach((url) => {\n      ws(url, (err, data) => {\n        if (err)\n          cb();\n        else\n          cb(data);\n      });\n    });\n  });\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/ws/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 307,
    "kind": "function",
    "name": "index",
    "memberof": "src/server/ws/index.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/index.js~index",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ws/index.js",
    "importStyle": "index",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "urls",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "file",
    "name": "src/server/ws/nlu.js",
    "content": "import { nlu, getCloudant, connectCloudant } from '../ics';\n\nlet excludes;\n\nconst loadExclude = (cb) => {\n  if (excludes === undefined)\n    getCloudant().db.use('sa-meta').find({ selector: { type: 'nlu' } }, (err, result) => {\n      if (err)\n        return cb(err);\n      excludes = result.docs[0].excludeType.map(entry => entry.toLowerCase());\n      cb();\n    });\n  else\n    cb();\n};\n\nconst analyze = (urlData, cb) => {\n  urlData.forEach((page) => {\n    nlu.analyze({\n      text: page.body,\n      features: {\n        entities: {\n          sentiment: true,\n          emotion: true,\n        },\n      },\n    }, (err, data) => {\n      if (err)\n        return cb(err);\n      data.entities.filter(entry => excludes\n        .indexOf(entry.type.toLowerCase()) === -1)\n        .forEach((entry) => {\n          const doc = {\n            headline: page.headline,\n            url: page.url,\n            date: page.date,\n            analysis: {\n              text: entry.text,\n              sentiment: entry.sentiment,\n              relevance: entry.relevance,\n              emotion: entry.emotion,\n              count: entry.count,\n            },\n            sourceID: page.sourceID,\n          };\n          const ins = (d) => {\n            getCloudant().db.use('sa-index').insert(d, (err) => {\n              if (err) {\n                if (err.statusCode && err.statusCode !== 429)\n                  console.error(err);\n                else if (err.statusCode === 401) {\n                  if (getCloudant())\n                    connectCloudant();\n                }\n                setTimeout(() => {\n                  ins(doc);\n                }, 400);\n              }\n              else\n                cb(null);\n            });\n          };\n          ins(doc);\n        });\n    });\n  });\n};\n\nexport default (urlData, cb) => {\n  if (!getCloudant())\n    return cb(new Error('Cloudant not connected'));\n  loadExclude((err) => {\n    if (err)\n      return cb(err);\n    if (!urlData.slice)\n      urlData = [urlData];\n    if (urlData.length === 0)\n      return cb(null);\n    analyze(urlData, cb);\n  });\n};\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/ws/nlu.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 309,
    "kind": "function",
    "name": "loadExclude",
    "memberof": "src/server/ws/nlu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/nlu.js~loadExclude",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/ws/nlu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 310,
    "kind": "function",
    "name": "analyze",
    "memberof": "src/server/ws/nlu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/nlu.js~analyze",
    "access": "public",
    "export": false,
    "importPath": "sentiment-analysis/src/server/ws/nlu.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "urlData",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 311,
    "kind": "function",
    "name": "nlu",
    "memberof": "src/server/ws/nlu.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/nlu.js~nlu",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ws/nlu.js",
    "importStyle": "nlu",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "urlData",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "file",
    "name": "src/server/ws/webscraper.js",
    "content": "import cheerio from 'cheerio';\nimport rp from 'request-promise';\nimport url from 'url';\nimport Module from 'module';\nimport { getCloudant } from '../ics';\n\nlet db;\nlet index;\n\nconst loadIndex = (cb) => {\n  if (!db)\n    db = getCloudant().use('sa-meta');\n  db.find({ selector: { type: 'ws' } }, (err, result) => {\n    if (err)\n      return cb(err);\n    index = result.docs[0];\n    cb();\n  });\n};\n\nconst ws = (path, cb) => {\n  db = getCloudant().use('sa-meta');\n  let hostname = url.parse(path).hostname;\n  if (index[hostname] === undefined) {\n    Object.keys(index).forEach((key) => {\n      if (key.indexOf(hostname) > -1)\n        hostname = key;\n    });\n    if (index[hostname] === undefined)\n      return cb(`Error: Hostname not recognized '${hostname}'`);\n  }\n  rp(path).then((html) => {\n    const page = cheerio.load(html);\n    const host = index[hostname];\n    let headline = '';\n    for (let i = 0; i < host.headlines.length; i++) {\n      headline = page(host.headlines[i]).text();\n      if (headline.length > 0)\n        break;\n    }\n    const m = new Module();\n    m._compile(`module.exports = ${index[hostname].date.function}`, '');\n    const months = ['January', 'February', 'March', 'April', 'May', 'June',\n      'July', 'August', 'September', 'October', 'November', 'Desember'];\n    let element;\n    let tmp = '';\n    let config;\n    for (let i = 0; i < host.date.sel.length; i++) {\n      if (host.date.sel[i].attr === '')\n        tmp = page(host.date.sel[i].sel).text();\n      else\n        tmp = page(host.date.sel[i].sel).attr(host.date.sel[i].attr);\n      if (tmp.length > 0) {\n        config = host.date.sel[i];\n        break;\n      }\n    }\n    let date;\n    if (config)\n      try {\n        date = m.exports(host.date.attribute\n          ? element.attr(host.date.attribute)\n          : element.text(), months);\n      }\n      catch (e) {\n        date = new Date().getTime();\n      }\n    else\n      date = new Date().getTime();\n    if (!date || isNaN(date) || date < 0) // eslint-disable-line no-restricted-globals\n      date = new Date().getTime();\n    if (typeof date !== 'number')\n      date = date.getTime ? date.getTime() : new Date().getTime();\n    let p;\n    for (let i = 0; i < host.body.length; i++) {\n      const test = page(host.body[i]).text();\n      if (test.length > 0) {\n        p = page(host.body[i]);\n        break;\n      }\n    }\n    if (!p)\n      return cb(`Error: Not sufficient text to analyze: ${path}`);\n    host.exclude.forEach((sel) => {\n      p = p.not(sel);\n    });\n    let body = '';\n    p.text((i, text) => {\n      if (body.length > 9000)\n        return;\n      body += text;\n      if (i < p.length - 1) {\n        body += ' ';\n      }\n    });\n    if (body.length < 500)\n      return cb(`Error: Not sufficient text to analyze: ${path}`);\n    cb(null, {\n      headline,\n      body,\n      url: path,\n      sourceID: index[hostname].sourceID,\n      date,\n    });\n  }).catch((err) => {\n    cb(`Error: ${err}`);\n  });\n};\n\nexport default ws;\nexport { loadIndex };\n",
    "static": true,
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/src/server/ws/webscraper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 313,
    "kind": "function",
    "name": "ws",
    "memberof": "src/server/ws/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/webscraper.js~ws",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ws/webscraper.js",
    "importStyle": "ws",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "function",
    "name": "loadIndex",
    "memberof": "src/server/ws/webscraper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/server/ws/webscraper.js~loadIndex",
    "access": "public",
    "export": true,
    "importPath": "sentiment-analysis/src/server/ws/webscraper.js",
    "importStyle": "{loadIndex}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "cb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "kind": "index",
    "content": "# Sentiment-Analysis\n## Documentation\nThe documentation for the project can be found [here](https://andham97.github.io/Sentiment-Analysis/index.html)\n\n## Instalation guide\nMake sure you run atleast node version\n",
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"engines\": {\n    \"node\": \"9.3.0\",\n    \"npm\": \"6.5.0\"\n  },\n  \"name\": \"sentiment-analysis\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"scripts\": {\n    \"start\": \"node build/server/server.js\",\n    \"pretest\": \"eslint . --ext .js --ignore-path .gitignore\",\n    \"test\": \"jest\",\n    \"clean\": \"rm -rf build && mkdir build\",\n    \"build-server\": \"babel -d ./build/server ./src/server\",\n    \"build-client\": \"webpack\",\n    \"build\": \"npm run clean && npm run build-server && npm run build-client\",\n    \"debug-server\": \"nodemon --exec babel-node src/server/server.js --watch src/server\",\n    \"debug-client\": \"webpack --watch\",\n    \"debug-ws\": \"nodemon --exec babel-node src/server/ws/webscraper.js\",\n    \"ws\": \"babel-node src/server/ws/webscraper.js\",\n    \"prod-ws\": \"node build/server/ws/webscraper.js\",\n    \"jsdoc\": \"jsdoc -c jsdoc.json -d docs\",\n    \"djsdoc\": \"nodemon --exec npm run jsdoc --watch src\",\n    \"esdoc\": \"esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/andham97/Sentiment-Analysis.git\"\n  },\n  \"babel\": {\n    \"presets\": [\n      \"@babel/preset-env\",\n      \"@babel/preset-react\"\n    ],\n    \"plugins\": []\n  },\n  \"author\": \"Andreas Hammer, Dina Rosvoll, Oda Steinland Skaug\",\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@cloudant/cloudant\": \"^3.0.2\",\n    \"@react-pdf/renderer\": \"^1.5.4\",\n    \"auth0\": \"^2.16.0\",\n    \"bootstrap\": \"^4.3.1\",\n    \"brace\": \"^0.11.1\",\n    \"cfenv\": \"^1.2.1\",\n    \"cheerio\": \"^1.0.0-rc.2\",\n    \"dotenv\": \"^7.0.0\",\n    \"express\": \"^4.16.4\",\n    \"express-session\": \"^1.15.6\",\n    \"html2canvas\": \"^1.0.0-rc.1\",\n    \"js-beautify\": \"^1.9.1\",\n    \"jspdf\": \"^1.5.3\",\n    \"lodash\": \"^4.17.11\",\n    \"moment\": \"^2.24.0\",\n    \"morgan\": \"^1.9.1\",\n    \"newsapi\": \"^2.4.0\",\n    \"passport\": \"^0.4.0\",\n    \"passport-auth0\": \"^1.1.0\",\n    \"prismjs\": \"^1.16.0\",\n    \"prop-types\": \"^15.7.2\",\n    \"rasterizehtml\": \"^1.3.0\",\n    \"react\": \"^16.7.0\",\n    \"react-ace\": \"^6.4.0\",\n    \"react-autocomplete\": \"^1.8.1\",\n    \"react-bootstrap\": \"^1.0.0-beta.5\",\n    \"react-bootstrap-typeahead\": \"^4.0.0-alpha.5\",\n    \"react-d3-cloud\": \"^0.7.0\",\n    \"react-datepicker\": \"^2.3.0\",\n    \"react-dates\": \"^20.1.0\",\n    \"react-dom\": \"^16.7.0\",\n    \"react-hotkeys\": \"^1.1.4\",\n    \"react-icons\": \"^3.5.0\",\n    \"react-minimal-pie-chart\": \"^3.5.0\",\n    \"react-onclickoutside\": \"^6.8.0\",\n    \"react-responsive\": \"^6.1.1\",\n    \"react-router\": \"^5.0.0\",\n    \"react-router-dom\": \"^5.0.0\",\n    \"react-s-alert\": \"^1.4.1\",\n    \"react-simple-code-editor\": \"^0.9.10\",\n    \"react-tagcloud\": \"^1.4.0\",\n    \"recharts\": \"^1.5.0\",\n    \"request\": \"^2.88.0\",\n    \"request-promise\": \"^4.2.4\",\n    \"search-text-tokenizer\": \"^2.1.1\",\n    \"url-loader\": \"^1.1.2\",\n    \"uuid\": \"^3.3.2\",\n    \"validator\": \"^10.11.0\",\n    \"watson-developer-cloud\": \"^3.17.0\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.2.3\",\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/node\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.3.1\",\n    \"@babel/preset-react\": \"^7.0.0\",\n    \"babel-core\": \"^7.0.0-bridge.0\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^8.0.5\",\n    \"css-loader\": \"^2.1.0\",\n    \"enzyme\": \"^3.8.0\",\n    \"enzyme-adapter-react-16\": \"^1.8.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-jsx-plugin\": \"^1.0.0\",\n    \"esdoc-react-plugin\": \"^1.0.1\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.12.1\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-plugin-import\": \"^2.15.0\",\n    \"eslint-plugin-jest\": \"^22.1.3\",\n    \"eslint-plugin-jsdoc\": \"^4.8.4\",\n    \"eslint-plugin-react\": \"^7.12.4\",\n    \"jest\": \"^24.1.0\",\n    \"jsdoc\": \"^3.6.2\",\n    \"jsdoc-babel\": \"^0.5.0\",\n    \"jsdoc-route-plugin\": \"^0.1.0\",\n    \"jsdoc-to-markdown\": \"^5.0.0\",\n    \"loke-jsdoc-theme\": \"^2.1.0\",\n    \"nock\": \"^10.0.6\",\n    \"nodemon\": \"^1.18.9\",\n    \"path\": \"^0.12.7\",\n    \"style-loader\": \"^0.23.1\",\n    \"webpack\": \"^4.29.0\",\n    \"webpack-cli\": \"^3.2.1\"\n  },\n  \"eslintConfig\": {\n    \"extends\": [\n      \"airbnb-base\",\n      \"plugin:jest/recommended\",\n      \"plugin:react/recommended\"\n    ],\n    \"parser\": \"babel-eslint\",\n    \"env\": {\n      \"node\": true,\n      \"jest/globals\": true,\n      \"browser\": true\n    },\n    \"plugins\": [\n      \"jest\",\n      \"react\"\n    ],\n    \"rules\": {\n      \"class-methods-use-this\": 0,\n      \"prefer-destructuring\": 0,\n      \"brace-style\": [\n        2,\n        \"stroustrup\"\n      ],\n      \"consistent-return\": 0,\n      \"nonblock-statement-body-position\": 0,\n      \"curly\": 0,\n      \"no-console\": 0,\n      \"no-param-reassign\": 0,\n      \"no-shadow\": [\n        \"error\",\n        {\n          \"allow\": [\n            \"err\"\n          ]\n        }\n      ],\n      \"no-underscore-dangle\": 0,\n      \"import/named\": 0,\n      \"no-plusplus\": 0,\n      \"prefer-promise-reject-errors\": 0,\n      \"no-eval\": 0,\n      \"no-await-in-loop\": 0,\n      \"no-restricted-globals\": 0,\n      \"import/no-unresolved\": 0\n    },\n    \"settings\": {\n      \"react\": {\n        \"version\": \"detect\"\n      }\n    }\n  },\n  \"eslintIgnore\": [\n    \"node_modules\",\n    \"docs\"\n  ],\n  \"jest\": {\n    \"setupFilesAfterEnv\": [\n      \"<rootDir>/enzyme.config.js\"\n    ],\n    \"moduleNameMapper\": {\n      \"\\\\.(css|less|sass|scss)$\": \"<rootDir>/__mocks__/styleMock.js\"\n    }\n  }\n}\n",
    "longname": "/Users/andreashammer/Documents/Javascript/SentimentAnalysis/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]